
STM32F303CoreWirelessRecieve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003768  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080038f0  080038f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800395c  0800395c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800395c  0800395c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800395c  0800395c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  08003970  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003970  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afe1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b24  00000000  00000000  0002b01d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0002cb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e0  00000000  00000000  0002d2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b815  00000000  00000000  0002d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a36b  00000000  00000000  000491b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097796  00000000  00000000  00053520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eacb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d18  00000000  00000000  000ead0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038d8 	.word	0x080038d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080038d8 	.word	0x080038d8

080001c8 <_ZN11UsartBufferC1Ev>:
	unsigned char buffer_[BUFFER_SIZE] = {};
	uint32_t rp_;
	uint32_t wp_;

public:
  inline UsartBuffer()
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  : rp_(0)
  , wp_(0)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4618      	mov	r0, r3
 80001d4:	2380      	movs	r3, #128	; 0x80
 80001d6:	461a      	mov	r2, r3
 80001d8:	2100      	movs	r1, #0
 80001da:	f003 fb75 	bl	80038c8 <memset>
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2200      	movs	r2, #0
 80001e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2200      	movs	r2, #0
 80001ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  {
  }
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <_ZN11UsartBuffer7enqueueEh>:
  bool enqueue(unsigned char data){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	70fb      	strb	r3, [r7, #3]
	  if(((wp_ - rp_) & (BUFFER_SIZE-1)) == (BUFFER_SIZE-1)){
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000210:	1ad3      	subs	r3, r2, r3
 8000212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000216:	2b7f      	cmp	r3, #127	; 0x7f
 8000218:	d101      	bne.n	800021e <_ZN11UsartBuffer7enqueueEh+0x26>
		  return false;
 800021a:	2300      	movs	r3, #0
 800021c:	e009      	b.n	8000232 <_ZN11UsartBuffer7enqueueEh+0x3a>
	  }
	  buffer_[wp_] = data;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	78f9      	ldrb	r1, [r7, #3]
 8000228:	54d1      	strb	r1, [r2, r3]
	  inc_wp();
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f805 	bl	800023a <_ZN11UsartBuffer6inc_wpEv>
	  return true;
 8000230:	2301      	movs	r3, #1
  }
 8000232:	4618      	mov	r0, r3
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <_ZN11UsartBuffer6inc_wpEv>:
  void inc_wp(){
 800023a:	b480      	push	{r7}
 800023c:	b083      	sub	sp, #12
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
	  wp_ = (++wp_) & (BUFFER_SIZE-1);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000248:	1c5a      	adds	r2, r3, #1
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr

0800026c <_ZN11UsartBuffer6inc_rpEv>:
  void inc_rp(){
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	  rp_ = (++rp_) & (BUFFER_SIZE-1);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800027a:	1c5a      	adds	r2, r3, #1
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000288:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <_ZN11UsartBuffer7dequeueERh>:
  bool dequeue(unsigned char & data){
 800029e:	b580      	push	{r7, lr}
 80002a0:	b082      	sub	sp, #8
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	6078      	str	r0, [r7, #4]
 80002a6:	6039      	str	r1, [r7, #0]
	  if(rp_ == wp_){
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d101      	bne.n	80002bc <_ZN11UsartBuffer7dequeueERh+0x1e>
		  return false;
 80002b8:	2300      	movs	r3, #0
 80002ba:	e00a      	b.n	80002d2 <_ZN11UsartBuffer7dequeueERh+0x34>
	  }
	  data = buffer_[rp_];
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	5cd2      	ldrb	r2, [r2, r3]
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	701a      	strb	r2, [r3, #0]
	  inc_rp();
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f7ff ffce 	bl	800026c <_ZN11UsartBuffer6inc_rpEv>
	  return true;
 80002d0:	2301      	movs	r3, #1
  }
 80002d2:	4618      	mov	r0, r3
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b0b0      	sub	sp, #192	; 0xc0
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e2:	f000 fae3 	bl	80008ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f8bb 	bl	8000460 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f000 f983 	bl	80005f4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80002ee:	f000 f94d 	bl	800058c <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 80002f2:	f000 f917 	bl	8000524 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, &byte, 1);
 80002f6:	2201      	movs	r2, #1
 80002f8:	4951      	ldr	r1, [pc, #324]	; (8000440 <main+0x164>)
 80002fa:	4852      	ldr	r0, [pc, #328]	; (8000444 <main+0x168>)
 80002fc:	f002 f972 	bl	80025e4 <HAL_UART_Receive_IT>
  uint32_t  last_processed_time = HAL_GetTick();
 8000300:	f000 fb2e 	bl	8000960 <HAL_GetTick>
 8000304:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  UsartBuffer ub;
 8000308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff5b 	bl	80001c8 <_ZN11UsartBufferC1Ev>
  while (1)
  {
	  for (int i = 0; i < 127; ++i){
 8000312:	2300      	movs	r3, #0
 8000314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000318:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800031c:	2b7e      	cmp	r3, #126	; 0x7e
 800031e:	dc3d      	bgt.n	800039c <main+0xc0>
		  bool res = ub.enqueue('0'+(i%10));
 8000320:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000324:	4b48      	ldr	r3, [pc, #288]	; (8000448 <main+0x16c>)
 8000326:	fb83 1302 	smull	r1, r3, r3, r2
 800032a:	1099      	asrs	r1, r3, #2
 800032c:	17d3      	asrs	r3, r2, #31
 800032e:	1ac9      	subs	r1, r1, r3
 8000330:	460b      	mov	r3, r1
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	440b      	add	r3, r1
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	1ad1      	subs	r1, r2, r3
 800033a:	b2cb      	uxtb	r3, r1
 800033c:	3330      	adds	r3, #48	; 0x30
 800033e:	b2da      	uxtb	r2, r3
 8000340:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000344:	4611      	mov	r1, r2
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff56 	bl	80001f8 <_ZN11UsartBuffer7enqueueEh>
 800034c:	4603      	mov	r3, r0
 800034e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
		  if(res){
 8000352:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d00d      	beq.n	8000376 <main+0x9a>
			  const uint8_t tx_fail[] = "Succeed\r\n";
 800035a:	4a3c      	ldr	r2, [pc, #240]	; (800044c <main+0x170>)
 800035c:	f107 031c 	add.w	r3, r7, #28
 8000360:	ca07      	ldmia	r2, {r0, r1, r2}
 8000362:	c303      	stmia	r3!, {r0, r1}
 8000364:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, tx_fail, sizeof(tx_fail), 10);
 8000366:	f107 011c 	add.w	r1, r7, #28
 800036a:	230a      	movs	r3, #10
 800036c:	220a      	movs	r2, #10
 800036e:	4835      	ldr	r0, [pc, #212]	; (8000444 <main+0x168>)
 8000370:	f002 f8ae 	bl	80024d0 <HAL_UART_Transmit>
 8000374:	e00c      	b.n	8000390 <main+0xb4>
		  }else{
			  const uint8_t tx_fail[] = "Failed\r\n";
 8000376:	4a36      	ldr	r2, [pc, #216]	; (8000450 <main+0x174>)
 8000378:	f107 0310 	add.w	r3, r7, #16
 800037c:	ca07      	ldmia	r2, {r0, r1, r2}
 800037e:	c303      	stmia	r3!, {r0, r1}
 8000380:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, tx_fail, sizeof(tx_fail), 10);
 8000382:	f107 0110 	add.w	r1, r7, #16
 8000386:	230a      	movs	r3, #10
 8000388:	2209      	movs	r2, #9
 800038a:	482e      	ldr	r0, [pc, #184]	; (8000444 <main+0x168>)
 800038c:	f002 f8a0 	bl	80024d0 <HAL_UART_Transmit>
	  for (int i = 0; i < 127; ++i){
 8000390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000394:	3301      	adds	r3, #1
 8000396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800039a:	e7bd      	b.n	8000318 <main+0x3c>
		  }
	  }
	  for(int i = 0; i < 127; ++i){
 800039c:	2300      	movs	r3, #0
 800039e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80003a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80003a6:	2b7e      	cmp	r3, #126	; 0x7e
 80003a8:	dc29      	bgt.n	80003fe <main+0x122>
		  unsigned char sd = ' ';
 80003aa:	2320      	movs	r3, #32
 80003ac:	73fb      	strb	r3, [r7, #15]
		  bool res = ub.dequeue(sd);
 80003ae:	f107 020f 	add.w	r2, r7, #15
 80003b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b6:	4611      	mov	r1, r2
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ff70 	bl	800029e <_ZN11UsartBuffer7dequeueERh>
 80003be:	4603      	mov	r3, r0
 80003c0:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
		  if(res){
 80003c4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d007      	beq.n	80003dc <main+0x100>
			  HAL_UART_Transmit(&huart1, &sd, 1, 10);
 80003cc:	f107 010f 	add.w	r1, r7, #15
 80003d0:	230a      	movs	r3, #10
 80003d2:	2201      	movs	r2, #1
 80003d4:	481b      	ldr	r0, [pc, #108]	; (8000444 <main+0x168>)
 80003d6:	f002 f87b 	bl	80024d0 <HAL_UART_Transmit>
 80003da:	e00a      	b.n	80003f2 <main+0x116>
		  }else{
			  const uint8_t tx_fail[] = "Failedr\r\n";
 80003dc:	4a1d      	ldr	r2, [pc, #116]	; (8000454 <main+0x178>)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80003e2:	c303      	stmia	r3!, {r0, r1}
 80003e4:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, tx_fail, sizeof(tx_fail), 10);
 80003e6:	1d39      	adds	r1, r7, #4
 80003e8:	230a      	movs	r3, #10
 80003ea:	220a      	movs	r2, #10
 80003ec:	4815      	ldr	r0, [pc, #84]	; (8000444 <main+0x168>)
 80003ee:	f002 f86f 	bl	80024d0 <HAL_UART_Transmit>
	  for(int i = 0; i < 127; ++i){
 80003f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80003f6:	3301      	adds	r3, #1
 80003f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80003fc:	e7d1      	b.n	80003a2 <main+0xc6>
		  }
	  }

	  if(HAL_GetTick() - last_processed_time > 500){
 80003fe:	f000 faaf 	bl	8000960 <HAL_GetTick>
 8000402:	4602      	mov	r2, r0
 8000404:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800040e:	bf8c      	ite	hi
 8000410:	2301      	movhi	r3, #1
 8000412:	2300      	movls	r3, #0
 8000414:	b2db      	uxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	f43f af7b 	beq.w	8000312 <main+0x36>
		  HAL_UART_Transmit(&huart1, tx_data, sizeof(tx_data), 10);
 800041c:	230a      	movs	r3, #10
 800041e:	220f      	movs	r2, #15
 8000420:	490d      	ldr	r1, [pc, #52]	; (8000458 <main+0x17c>)
 8000422:	4808      	ldr	r0, [pc, #32]	; (8000444 <main+0x168>)
 8000424:	f002 f854 	bl	80024d0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 10);
 8000428:	230a      	movs	r3, #10
 800042a:	220f      	movs	r2, #15
 800042c:	490a      	ldr	r1, [pc, #40]	; (8000458 <main+0x17c>)
 800042e:	480b      	ldr	r0, [pc, #44]	; (800045c <main+0x180>)
 8000430:	f002 f84e 	bl	80024d0 <HAL_UART_Transmit>
		  last_processed_time = HAL_GetTick();
 8000434:	f000 fa94 	bl	8000960 <HAL_GetTick>
 8000438:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800043c:	e769      	b.n	8000312 <main+0x36>
 800043e:	bf00      	nop
 8000440:	20000138 	.word	0x20000138
 8000444:	20000028 	.word	0x20000028
 8000448:	66666667 	.word	0x66666667
 800044c:	080038f0 	.word	0x080038f0
 8000450:	080038fc 	.word	0x080038fc
 8000454:	08003908 	.word	0x08003908
 8000458:	08003914 	.word	0x08003914
 800045c:	200000b0 	.word	0x200000b0

08000460 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b096      	sub	sp, #88	; 0x58
 8000464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000466:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800046a:	2228      	movs	r2, #40	; 0x28
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f003 fa2a 	bl	80038c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000474:	f107 031c 	add.w	r3, r7, #28
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
 8000490:	611a      	str	r2, [r3, #16]
 8000492:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000494:	2302      	movs	r3, #2
 8000496:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000498:	2301      	movs	r3, #1
 800049a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049c:	2310      	movs	r3, #16
 800049e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 fd5f 	bl	8000f6c <HAL_RCC_OscConfig>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	bf14      	ite	ne
 80004b4:	2301      	movne	r3, #1
 80004b6:	2300      	moveq	r3, #0
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80004be:	f000 f8dd 	bl	800067c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c2:	230f      	movs	r3, #15
 80004c4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c6:	2300      	movs	r3, #0
 80004c8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d6:	f107 031c 	add.w	r3, r7, #28
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f001 fc4d 	bl	8001d7c <HAL_RCC_ClockConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	bf14      	ite	ne
 80004e8:	2301      	movne	r3, #1
 80004ea:	2300      	moveq	r3, #0
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80004f2:	f000 f8c3 	bl	800067c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004f6:	2301      	movs	r3, #1
 80004f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	4618      	mov	r0, r3
 8000502:	f001 fe71 	bl	80021e8 <HAL_RCCEx_PeriphCLKConfig>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	bf14      	ite	ne
 800050c:	2301      	movne	r3, #1
 800050e:	2300      	moveq	r3, #0
 8000510:	b2db      	uxtb	r3, r3
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000516:	f000 f8b1 	bl	800067c <Error_Handler>
  }
}
 800051a:	bf00      	nop
 800051c:	3758      	adds	r7, #88	; 0x58
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <_ZL19MX_USART1_UART_Initv+0x60>)
 800052a:	4a17      	ldr	r2, [pc, #92]	; (8000588 <_ZL19MX_USART1_UART_Initv+0x64>)
 800052c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <_ZL19MX_USART1_UART_Initv+0x60>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000548:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <_ZL19MX_USART1_UART_Initv+0x60>)
 800054a:	220c      	movs	r2, #12
 800054c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000554:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <_ZL19MX_USART1_UART_Initv+0x60>)
 800055c:	2200      	movs	r2, #0
 800055e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000566:	4807      	ldr	r0, [pc, #28]	; (8000584 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000568:	f001 ff64 	bl	8002434 <HAL_UART_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	bf14      	ite	ne
 8000572:	2301      	movne	r3, #1
 8000574:	2300      	moveq	r3, #0
 8000576:	b2db      	uxtb	r3, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 800057c:	f000 f87e 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000028 	.word	0x20000028
 8000588:	40013800 	.word	0x40013800

0800058c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <_ZL19MX_USART2_UART_Initv+0x60>)
 8000592:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <_ZL19MX_USART2_UART_Initv+0x60>)
 8000598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800059c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80005b2:	220c      	movs	r2, #12
 80005b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ce:	4807      	ldr	r0, [pc, #28]	; (80005ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80005d0:	f001 ff30 	bl	8002434 <HAL_UART_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	bf14      	ite	ne
 80005da:	2301      	movne	r3, #1
 80005dc:	2300      	moveq	r3, #0
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80005e4:	f000 f84a 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200000b0 	.word	0x200000b0
 80005f0:	40004400 	.word	0x40004400

080005f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <_ZL12MX_GPIO_Initv+0x44>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <_ZL12MX_GPIO_Initv+0x44>)
 8000600:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <_ZL12MX_GPIO_Initv+0x44>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <_ZL12MX_GPIO_Initv+0x44>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a08      	ldr	r2, [pc, #32]	; (8000638 <_ZL12MX_GPIO_Initv+0x44>)
 8000618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061c:	6153      	str	r3, [r2, #20]
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <_ZL12MX_GPIO_Initv+0x44>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <HAL_UART_RxCpltCallback>:


const uint8_t tx_ddata[] = "\r\nR: ";
/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a08      	ldr	r2, [pc, #32]	; (800066c <HAL_UART_RxCpltCallback+0x30>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d10a      	bne.n	8000664 <HAL_UART_RxCpltCallback+0x28>
  {
//    HAL_UART_Transmit(&huart2, &tx_ddata, sizeof(tx_ddata), 100);
    HAL_UART_Transmit(&huart2, &byte, sizeof(byte), 100);
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	2201      	movs	r2, #1
 8000652:	4907      	ldr	r1, [pc, #28]	; (8000670 <HAL_UART_RxCpltCallback+0x34>)
 8000654:	4807      	ldr	r0, [pc, #28]	; (8000674 <HAL_UART_RxCpltCallback+0x38>)
 8000656:	f001 ff3b 	bl	80024d0 <HAL_UART_Transmit>

    HAL_UART_Receive_IT(&huart1, &byte, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	4904      	ldr	r1, [pc, #16]	; (8000670 <HAL_UART_RxCpltCallback+0x34>)
 800065e:	4806      	ldr	r0, [pc, #24]	; (8000678 <HAL_UART_RxCpltCallback+0x3c>)
 8000660:	f001 ffc0 	bl	80025e4 <HAL_UART_Receive_IT>
  }
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40013800 	.word	0x40013800
 8000670:	20000138 	.word	0x20000138
 8000674:	200000b0 	.word	0x200000b0
 8000678:	20000028 	.word	0x20000028

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000684:	e7fe      	b.n	8000684 <Error_Handler+0x8>
	...

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <HAL_MspInit+0x44>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <HAL_MspInit+0x44>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <HAL_MspInit+0x44>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <HAL_MspInit+0x44>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <HAL_MspInit+0x44>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b0:	61d3      	str	r3, [r2, #28]
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_MspInit+0x44>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	; 0x30
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a34      	ldr	r2, [pc, #208]	; (80007c0 <HAL_UART_MspInit+0xf0>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d132      	bne.n	8000758 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006f2:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <HAL_UART_MspInit+0xf4>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	4a33      	ldr	r2, [pc, #204]	; (80007c4 <HAL_UART_MspInit+0xf4>)
 80006f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fc:	6193      	str	r3, [r2, #24]
 80006fe:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <HAL_UART_MspInit+0xf4>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	61bb      	str	r3, [r7, #24]
 8000708:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <HAL_UART_MspInit+0xf4>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a2d      	ldr	r2, [pc, #180]	; (80007c4 <HAL_UART_MspInit+0xf4>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <HAL_UART_MspInit+0xf4>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000722:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000734:	2307      	movs	r3, #7
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000742:	f000 faa1 	bl	8000c88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	2025      	movs	r0, #37	; 0x25
 800074c:	f000 f9ef 	bl	8000b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000750:	2025      	movs	r0, #37	; 0x25
 8000752:	f000 fa08 	bl	8000b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000756:	e02e      	b.n	80007b6 <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a1a      	ldr	r2, [pc, #104]	; (80007c8 <HAL_UART_MspInit+0xf8>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d129      	bne.n	80007b6 <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <HAL_UART_MspInit+0xf4>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <HAL_UART_MspInit+0xf4>)
 8000768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_UART_MspInit+0xf4>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_UART_MspInit+0xf4>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <HAL_UART_MspInit+0xf4>)
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	6153      	str	r3, [r2, #20]
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_UART_MspInit+0xf4>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000792:	f248 0304 	movw	r3, #32772	; 0x8004
 8000796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a0:	2303      	movs	r3, #3
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007a4:	2307      	movs	r3, #7
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b2:	f000 fa69 	bl	8000c88 <HAL_GPIO_Init>
}
 80007b6:	bf00      	nop
 80007b8:	3730      	adds	r7, #48	; 0x30
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40013800 	.word	0x40013800
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40004400 	.word	0x40004400

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>

080007d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0x4>

080007d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <MemManage_Handler+0x4>

080007de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <BusFault_Handler+0x4>

080007e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <UsageFault_Handler+0x4>

080007ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000818:	f000 f88e 	bl	8000938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <USART1_IRQHandler+0x10>)
 8000826:	f001 ff21 	bl	800266c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000028 	.word	0x20000028

08000834 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000890 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800085c:	f7ff ffea 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <LoopForever+0x6>)
  ldr r1, =_edata
 8000862:	490d      	ldr	r1, [pc, #52]	; (8000898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000864:	4a0d      	ldr	r2, [pc, #52]	; (800089c <LoopForever+0xe>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000878:	4c0a      	ldr	r4, [pc, #40]	; (80008a4 <LoopForever+0x16>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000886:	f002 fffb 	bl	8003880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088a:	f7ff fd27 	bl	80002dc <main>

0800088e <LoopForever>:

LoopForever:
    b LoopForever
 800088e:	e7fe      	b.n	800088e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000890:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800089c:	08003964 	.word	0x08003964
  ldr r2, =_sbss
 80008a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a4:	20000140 	.word	0x20000140

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>
	...

080008ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_Init+0x28>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_Init+0x28>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 f92b 	bl	8000b18 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 f808 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f7ff fede 	bl	8000688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x54>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x58>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f943 	bl	8000b82 <HAL_SYSTICK_Config>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e00e      	b.n	8000924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d80a      	bhi.n	8000922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090c:	2200      	movs	r2, #0
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f000 f90b 	bl	8000b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <HAL_InitTick+0x5c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	e000      	b.n	8000924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000000 	.word	0x20000000
 8000930:	20000008 	.word	0x20000008
 8000934:	20000004 	.word	0x20000004

08000938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_IncTick+0x20>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_IncTick+0x24>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4413      	add	r3, r2
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_IncTick+0x24>)
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000008 	.word	0x20000008
 800095c:	2000013c 	.word	0x2000013c

08000960 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return uwTick;  
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <HAL_GetTick+0x14>)
 8000966:	681b      	ldr	r3, [r3, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	2000013c 	.word	0x2000013c

08000978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009aa:	4a04      	ldr	r2, [pc, #16]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	60d3      	str	r3, [r2, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db0b      	blt.n	8000a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 021f 	and.w	r2, r3, #31
 80009f4:	4907      	ldr	r1, [pc, #28]	; (8000a14 <__NVIC_EnableIRQ+0x38>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	095b      	lsrs	r3, r3, #5
 80009fc:	2001      	movs	r0, #1
 80009fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	; (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	; 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae4:	d301      	bcc.n	8000aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00f      	b.n	8000b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <SysTick_Config+0x40>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af2:	210f      	movs	r1, #15
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f7ff ff8e 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <SysTick_Config+0x40>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <SysTick_Config+0x40>)
 8000b04:	2207      	movs	r2, #7
 8000b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	e000e010 	.word	0xe000e010

08000b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff ff29 	bl	8000978 <__NVIC_SetPriorityGrouping>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b40:	f7ff ff3e 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 8000b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	6978      	ldr	r0, [r7, #20]
 8000b4c:	f7ff ff8e 	bl	8000a6c <NVIC_EncodePriority>
 8000b50:	4602      	mov	r2, r0
 8000b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff5d 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff31 	bl	80009dc <__NVIC_EnableIRQ>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffa2 	bl	8000ad4 <SysTick_Config>
 8000b90:	4603      	mov	r3, r0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d008      	beq.n	8000bbe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2204      	movs	r2, #4
 8000bb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e020      	b.n	8000c00 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 020e 	bic.w	r2, r2, #14
 8000bcc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f022 0201 	bic.w	r2, r2, #1
 8000bdc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000be6:	2101      	movs	r1, #1
 8000be8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d005      	beq.n	8000c2e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2204      	movs	r2, #4
 8000c26:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e027      	b.n	8000c7e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 020e 	bic.w	r2, r2, #14
 8000c3c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 0201 	bic.w	r2, r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c56:	2101      	movs	r1, #1
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	4798      	blx	r3
    } 
  }
  return status;
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b087      	sub	sp, #28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c96:	e14e      	b.n	8000f36 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 8140 	beq.w	8000f30 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d005      	beq.n	8000cc8 <HAL_GPIO_Init+0x40>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d130      	bne.n	8000d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	f003 0201 	and.w	r2, r3, #1
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d017      	beq.n	8000d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d123      	bne.n	8000dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	220f      	movs	r2, #15
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	6939      	ldr	r1, [r7, #16]
 8000db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0203 	and.w	r2, r3, #3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 809a 	beq.w	8000f30 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfc:	4b55      	ldr	r3, [pc, #340]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a54      	ldr	r2, [pc, #336]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b52      	ldr	r3, [pc, #328]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e14:	4a50      	ldr	r2, [pc, #320]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e3e:	d013      	beq.n	8000e68 <HAL_GPIO_Init+0x1e0>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a46      	ldr	r2, [pc, #280]	; (8000f5c <HAL_GPIO_Init+0x2d4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d00d      	beq.n	8000e64 <HAL_GPIO_Init+0x1dc>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a45      	ldr	r2, [pc, #276]	; (8000f60 <HAL_GPIO_Init+0x2d8>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d007      	beq.n	8000e60 <HAL_GPIO_Init+0x1d8>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a44      	ldr	r2, [pc, #272]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d101      	bne.n	8000e5c <HAL_GPIO_Init+0x1d4>
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e006      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	e004      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e60:	2302      	movs	r3, #2
 8000e62:	e002      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e64:	2301      	movs	r3, #1
 8000e66:	e000      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	f002 0203 	and.w	r2, r2, #3
 8000e70:	0092      	lsls	r2, r2, #2
 8000e72:	4093      	lsls	r3, r2
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e7a:	4937      	ldr	r1, [pc, #220]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3302      	adds	r3, #2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e88:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eac:	4a2e      	ldr	r2, [pc, #184]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ed6:	4a24      	ldr	r2, [pc, #144]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000edc:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	3301      	adds	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f47f aea9 	bne.w	8000c98 <HAL_GPIO_Init+0x10>
  }
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	371c      	adds	r7, #28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010000 	.word	0x40010000
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	48000800 	.word	0x48000800
 8000f64:	48000c00 	.word	0x48000c00
 8000f68:	40010400 	.word	0x40010400

08000f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	f000 bef4 	b.w	8001d6e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 816a 	beq.w	800126a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f96:	4bb3      	ldr	r3, [pc, #716]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d00c      	beq.n	8000fbc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fa2:	4bb0      	ldr	r3, [pc, #704]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d159      	bne.n	8001062 <HAL_RCC_OscConfig+0xf6>
 8000fae:	4bad      	ldr	r3, [pc, #692]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fba:	d152      	bne.n	8001062 <HAL_RCC_OscConfig+0xf6>
 8000fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fc8:	fa93 f3a3 	rbit	r3, r3
 8000fcc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fd0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	fab3 f383 	clz	r3, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d102      	bne.n	8000fee <HAL_RCC_OscConfig+0x82>
 8000fe8:	4b9e      	ldr	r3, [pc, #632]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	e015      	b.n	800101a <HAL_RCC_OscConfig+0xae>
 8000fee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000ffa:	fa93 f3a3 	rbit	r3, r3
 8000ffe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001006:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800100a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001016:	4b93      	ldr	r3, [pc, #588]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800101e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001022:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001026:	fa92 f2a2 	rbit	r2, r2
 800102a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800102e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001032:	fab2 f282 	clz	r2, r2
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	f042 0220 	orr.w	r2, r2, #32
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	f002 021f 	and.w	r2, r2, #31
 8001042:	2101      	movs	r1, #1
 8001044:	fa01 f202 	lsl.w	r2, r1, r2
 8001048:	4013      	ands	r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 810c 	beq.w	8001268 <HAL_RCC_OscConfig+0x2fc>
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f040 8106 	bne.w	8001268 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	f000 be86 	b.w	8001d6e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106c:	d106      	bne.n	800107c <HAL_RCC_OscConfig+0x110>
 800106e:	4b7d      	ldr	r3, [pc, #500]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a7c      	ldr	r2, [pc, #496]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8001074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e030      	b.n	80010de <HAL_RCC_OscConfig+0x172>
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x134>
 8001086:	4b77      	ldr	r3, [pc, #476]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a76      	ldr	r2, [pc, #472]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 800108c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b74      	ldr	r3, [pc, #464]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a73      	ldr	r2, [pc, #460]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8001098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e01e      	b.n	80010de <HAL_RCC_OscConfig+0x172>
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010aa:	d10c      	bne.n	80010c6 <HAL_RCC_OscConfig+0x15a>
 80010ac:	4b6d      	ldr	r3, [pc, #436]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a6c      	ldr	r2, [pc, #432]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a69      	ldr	r2, [pc, #420]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e00b      	b.n	80010de <HAL_RCC_OscConfig+0x172>
 80010c6:	4b67      	ldr	r3, [pc, #412]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a66      	ldr	r2, [pc, #408]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4b64      	ldr	r3, [pc, #400]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a63      	ldr	r2, [pc, #396]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010dc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010de:	4b61      	ldr	r3, [pc, #388]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e2:	f023 020f 	bic.w	r2, r3, #15
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	495d      	ldr	r1, [pc, #372]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d059      	beq.n	80011b0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fc30 	bl	8000960 <HAL_GetTick>
 8001100:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001104:	e00a      	b.n	800111c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001106:	f7ff fc2b 	bl	8000960 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b64      	cmp	r3, #100	; 0x64
 8001114:	d902      	bls.n	800111c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	f000 be29 	b.w	8001d6e <HAL_RCC_OscConfig+0xe02>
 800111c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001120:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001124:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001128:	fa93 f3a3 	rbit	r3, r3
 800112c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001130:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001134:	fab3 f383 	clz	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d102      	bne.n	800114e <HAL_RCC_OscConfig+0x1e2>
 8001148:	4b46      	ldr	r3, [pc, #280]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	e015      	b.n	800117a <HAL_RCC_OscConfig+0x20e>
 800114e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001152:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800115a:	fa93 f3a3 	rbit	r3, r3
 800115e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001162:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001166:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800116a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001176:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800117e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001182:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001186:	fa92 f2a2 	rbit	r2, r2
 800118a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800118e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001192:	fab2 f282 	clz	r2, r2
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	f042 0220 	orr.w	r2, r2, #32
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	f002 021f 	and.w	r2, r2, #31
 80011a2:	2101      	movs	r1, #1
 80011a4:	fa01 f202 	lsl.w	r2, r1, r2
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0ab      	beq.n	8001106 <HAL_RCC_OscConfig+0x19a>
 80011ae:	e05c      	b.n	800126a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fbd6 	bl	8000960 <HAL_GetTick>
 80011b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ba:	f7ff fbd1 	bl	8000960 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d902      	bls.n	80011d0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f000 bdcf 	b.w	8001d6e <HAL_RCC_OscConfig+0xe02>
 80011d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80011e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e8:	fab3 f383 	clz	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d102      	bne.n	8001202 <HAL_RCC_OscConfig+0x296>
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	e015      	b.n	800122e <HAL_RCC_OscConfig+0x2c2>
 8001202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001206:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800121e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001232:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001236:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800123a:	fa92 f2a2 	rbit	r2, r2
 800123e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001242:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001246:	fab2 f282 	clz	r2, r2
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	f042 0220 	orr.w	r2, r2, #32
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	f002 021f 	and.w	r2, r2, #31
 8001256:	2101      	movs	r1, #1
 8001258:	fa01 f202 	lsl.w	r2, r1, r2
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1ab      	bne.n	80011ba <HAL_RCC_OscConfig+0x24e>
 8001262:	e002      	b.n	800126a <HAL_RCC_OscConfig+0x2fe>
 8001264:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 816f 	beq.w	8001558 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800127a:	4bd0      	ldr	r3, [pc, #832]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001286:	4bcd      	ldr	r3, [pc, #820]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b08      	cmp	r3, #8
 8001290:	d16c      	bne.n	800136c <HAL_RCC_OscConfig+0x400>
 8001292:	4bca      	ldr	r3, [pc, #808]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d166      	bne.n	800136c <HAL_RCC_OscConfig+0x400>
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012a8:	fa93 f3a3 	rbit	r3, r3
 80012ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80012b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b4:	fab3 f383 	clz	r3, r3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	095b      	lsrs	r3, r3, #5
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d102      	bne.n	80012ce <HAL_RCC_OscConfig+0x362>
 80012c8:	4bbc      	ldr	r3, [pc, #752]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	e013      	b.n	80012f6 <HAL_RCC_OscConfig+0x38a>
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012e0:	2302      	movs	r3, #2
 80012e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80012f2:	4bb2      	ldr	r3, [pc, #712]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	2202      	movs	r2, #2
 80012f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80012fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001300:	fa92 f2a2 	rbit	r2, r2
 8001304:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001308:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800130c:	fab2 f282 	clz	r2, r2
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	f042 0220 	orr.w	r2, r2, #32
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	f002 021f 	and.w	r2, r2, #31
 800131c:	2101      	movs	r1, #1
 800131e:	fa01 f202 	lsl.w	r2, r1, r2
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d007      	beq.n	8001338 <HAL_RCC_OscConfig+0x3cc>
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d002      	beq.n	8001338 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	f000 bd1b 	b.w	8001d6e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001338:	4ba0      	ldr	r3, [pc, #640]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	21f8      	movs	r1, #248	; 0xf8
 8001348:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001350:	fa91 f1a1 	rbit	r1, r1
 8001354:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001358:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800135c:	fab1 f181 	clz	r1, r1
 8001360:	b2c9      	uxtb	r1, r1
 8001362:	408b      	lsls	r3, r1
 8001364:	4995      	ldr	r1, [pc, #596]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	e0f5      	b.n	8001558 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8085 	beq.w	8001482 <HAL_RCC_OscConfig+0x516>
 8001378:	2301      	movs	r3, #1
 800137a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001382:	fa93 f3a3 	rbit	r3, r3
 8001386:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800138a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001398:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	461a      	mov	r2, r3
 80013a0:	2301      	movs	r3, #1
 80013a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fadc 	bl	8000960 <HAL_GetTick>
 80013a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	e00a      	b.n	80013c4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fad7 	bl	8000960 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d902      	bls.n	80013c4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	f000 bcd5 	b.w	8001d6e <HAL_RCC_OscConfig+0xe02>
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80013ce:	fa93 f3a3 	rbit	r3, r3
 80013d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80013d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013da:	fab3 f383 	clz	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	095b      	lsrs	r3, r3, #5
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d102      	bne.n	80013f4 <HAL_RCC_OscConfig+0x488>
 80013ee:	4b73      	ldr	r3, [pc, #460]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	e013      	b.n	800141c <HAL_RCC_OscConfig+0x4b0>
 80013f4:	2302      	movs	r3, #2
 80013f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800140c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001418:	4b68      	ldr	r3, [pc, #416]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	2202      	movs	r2, #2
 800141e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001422:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001426:	fa92 f2a2 	rbit	r2, r2
 800142a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800142e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001432:	fab2 f282 	clz	r2, r2
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	f042 0220 	orr.w	r2, r2, #32
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	f002 021f 	and.w	r2, r2, #31
 8001442:	2101      	movs	r1, #1
 8001444:	fa01 f202 	lsl.w	r2, r1, r2
 8001448:	4013      	ands	r3, r2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0af      	beq.n	80013ae <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	4b5b      	ldr	r3, [pc, #364]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	21f8      	movs	r1, #248	; 0xf8
 800145e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001466:	fa91 f1a1 	rbit	r1, r1
 800146a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800146e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001472:	fab1 f181 	clz	r1, r1
 8001476:	b2c9      	uxtb	r1, r1
 8001478:	408b      	lsls	r3, r1
 800147a:	4950      	ldr	r1, [pc, #320]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
 8001480:	e06a      	b.n	8001558 <HAL_RCC_OscConfig+0x5ec>
 8001482:	2301      	movs	r3, #1
 8001484:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800148c:	fa93 f3a3 	rbit	r3, r3
 8001490:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001494:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001498:	fab3 f383 	clz	r3, r3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	461a      	mov	r2, r3
 80014aa:	2300      	movs	r3, #0
 80014ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fa57 	bl	8000960 <HAL_GetTick>
 80014b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff fa52 	bl	8000960 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d902      	bls.n	80014ce <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	f000 bc50 	b.w	8001d6e <HAL_RCC_OscConfig+0xe02>
 80014ce:	2302      	movs	r3, #2
 80014d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80014e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d102      	bne.n	80014fe <HAL_RCC_OscConfig+0x592>
 80014f8:	4b30      	ldr	r3, [pc, #192]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	e013      	b.n	8001526 <HAL_RCC_OscConfig+0x5ba>
 80014fe:	2302      	movs	r3, #2
 8001500:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001504:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001510:	2302      	movs	r3, #2
 8001512:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001516:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001522:	4b26      	ldr	r3, [pc, #152]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	2202      	movs	r2, #2
 8001528:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800152c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001530:	fa92 f2a2 	rbit	r2, r2
 8001534:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001538:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800153c:	fab2 f282 	clz	r2, r2
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	f042 0220 	orr.w	r2, r2, #32
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	f002 021f 	and.w	r2, r2, #31
 800154c:	2101      	movs	r1, #1
 800154e:	fa01 f202 	lsl.w	r2, r1, r2
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1af      	bne.n	80014b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 80da 	beq.w	800171c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d069      	beq.n	8001646 <HAL_RCC_OscConfig+0x6da>
 8001572:	2301      	movs	r3, #1
 8001574:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001578:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800157c:	fa93 f3a3 	rbit	r3, r3
 8001580:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_OscConfig+0x654>)
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	461a      	mov	r2, r3
 8001598:	2301      	movs	r3, #1
 800159a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff f9e0 	bl	8000960 <HAL_GetTick>
 80015a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a4:	e00e      	b.n	80015c4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a6:	f7ff f9db 	bl	8000960 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d906      	bls.n	80015c4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e3d9      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	10908120 	.word	0x10908120
 80015c4:	2302      	movs	r3, #2
 80015c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015ce:	fa93 f3a3 	rbit	r3, r3
 80015d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015da:	2202      	movs	r2, #2
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	fa93 f2a3 	rbit	r2, r3
 80015e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015f2:	2202      	movs	r2, #2
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	fa93 f2a3 	rbit	r2, r3
 8001600:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001604:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	4ba5      	ldr	r3, [pc, #660]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800160a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800160e:	2102      	movs	r1, #2
 8001610:	6019      	str	r1, [r3, #0]
 8001612:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	fa93 f1a3 	rbit	r1, r3
 800161c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001620:	6019      	str	r1, [r3, #0]
  return result;
 8001622:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001632:	b2db      	uxtb	r3, r3
 8001634:	f003 031f 	and.w	r3, r3, #31
 8001638:	2101      	movs	r1, #1
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0b0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x63a>
 8001644:	e06a      	b.n	800171c <HAL_RCC_OscConfig+0x7b0>
 8001646:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	fa93 f2a3 	rbit	r2, r3
 8001658:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800165c:	601a      	str	r2, [r3, #0]
  return result;
 800165e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001662:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001664:	fab3 f383 	clz	r3, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	4b8c      	ldr	r3, [pc, #560]	; (80018a0 <HAL_RCC_OscConfig+0x934>)
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	461a      	mov	r2, r3
 8001674:	2300      	movs	r3, #0
 8001676:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001678:	f7ff f972 	bl	8000960 <HAL_GetTick>
 800167c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	e009      	b.n	8001696 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001682:	f7ff f96d 	bl	8000960 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e36b      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
 8001696:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800169a:	2202      	movs	r2, #2
 800169c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fa93 f2a3 	rbit	r2, r3
 80016a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016b2:	2202      	movs	r2, #2
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	fa93 f2a3 	rbit	r2, r3
 80016c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016ca:	2202      	movs	r2, #2
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	fa93 f2a3 	rbit	r2, r3
 80016d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016de:	4b6f      	ldr	r3, [pc, #444]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80016e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016e6:	2102      	movs	r1, #2
 80016e8:	6019      	str	r1, [r3, #0]
 80016ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fa93 f1a3 	rbit	r1, r3
 80016f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016f8:	6019      	str	r1, [r3, #0]
  return result;
 80016fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	fab3 f383 	clz	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	2101      	movs	r1, #1
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1b2      	bne.n	8001682 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8158 	beq.w	80019dc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	4b5a      	ldr	r3, [pc, #360]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d112      	bne.n	8001764 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b57      	ldr	r3, [pc, #348]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a56      	ldr	r2, [pc, #344]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b54      	ldr	r3, [pc, #336]	; (800189c <HAL_RCC_OscConfig+0x930>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800175e:	2301      	movs	r3, #1
 8001760:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	4b4f      	ldr	r3, [pc, #316]	; (80018a4 <HAL_RCC_OscConfig+0x938>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11a      	bne.n	80017a6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001770:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <HAL_RCC_OscConfig+0x938>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a4b      	ldr	r2, [pc, #300]	; (80018a4 <HAL_RCC_OscConfig+0x938>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177c:	f7ff f8f0 	bl	8000960 <HAL_GetTick>
 8001780:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	e009      	b.n	800179a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001786:	f7ff f8eb 	bl	8000960 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e2e9      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179a:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <HAL_RCC_OscConfig+0x938>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0ef      	beq.n	8001786 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x852>
 80017b0:	4b3a      	ldr	r3, [pc, #232]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a39      	ldr	r2, [pc, #228]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e02f      	b.n	800181e <HAL_RCC_OscConfig+0x8b2>
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10c      	bne.n	80017e2 <HAL_RCC_OscConfig+0x876>
 80017c8:	4b34      	ldr	r3, [pc, #208]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	4a33      	ldr	r2, [pc, #204]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	6213      	str	r3, [r2, #32]
 80017d4:	4b31      	ldr	r3, [pc, #196]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4a30      	ldr	r2, [pc, #192]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017da:	f023 0304 	bic.w	r3, r3, #4
 80017de:	6213      	str	r3, [r2, #32]
 80017e0:	e01d      	b.n	800181e <HAL_RCC_OscConfig+0x8b2>
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_OscConfig+0x89a>
 80017ec:	4b2b      	ldr	r3, [pc, #172]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a2a      	ldr	r2, [pc, #168]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a27      	ldr	r2, [pc, #156]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	e00b      	b.n	800181e <HAL_RCC_OscConfig+0x8b2>
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a24      	ldr	r2, [pc, #144]	; (800189c <HAL_RCC_OscConfig+0x930>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6213      	str	r3, [r2, #32]
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a21      	ldr	r2, [pc, #132]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001818:	f023 0304 	bic.w	r3, r3, #4
 800181c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d06b      	beq.n	8001900 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001828:	f7ff f89a 	bl	8000960 <HAL_GetTick>
 800182c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001830:	e00b      	b.n	800184a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff f895 	bl	8000960 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e291      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
 800184a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800184e:	2202      	movs	r2, #2
 8001850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fa93 f2a3 	rbit	r2, r3
 800185c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001866:	2202      	movs	r2, #2
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	fa93 f2a3 	rbit	r2, r3
 8001874:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001878:	601a      	str	r2, [r3, #0]
  return result;
 800187a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800187e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d109      	bne.n	80018a8 <HAL_RCC_OscConfig+0x93c>
 8001894:	4b01      	ldr	r3, [pc, #4]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	e014      	b.n	80018c4 <HAL_RCC_OscConfig+0x958>
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000
 80018a0:	10908120 	.word	0x10908120
 80018a4:	40007000 	.word	0x40007000
 80018a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018ac:	2202      	movs	r2, #2
 80018ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	4bbb      	ldr	r3, [pc, #748]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018c8:	2102      	movs	r1, #2
 80018ca:	6011      	str	r1, [r2, #0]
 80018cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	fa92 f1a2 	rbit	r1, r2
 80018d6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80018da:	6011      	str	r1, [r2, #0]
  return result;
 80018dc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	fab2 f282 	clz	r2, r2
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	f002 021f 	and.w	r2, r2, #31
 80018f2:	2101      	movs	r1, #1
 80018f4:	fa01 f202 	lsl.w	r2, r1, r2
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d099      	beq.n	8001832 <HAL_RCC_OscConfig+0x8c6>
 80018fe:	e063      	b.n	80019c8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7ff f82e 	bl	8000960 <HAL_GetTick>
 8001904:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001908:	e00b      	b.n	8001922 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff f829 	bl	8000960 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e225      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
 8001922:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001926:	2202      	movs	r2, #2
 8001928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	fa93 f2a3 	rbit	r2, r3
 8001934:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800193e:	2202      	movs	r2, #2
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	fa93 f2a3 	rbit	r2, r3
 800194c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001950:	601a      	str	r2, [r3, #0]
  return result;
 8001952:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001956:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	b2db      	uxtb	r3, r3
 8001962:	f043 0302 	orr.w	r3, r3, #2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d102      	bne.n	8001972 <HAL_RCC_OscConfig+0xa06>
 800196c:	4b90      	ldr	r3, [pc, #576]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	e00d      	b.n	800198e <HAL_RCC_OscConfig+0xa22>
 8001972:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001976:	2202      	movs	r2, #2
 8001978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fa93 f2a3 	rbit	r2, r3
 8001984:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	4b89      	ldr	r3, [pc, #548]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001992:	2102      	movs	r1, #2
 8001994:	6011      	str	r1, [r2, #0]
 8001996:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	fa92 f1a2 	rbit	r1, r2
 80019a0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80019a4:	6011      	str	r1, [r2, #0]
  return result;
 80019a6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	fab2 f282 	clz	r2, r2
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	f002 021f 	and.w	r2, r2, #31
 80019bc:	2101      	movs	r1, #1
 80019be:	fa01 f202 	lsl.w	r2, r1, r2
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1a0      	bne.n	800190a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d0:	4b77      	ldr	r3, [pc, #476]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	4a76      	ldr	r2, [pc, #472]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 80019d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 81c2 	beq.w	8001d6c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e8:	4b71      	ldr	r3, [pc, #452]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	f000 819c 	beq.w	8001d2e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	f040 8114 	bne.w	8001c2a <HAL_RCC_OscConfig+0xcbe>
 8001a02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f2a3 	rbit	r2, r3
 8001a16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a1a:	601a      	str	r2, [r3, #0]
  return result;
 8001a1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	461a      	mov	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7fe ff92 	bl	8000960 <HAL_GetTick>
 8001a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a40:	e009      	b.n	8001a56 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a42:	f7fe ff8d 	bl	8000960 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e18b      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
 8001a56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a6e:	601a      	str	r2, [r3, #0]
  return result;
 8001a70:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d102      	bne.n	8001a90 <HAL_RCC_OscConfig+0xb24>
 8001a8a:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	e01b      	b.n	8001ac8 <HAL_RCC_OscConfig+0xb5c>
 8001a90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	fa93 f2a3 	rbit	r2, r3
 8001aa4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	fa93 f2a3 	rbit	r2, r3
 8001abe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001acc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ad0:	6011      	str	r1, [r2, #0]
 8001ad2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	fa92 f1a2 	rbit	r1, r2
 8001adc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ae0:	6011      	str	r1, [r2, #0]
  return result;
 8001ae2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	fab2 f282 	clz	r2, r2
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	f042 0220 	orr.w	r2, r2, #32
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	f002 021f 	and.w	r2, r2, #31
 8001af8:	2101      	movs	r1, #1
 8001afa:	fa01 f202 	lsl.w	r2, r1, r2
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d19e      	bne.n	8001a42 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b04:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	4925      	ldr	r1, [pc, #148]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
 8001b20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	fa93 f2a3 	rbit	r2, r3
 8001b34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b38:	601a      	str	r2, [r3, #0]
  return result;
 8001b3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b3e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	461a      	mov	r2, r3
 8001b52:	2301      	movs	r3, #1
 8001b54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7fe ff03 	bl	8000960 <HAL_GetTick>
 8001b5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5e:	e009      	b.n	8001b74 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b60:	f7fe fefe 	bl	8000960 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e0fc      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
 8001b74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	fa93 f2a3 	rbit	r2, r3
 8001b88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b8c:	601a      	str	r2, [r3, #0]
  return result;
 8001b8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b94:	fab3 f383 	clz	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xc48>
 8001ba8:	4b01      	ldr	r3, [pc, #4]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	e01e      	b.n	8001bec <HAL_RCC_OscConfig+0xc80>
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	fa93 f2a3 	rbit	r2, r3
 8001be2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_RCC_OscConfig+0xe0c>)
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bf0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bf4:	6011      	str	r1, [r2, #0]
 8001bf6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	fa92 f1a2 	rbit	r1, r2
 8001c00:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c04:	6011      	str	r1, [r2, #0]
  return result;
 8001c06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	fab2 f282 	clz	r2, r2
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	f042 0220 	orr.w	r2, r2, #32
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f002 021f 	and.w	r2, r2, #31
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d09b      	beq.n	8001b60 <HAL_RCC_OscConfig+0xbf4>
 8001c28:	e0a0      	b.n	8001d6c <HAL_RCC_OscConfig+0xe00>
 8001c2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	fa93 f2a3 	rbit	r2, r3
 8001c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c42:	601a      	str	r2, [r3, #0]
  return result;
 8001c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c48:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7fe fe7e 	bl	8000960 <HAL_GetTick>
 8001c64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c68:	e009      	b.n	8001c7e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7fe fe79 	bl	8000960 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e077      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
 8001c7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c96:	601a      	str	r2, [r3, #0]
  return result;
 8001c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	095b      	lsrs	r3, r3, #5
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d102      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xd4c>
 8001cb2:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_RCC_OscConfig+0xe0c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	e01b      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd84>
 8001cb8:	f107 0320 	add.w	r3, r7, #32
 8001cbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f107 0320 	add.w	r3, r7, #32
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fa93 f2a3 	rbit	r2, r3
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	f107 0318 	add.w	r3, r7, #24
 8001cd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	f107 0318 	add.w	r3, r7, #24
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	fa93 f2a3 	rbit	r2, r3
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <HAL_RCC_OscConfig+0xe0c>)
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	f107 0210 	add.w	r2, r7, #16
 8001cf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cf8:	6011      	str	r1, [r2, #0]
 8001cfa:	f107 0210 	add.w	r2, r7, #16
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	fa92 f1a2 	rbit	r1, r2
 8001d04:	f107 020c 	add.w	r2, r7, #12
 8001d08:	6011      	str	r1, [r2, #0]
  return result;
 8001d0a:	f107 020c 	add.w	r2, r7, #12
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	fab2 f282 	clz	r2, r2
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f042 0220 	orr.w	r2, r2, #32
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	f002 021f 	and.w	r2, r2, #31
 8001d20:	2101      	movs	r1, #1
 8001d22:	fa01 f202 	lsl.w	r2, r1, r2
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d19e      	bne.n	8001c6a <HAL_RCC_OscConfig+0xcfe>
 8001d2c:	e01e      	b.n	8001d6c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e018      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_RCC_OscConfig+0xe0c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d44:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d108      	bne.n	8001d68 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000

08001d7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b09e      	sub	sp, #120	; 0x78
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e162      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b90      	ldr	r3, [pc, #576]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d910      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 0207 	bic.w	r2, r3, #7
 8001daa:	498b      	ldr	r1, [pc, #556]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b89      	ldr	r3, [pc, #548]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e14a      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b82      	ldr	r3, [pc, #520]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	497f      	ldr	r1, [pc, #508]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80dc 	beq.w	8001fa8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d13c      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xf6>
 8001df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d102      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xa6>
 8001e1c:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	e00f      	b.n	8001e42 <HAL_RCC_ClockConfig+0xc6>
 8001e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e34:	663b      	str	r3, [r7, #96]	; 0x60
 8001e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e3e:	4b67      	ldr	r3, [pc, #412]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e46:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e4a:	fa92 f2a2 	rbit	r2, r2
 8001e4e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e52:	fab2 f282 	clz	r2, r2
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	f042 0220 	orr.w	r2, r2, #32
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	f002 021f 	and.w	r2, r2, #31
 8001e62:	2101      	movs	r1, #1
 8001e64:	fa01 f202 	lsl.w	r2, r1, r2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d17b      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0f3      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d13c      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x178>
 8001e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d102      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x128>
 8001e9e:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	e00f      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x148>
 8001ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8001eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8001eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ec0:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001eca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ecc:	fa92 f2a2 	rbit	r2, r2
 8001ed0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ed4:	fab2 f282 	clz	r2, r2
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	f042 0220 	orr.w	r2, r2, #32
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	f002 021f 	and.w	r2, r2, #31
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d13a      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0b2      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x1a0>
 8001f16:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	e00d      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1bc>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
 8001f28:	2302      	movs	r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	2202      	movs	r2, #2
 8001f3a:	61ba      	str	r2, [r7, #24]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	fa92 f2a2 	rbit	r2, r2
 8001f42:	617a      	str	r2, [r7, #20]
  return result;
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	fab2 f282 	clz	r2, r2
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f042 0220 	orr.w	r2, r2, #32
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	f002 021f 	and.w	r2, r2, #31
 8001f56:	2101      	movs	r1, #1
 8001f58:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e079      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 0203 	bic.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	491a      	ldr	r1, [pc, #104]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f78:	f7fe fcf2 	bl	8000960 <HAL_GetTick>
 8001f7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f7fe fcee 	bl	8000960 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e061      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 020c 	and.w	r2, r3, #12
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1eb      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d214      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4906      	ldr	r1, [pc, #24]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e040      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	491a      	ldr	r1, [pc, #104]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4912      	ldr	r1, [pc, #72]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800201e:	f000 f829 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002022:	4601      	mov	r1, r0
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800202c:	22f0      	movs	r2, #240	; 0xf0
 800202e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	fa92 f2a2 	rbit	r2, r2
 8002036:	60fa      	str	r2, [r7, #12]
  return result;
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	fab2 f282 	clz	r2, r2
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	40d3      	lsrs	r3, r2
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x2ec>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	fa21 f303 	lsr.w	r3, r1, r3
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_RCC_ClockConfig+0x2f0>)
 800204c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_RCC_ClockConfig+0x2f4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fc40 	bl	80008d8 <HAL_InitTick>
  
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3778      	adds	r7, #120	; 0x78
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	08003924 	.word	0x08003924
 800206c:	20000000 	.word	0x20000000
 8002070:	20000004 	.word	0x20000004

08002074 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b08b      	sub	sp, #44	; 0x2c
 8002078:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800208e:	4b29      	ldr	r3, [pc, #164]	; (8002134 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b04      	cmp	r3, #4
 800209c:	d002      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x30>
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d003      	beq.n	80020aa <HAL_RCC_GetSysClockFreq+0x36>
 80020a2:	e03c      	b.n	800211e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a4:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020a6:	623b      	str	r3, [r7, #32]
      break;
 80020a8:	e03c      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	fa92 f2a2 	rbit	r2, r2
 80020bc:	607a      	str	r2, [r7, #4]
  return result;
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	fab2 f282 	clz	r2, r2
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	40d3      	lsrs	r3, r2
 80020c8:	4a1c      	ldr	r2, [pc, #112]	; (800213c <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	220f      	movs	r2, #15
 80020d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	fa92 f2a2 	rbit	r2, r2
 80020e0:	60fa      	str	r2, [r7, #12]
  return result;
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	fab2 f282 	clz	r2, r2
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	40d3      	lsrs	r3, r2
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020fc:	4a0e      	ldr	r2, [pc, #56]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	fbb2 f2f3 	udiv	r2, r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
 800210c:	e004      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	623b      	str	r3, [r7, #32]
      break;
 800211c:	e002      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002120:	623b      	str	r3, [r7, #32]
      break;
 8002122:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002124:	6a3b      	ldr	r3, [r7, #32]
}
 8002126:	4618      	mov	r0, r3
 8002128:	372c      	adds	r7, #44	; 0x2c
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	007a1200 	.word	0x007a1200
 800213c:	0800393c 	.word	0x0800393c
 8002140:	0800394c 	.word	0x0800394c
 8002144:	003d0900 	.word	0x003d0900

08002148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_RCC_GetHCLKFreq+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000000 	.word	0x20000000

08002160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002166:	f7ff ffef 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 800216a:	4601      	mov	r1, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002174:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002178:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	fa92 f2a2 	rbit	r2, r2
 8002180:	603a      	str	r2, [r7, #0]
  return result;
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	fab2 f282 	clz	r2, r2
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	40d3      	lsrs	r3, r2
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800218e:	5cd3      	ldrb	r3, [r2, r3]
 8002190:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	08003934 	.word	0x08003934

080021a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021aa:	f7ff ffcd 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 80021ae:	4601      	mov	r1, r0
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	fa92 f2a2 	rbit	r2, r2
 80021c4:	603a      	str	r2, [r7, #0]
  return result;
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	fab2 f282 	clz	r2, r2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	40d3      	lsrs	r3, r2
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021d2:	5cd3      	ldrb	r3, [r2, r3]
 80021d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08003934 	.word	0x08003934

080021e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b092      	sub	sp, #72	; 0x48
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 80cd 	beq.w	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220c:	4b86      	ldr	r3, [pc, #536]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10e      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	4b83      	ldr	r3, [pc, #524]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	4a82      	ldr	r2, [pc, #520]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002222:	61d3      	str	r3, [r2, #28]
 8002224:	4b80      	ldr	r3, [pc, #512]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002230:	2301      	movs	r3, #1
 8002232:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002236:	4b7d      	ldr	r3, [pc, #500]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d118      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002242:	4b7a      	ldr	r3, [pc, #488]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a79      	ldr	r2, [pc, #484]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224e:	f7fe fb87 	bl	8000960 <HAL_GetTick>
 8002252:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	e008      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002256:	f7fe fb83 	bl	8000960 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b64      	cmp	r3, #100	; 0x64
 8002262:	d901      	bls.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e0db      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	4b70      	ldr	r3, [pc, #448]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002274:	4b6c      	ldr	r3, [pc, #432]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800227e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d07d      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800228e:	429a      	cmp	r2, r3
 8002290:	d076      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002292:	4b65      	ldr	r3, [pc, #404]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800229a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800229c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	4b5e      	ldr	r3, [pc, #376]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	461a      	mov	r2, r3
 80022bc:	2301      	movs	r3, #1
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	4b55      	ldr	r3, [pc, #340]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	461a      	mov	r2, r3
 80022e0:	2300      	movs	r3, #0
 80022e2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022e4:	4a50      	ldr	r2, [pc, #320]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d045      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7fe fb34 	bl	8000960 <HAL_GetTick>
 80022f8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fa:	e00a      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fc:	f7fe fb30 	bl	8000960 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e086      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002312:	2302      	movs	r3, #2
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
 800231e:	2302      	movs	r3, #2
 8002320:	623b      	str	r3, [r7, #32]
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	61fb      	str	r3, [r7, #28]
  return result;
 800232a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f043 0302 	orr.w	r3, r3, #2
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d102      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002340:	4b39      	ldr	r3, [pc, #228]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	e007      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002346:	2302      	movs	r3, #2
 8002348:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	4b35      	ldr	r3, [pc, #212]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	2202      	movs	r2, #2
 8002358:	613a      	str	r2, [r7, #16]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	fa92 f2a2 	rbit	r2, r2
 8002360:	60fa      	str	r2, [r7, #12]
  return result;
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	fab2 f282 	clz	r2, r2
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	f002 021f 	and.w	r2, r2, #31
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f202 	lsl.w	r2, r1, r2
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0bd      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002380:	4b29      	ldr	r3, [pc, #164]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4926      	ldr	r1, [pc, #152]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800238e:	4313      	orrs	r3, r2
 8002390:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002392:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002396:	2b01      	cmp	r3, #1
 8002398:	d105      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a22      	ldr	r2, [pc, #136]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d008      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	491a      	ldr	r1, [pc, #104]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023d0:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	f023 0210 	bic.w	r2, r3, #16
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4912      	ldr	r1, [pc, #72]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	490b      	ldr	r1, [pc, #44]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	4903      	ldr	r1, [pc, #12]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800241a:	4313      	orrs	r3, r2
 800241c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3748      	adds	r7, #72	; 0x48
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	40007000 	.word	0x40007000
 8002430:	10908100 	.word	0x10908100

08002434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e040      	b.n	80024c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe f93a 	bl	80006d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2224      	movs	r2, #36	; 0x24
 8002460:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fc00 	bl	8002c78 <UART_SetConfig>
 8002478:	4603      	mov	r3, r0
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e022      	b.n	80024c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fd2a 	bl	8002ee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800249e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fdb1 	bl	8003028 <UART_CheckIdleState>
 80024c6:	4603      	mov	r3, r0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d178      	bne.n	80025da <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_UART_Transmit+0x24>
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e071      	b.n	80025dc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2221      	movs	r2, #33	; 0x21
 8002504:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002506:	f7fe fa2b 	bl	8000960 <HAL_GetTick>
 800250a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	88fa      	ldrh	r2, [r7, #6]
 8002510:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002524:	d108      	bne.n	8002538 <HAL_UART_Transmit+0x68>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d104      	bne.n	8002538 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	e003      	b.n	8002540 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002540:	e030      	b.n	80025a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2200      	movs	r2, #0
 800254a:	2180      	movs	r1, #128	; 0x80
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fe13 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e03c      	b.n	80025dc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10b      	bne.n	8002580 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	881a      	ldrh	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002574:	b292      	uxth	r2, r2
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	3302      	adds	r3, #2
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	e008      	b.n	8002592 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b292      	uxth	r2, r2
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	3301      	adds	r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1c8      	bne.n	8002542 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2200      	movs	r2, #0
 80025b8:	2140      	movs	r1, #64	; 0x40
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fddc 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2220      	movs	r2, #32
 80025ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e005      	b.n	80025dc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2220      	movs	r2, #32
 80025d4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e000      	b.n	80025dc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80025da:	2302      	movs	r3, #2
  }
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	4613      	mov	r3, r2
 80025f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	d132      	bne.n	8002662 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_UART_Receive_IT+0x24>
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e02b      	b.n	8002664 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d018      	beq.n	8002652 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	e853 3f00 	ldrex	r3, [r3]
 800262c:	613b      	str	r3, [r7, #16]
   return(result);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	623b      	str	r3, [r7, #32]
 8002640:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002642:	69f9      	ldr	r1, [r7, #28]
 8002644:	6a3a      	ldr	r2, [r7, #32]
 8002646:	e841 2300 	strex	r3, r2, [r1]
 800264a:	61bb      	str	r3, [r7, #24]
   return(result);
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1e6      	bne.n	8002620 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	461a      	mov	r2, r3
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fdf5 	bl	8003248 <UART_Start_Receive_IT>
 800265e:	4603      	mov	r3, r0
 8002660:	e000      	b.n	8002664 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002662:	2302      	movs	r3, #2
  }
}
 8002664:	4618      	mov	r0, r3
 8002666:	3728      	adds	r7, #40	; 0x28
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b0ba      	sub	sp, #232	; 0xe8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002692:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002696:	f640 030f 	movw	r3, #2063	; 0x80f
 800269a:	4013      	ands	r3, r2
 800269c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80026a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d115      	bne.n	80026d4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80026a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00f      	beq.n	80026d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 82ab 	beq.w	8002c20 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
      }
      return;
 80026d2:	e2a5      	b.n	8002c20 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8117 	beq.w	800290c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80026de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80026ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80026ee:	4b85      	ldr	r3, [pc, #532]	; (8002904 <HAL_UART_IRQHandler+0x298>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 810a 	beq.w	800290c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d011      	beq.n	8002728 <HAL_UART_IRQHandler+0xbc>
 8002704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00b      	beq.n	8002728 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2201      	movs	r2, #1
 8002716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d011      	beq.n	8002758 <HAL_UART_IRQHandler+0xec>
 8002734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00b      	beq.n	8002758 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2202      	movs	r2, #2
 8002746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800274e:	f043 0204 	orr.w	r2, r3, #4
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d011      	beq.n	8002788 <HAL_UART_IRQHandler+0x11c>
 8002764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00b      	beq.n	8002788 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2204      	movs	r2, #4
 8002776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800277e:	f043 0202 	orr.w	r2, r3, #2
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d017      	beq.n	80027c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80027a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00b      	beq.n	80027c4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2208      	movs	r2, #8
 80027b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ba:	f043 0208 	orr.w	r2, r3, #8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d012      	beq.n	80027f6 <HAL_UART_IRQHandler+0x18a>
 80027d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00c      	beq.n	80027f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8211 	beq.w	8002c24 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00d      	beq.n	800282a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800280e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002830:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d005      	beq.n	800284e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002846:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800284a:	2b00      	cmp	r3, #0
 800284c:	d04f      	beq.n	80028ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fdc0 	bl	80033d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285e:	2b40      	cmp	r3, #64	; 0x40
 8002860:	d141      	bne.n	80028e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3308      	adds	r3, #8
 8002868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002870:	e853 3f00 	ldrex	r3, [r3]
 8002874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002878:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800287c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002880:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3308      	adds	r3, #8
 800288a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800288e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002892:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002896:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800289a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800289e:	e841 2300 	strex	r3, r2, [r1]
 80028a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1d9      	bne.n	8002862 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d013      	beq.n	80028de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ba:	4a13      	ldr	r2, [pc, #76]	; (8002908 <HAL_UART_IRQHandler+0x29c>)
 80028bc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe f9a2 	bl	8000c0c <HAL_DMA_Abort_IT>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d017      	beq.n	80028fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028d8:	4610      	mov	r0, r2
 80028da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028dc:	e00f      	b.n	80028fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f9b4 	bl	8002c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e4:	e00b      	b.n	80028fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f9b0 	bl	8002c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ec:	e007      	b.n	80028fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f9ac 	bl	8002c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80028fc:	e192      	b.n	8002c24 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028fe:	bf00      	nop
    return;
 8002900:	e190      	b.n	8002c24 <HAL_UART_IRQHandler+0x5b8>
 8002902:	bf00      	nop
 8002904:	04000120 	.word	0x04000120
 8002908:	0800349d 	.word	0x0800349d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002910:	2b01      	cmp	r3, #1
 8002912:	f040 814b 	bne.w	8002bac <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8144 	beq.w	8002bac <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 813d 	beq.w	8002bac <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2210      	movs	r2, #16
 8002938:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	f040 80b5 	bne.w	8002ab4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002956:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 8164 	beq.w	8002c28 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800296a:	429a      	cmp	r2, r3
 800296c:	f080 815c 	bcs.w	8002c28 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002976:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b20      	cmp	r3, #32
 8002982:	f000 8086 	beq.w	8002a92 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002992:	e853 3f00 	ldrex	r3, [r3]
 8002996:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800299a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800299e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029c0:	e841 2300 	strex	r3, r2, [r1]
 80029c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1da      	bne.n	8002986 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3308      	adds	r3, #8
 80029d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029da:	e853 3f00 	ldrex	r3, [r3]
 80029de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3308      	adds	r3, #8
 80029f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a00:	e841 2300 	strex	r3, r2, [r1]
 8002a04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e1      	bne.n	80029d0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3308      	adds	r3, #8
 8002a12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a16:	e853 3f00 	ldrex	r3, [r3]
 8002a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a30:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a38:	e841 2300 	strex	r3, r2, [r1]
 8002a3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e3      	bne.n	8002a0c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a5a:	e853 3f00 	ldrex	r3, [r3]
 8002a5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a62:	f023 0310 	bic.w	r3, r3, #16
 8002a66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a74:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a7c:	e841 2300 	strex	r3, r2, [r1]
 8002a80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e4      	bne.n	8002a52 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe f884 	bl	8000b9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2202      	movs	r2, #2
 8002a96:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f8d7 	bl	8002c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ab2:	e0b9      	b.n	8002c28 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80ab 	beq.w	8002c2c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002ad6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80a6 	beq.w	8002c2c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae8:	e853 3f00 	ldrex	r3, [r3]
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002af4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b02:	647b      	str	r3, [r7, #68]	; 0x44
 8002b04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b0a:	e841 2300 	strex	r3, r2, [r1]
 8002b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1e4      	bne.n	8002ae0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3308      	adds	r3, #8
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	e853 3f00 	ldrex	r3, [r3]
 8002b24:	623b      	str	r3, [r7, #32]
   return(result);
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3308      	adds	r3, #8
 8002b36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b3a:	633a      	str	r2, [r7, #48]	; 0x30
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e3      	bne.n	8002b16 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	e853 3f00 	ldrex	r3, [r3]
 8002b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0310 	bic.w	r3, r3, #16
 8002b76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b88:	69b9      	ldr	r1, [r7, #24]
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	e841 2300 	strex	r3, r2, [r1]
 8002b90:	617b      	str	r3, [r7, #20]
   return(result);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1e4      	bne.n	8002b62 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f85b 	bl	8002c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002baa:	e03f      	b.n	8002c2c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00e      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x56a>
 8002bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fe4c 	bl	800386c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bd4:	e02d      	b.n	8002c32 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00e      	beq.n	8002c00 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d01c      	beq.n	8002c30 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	4798      	blx	r3
    }
    return;
 8002bfe:	e017      	b.n	8002c30 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d012      	beq.n	8002c32 <HAL_UART_IRQHandler+0x5c6>
 8002c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00c      	beq.n	8002c32 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fc55 	bl	80034c8 <UART_EndTransmit_IT>
    return;
 8002c1e:	e008      	b.n	8002c32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c20:	bf00      	nop
 8002c22:	e006      	b.n	8002c32 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002c24:	bf00      	nop
 8002c26:	e004      	b.n	8002c32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c28:	bf00      	nop
 8002c2a:	e002      	b.n	8002c32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c2c:	bf00      	nop
 8002c2e:	e000      	b.n	8002c32 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002c30:	bf00      	nop
  }

}
 8002c32:	37e8      	adds	r7, #232	; 0xe8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4b8a      	ldr	r3, [pc, #552]	; (8002ecc <UART_SetConfig+0x254>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	6979      	ldr	r1, [r7, #20]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a78      	ldr	r2, [pc, #480]	; (8002ed0 <UART_SetConfig+0x258>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d120      	bne.n	8002d36 <UART_SetConfig+0xbe>
 8002cf4:	4b77      	ldr	r3, [pc, #476]	; (8002ed4 <UART_SetConfig+0x25c>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d817      	bhi.n	8002d30 <UART_SetConfig+0xb8>
 8002d00:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <UART_SetConfig+0x90>)
 8002d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d06:	bf00      	nop
 8002d08:	08002d19 	.word	0x08002d19
 8002d0c:	08002d25 	.word	0x08002d25
 8002d10:	08002d2b 	.word	0x08002d2b
 8002d14:	08002d1f 	.word	0x08002d1f
 8002d18:	2300      	movs	r3, #0
 8002d1a:	77fb      	strb	r3, [r7, #31]
 8002d1c:	e01d      	b.n	8002d5a <UART_SetConfig+0xe2>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	77fb      	strb	r3, [r7, #31]
 8002d22:	e01a      	b.n	8002d5a <UART_SetConfig+0xe2>
 8002d24:	2304      	movs	r3, #4
 8002d26:	77fb      	strb	r3, [r7, #31]
 8002d28:	e017      	b.n	8002d5a <UART_SetConfig+0xe2>
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	77fb      	strb	r3, [r7, #31]
 8002d2e:	e014      	b.n	8002d5a <UART_SetConfig+0xe2>
 8002d30:	2310      	movs	r3, #16
 8002d32:	77fb      	strb	r3, [r7, #31]
 8002d34:	e011      	b.n	8002d5a <UART_SetConfig+0xe2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a67      	ldr	r2, [pc, #412]	; (8002ed8 <UART_SetConfig+0x260>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d102      	bne.n	8002d46 <UART_SetConfig+0xce>
 8002d40:	2300      	movs	r3, #0
 8002d42:	77fb      	strb	r3, [r7, #31]
 8002d44:	e009      	b.n	8002d5a <UART_SetConfig+0xe2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a64      	ldr	r2, [pc, #400]	; (8002edc <UART_SetConfig+0x264>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d102      	bne.n	8002d56 <UART_SetConfig+0xde>
 8002d50:	2300      	movs	r3, #0
 8002d52:	77fb      	strb	r3, [r7, #31]
 8002d54:	e001      	b.n	8002d5a <UART_SetConfig+0xe2>
 8002d56:	2310      	movs	r3, #16
 8002d58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d62:	d15a      	bne.n	8002e1a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002d64:	7ffb      	ldrb	r3, [r7, #31]
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d827      	bhi.n	8002dba <UART_SetConfig+0x142>
 8002d6a:	a201      	add	r2, pc, #4	; (adr r2, 8002d70 <UART_SetConfig+0xf8>)
 8002d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d70:	08002d95 	.word	0x08002d95
 8002d74:	08002d9d 	.word	0x08002d9d
 8002d78:	08002da5 	.word	0x08002da5
 8002d7c:	08002dbb 	.word	0x08002dbb
 8002d80:	08002dab 	.word	0x08002dab
 8002d84:	08002dbb 	.word	0x08002dbb
 8002d88:	08002dbb 	.word	0x08002dbb
 8002d8c:	08002dbb 	.word	0x08002dbb
 8002d90:	08002db3 	.word	0x08002db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d94:	f7ff f9e4 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 8002d98:	61b8      	str	r0, [r7, #24]
        break;
 8002d9a:	e013      	b.n	8002dc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d9c:	f7ff fa02 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8002da0:	61b8      	str	r0, [r7, #24]
        break;
 8002da2:	e00f      	b.n	8002dc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002da4:	4b4e      	ldr	r3, [pc, #312]	; (8002ee0 <UART_SetConfig+0x268>)
 8002da6:	61bb      	str	r3, [r7, #24]
        break;
 8002da8:	e00c      	b.n	8002dc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002daa:	f7ff f963 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002dae:	61b8      	str	r0, [r7, #24]
        break;
 8002db0:	e008      	b.n	8002dc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db6:	61bb      	str	r3, [r7, #24]
        break;
 8002db8:	e004      	b.n	8002dc4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	77bb      	strb	r3, [r7, #30]
        break;
 8002dc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d074      	beq.n	8002eb4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	005a      	lsls	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	441a      	add	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	d916      	bls.n	8002e14 <UART_SetConfig+0x19c>
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dec:	d212      	bcs.n	8002e14 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f023 030f 	bic.w	r3, r3, #15
 8002df6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	89fb      	ldrh	r3, [r7, #14]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	89fa      	ldrh	r2, [r7, #14]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	e04f      	b.n	8002eb4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	77bb      	strb	r3, [r7, #30]
 8002e18:	e04c      	b.n	8002eb4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e1a:	7ffb      	ldrb	r3, [r7, #31]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d828      	bhi.n	8002e72 <UART_SetConfig+0x1fa>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <UART_SetConfig+0x1b0>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e4d 	.word	0x08002e4d
 8002e2c:	08002e55 	.word	0x08002e55
 8002e30:	08002e5d 	.word	0x08002e5d
 8002e34:	08002e73 	.word	0x08002e73
 8002e38:	08002e63 	.word	0x08002e63
 8002e3c:	08002e73 	.word	0x08002e73
 8002e40:	08002e73 	.word	0x08002e73
 8002e44:	08002e73 	.word	0x08002e73
 8002e48:	08002e6b 	.word	0x08002e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e4c:	f7ff f988 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 8002e50:	61b8      	str	r0, [r7, #24]
        break;
 8002e52:	e013      	b.n	8002e7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e54:	f7ff f9a6 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8002e58:	61b8      	str	r0, [r7, #24]
        break;
 8002e5a:	e00f      	b.n	8002e7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e5c:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <UART_SetConfig+0x268>)
 8002e5e:	61bb      	str	r3, [r7, #24]
        break;
 8002e60:	e00c      	b.n	8002e7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e62:	f7ff f907 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002e66:	61b8      	str	r0, [r7, #24]
        break;
 8002e68:	e008      	b.n	8002e7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e6e:	61bb      	str	r3, [r7, #24]
        break;
 8002e70:	e004      	b.n	8002e7c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	77bb      	strb	r3, [r7, #30]
        break;
 8002e7a:	bf00      	nop
    }

    if (pclk != 0U)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d018      	beq.n	8002eb4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	085a      	lsrs	r2, r3, #1
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	441a      	add	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b0f      	cmp	r3, #15
 8002e9a:	d909      	bls.n	8002eb0 <UART_SetConfig+0x238>
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea2:	d205      	bcs.n	8002eb0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	e001      	b.n	8002eb4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ec0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3720      	adds	r7, #32
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	efff69f3 	.word	0xefff69f3
 8002ed0:	40013800 	.word	0x40013800
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40004400 	.word	0x40004400
 8002edc:	40004800 	.word	0x40004800
 8002ee0:	007a1200 	.word	0x007a1200

08002ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01a      	beq.n	8002ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fe2:	d10a      	bne.n	8002ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
  }
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b098      	sub	sp, #96	; 0x60
 800302c:	af02      	add	r7, sp, #8
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003038:	f7fd fc92 	bl	8000960 <HAL_GetTick>
 800303c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b08      	cmp	r3, #8
 800304a:	d12e      	bne.n	80030aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800304c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003054:	2200      	movs	r2, #0
 8003056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f88c 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d021      	beq.n	80030aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	e853 3f00 	ldrex	r3, [r3]
 8003072:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800307a:	653b      	str	r3, [r7, #80]	; 0x50
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003084:	647b      	str	r3, [r7, #68]	; 0x44
 8003086:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003088:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800308a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800308c:	e841 2300 	strex	r3, r2, [r1]
 8003090:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e6      	bne.n	8003066 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e062      	b.n	8003170 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d149      	bne.n	800314c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c0:	2200      	movs	r2, #0
 80030c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f856 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d03c      	beq.n	800314c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	623b      	str	r3, [r7, #32]
   return(result);
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
 80030f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e6      	bne.n	80030d2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3308      	adds	r3, #8
 800310a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	e853 3f00 	ldrex	r3, [r3]
 8003112:	60fb      	str	r3, [r7, #12]
   return(result);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	64bb      	str	r3, [r7, #72]	; 0x48
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3308      	adds	r3, #8
 8003122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003124:	61fa      	str	r2, [r7, #28]
 8003126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003128:	69b9      	ldr	r1, [r7, #24]
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	e841 2300 	strex	r3, r2, [r1]
 8003130:	617b      	str	r3, [r7, #20]
   return(result);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e5      	bne.n	8003104 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e011      	b.n	8003170 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3758      	adds	r7, #88	; 0x58
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003188:	e049      	b.n	800321e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d045      	beq.n	800321e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7fd fbe5 	bl	8000960 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e048      	b.n	800323e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d031      	beq.n	800321e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d110      	bne.n	80031ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2208      	movs	r2, #8
 80031ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f8ff 	bl	80033d4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2208      	movs	r2, #8
 80031da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e029      	b.n	800323e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f8:	d111      	bne.n	800321e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003202:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f8e5 	bl	80033d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e00f      	b.n	800323e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4013      	ands	r3, r2
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	429a      	cmp	r2, r3
 800322c:	bf0c      	ite	eq
 800322e:	2301      	moveq	r3, #1
 8003230:	2300      	movne	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	429a      	cmp	r2, r3
 800323a:	d0a6      	beq.n	800318a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003248:	b480      	push	{r7}
 800324a:	b097      	sub	sp, #92	; 0x5c
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	4613      	mov	r3, r2
 8003254:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	88fa      	ldrh	r2, [r7, #6]
 8003260:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	88fa      	ldrh	r2, [r7, #6]
 8003268:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327a:	d10e      	bne.n	800329a <UART_Start_Receive_IT+0x52>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <UART_Start_Receive_IT+0x48>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f240 12ff 	movw	r2, #511	; 0x1ff
 800328a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800328e:	e02d      	b.n	80032ec <UART_Start_Receive_IT+0xa4>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	22ff      	movs	r2, #255	; 0xff
 8003294:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003298:	e028      	b.n	80032ec <UART_Start_Receive_IT+0xa4>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10d      	bne.n	80032be <UART_Start_Receive_IT+0x76>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d104      	bne.n	80032b4 <UART_Start_Receive_IT+0x6c>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	22ff      	movs	r2, #255	; 0xff
 80032ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032b2:	e01b      	b.n	80032ec <UART_Start_Receive_IT+0xa4>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	227f      	movs	r2, #127	; 0x7f
 80032b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032bc:	e016      	b.n	80032ec <UART_Start_Receive_IT+0xa4>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032c6:	d10d      	bne.n	80032e4 <UART_Start_Receive_IT+0x9c>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d104      	bne.n	80032da <UART_Start_Receive_IT+0x92>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	227f      	movs	r2, #127	; 0x7f
 80032d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032d8:	e008      	b.n	80032ec <UART_Start_Receive_IT+0xa4>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	223f      	movs	r2, #63	; 0x3f
 80032de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032e2:	e003      	b.n	80032ec <UART_Start_Receive_IT+0xa4>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2222      	movs	r2, #34	; 0x22
 80032f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3308      	adds	r3, #8
 8003302:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003306:	e853 3f00 	ldrex	r3, [r3]
 800330a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	657b      	str	r3, [r7, #84]	; 0x54
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3308      	adds	r3, #8
 800331a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800331c:	64ba      	str	r2, [r7, #72]	; 0x48
 800331e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800332a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e5      	bne.n	80032fc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003338:	d107      	bne.n	800334a <UART_Start_Receive_IT+0x102>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a21      	ldr	r2, [pc, #132]	; (80033cc <UART_Start_Receive_IT+0x184>)
 8003346:	669a      	str	r2, [r3, #104]	; 0x68
 8003348:	e002      	b.n	8003350 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4a20      	ldr	r2, [pc, #128]	; (80033d0 <UART_Start_Receive_IT+0x188>)
 800334e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d019      	beq.n	800338c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	e853 3f00 	ldrex	r3, [r3]
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800336c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
 8003378:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800337c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e6      	bne.n	8003358 <UART_Start_Receive_IT+0x110>
 800338a:	e018      	b.n	80033be <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	613b      	str	r3, [r7, #16]
   return(result);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f043 0320 	orr.w	r3, r3, #32
 80033a0:	653b      	str	r3, [r7, #80]	; 0x50
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033aa:	623b      	str	r3, [r7, #32]
 80033ac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	69f9      	ldr	r1, [r7, #28]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1e6      	bne.n	800338c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	375c      	adds	r7, #92	; 0x5c
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	080036c5 	.word	0x080036c5
 80033d0:	0800351d 	.word	0x0800351d

080033d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b095      	sub	sp, #84	; 0x54
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e4:	e853 3f00 	ldrex	r3, [r3]
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fa:	643b      	str	r3, [r7, #64]	; 0x40
 80033fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003400:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1e6      	bne.n	80033dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3308      	adds	r3, #8
 8003414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	e853 3f00 	ldrex	r3, [r3]
 800341c:	61fb      	str	r3, [r7, #28]
   return(result);
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	64bb      	str	r3, [r7, #72]	; 0x48
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3308      	adds	r3, #8
 800342c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800342e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003436:	e841 2300 	strex	r3, r2, [r1]
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1e5      	bne.n	800340e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003446:	2b01      	cmp	r3, #1
 8003448:	d118      	bne.n	800347c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	e853 3f00 	ldrex	r3, [r3]
 8003456:	60bb      	str	r3, [r7, #8]
   return(result);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f023 0310 	bic.w	r3, r3, #16
 800345e:	647b      	str	r3, [r7, #68]	; 0x44
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346c:	6979      	ldr	r1, [r7, #20]
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	e841 2300 	strex	r3, r2, [r1]
 8003474:	613b      	str	r3, [r7, #16]
   return(result);
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e6      	bne.n	800344a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003490:	bf00      	nop
 8003492:	3754      	adds	r7, #84	; 0x54
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff fbc6 	bl	8002c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	61bb      	str	r3, [r7, #24]
 80034f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f2:	6979      	ldr	r1, [r7, #20]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	e841 2300 	strex	r3, r2, [r1]
 80034fa:	613b      	str	r3, [r7, #16]
   return(result);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1e6      	bne.n	80034d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff fb92 	bl	8002c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003514:	bf00      	nop
 8003516:	3720      	adds	r7, #32
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b09c      	sub	sp, #112	; 0x70
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800352a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003534:	2b22      	cmp	r3, #34	; 0x22
 8003536:	f040 80b9 	bne.w	80036ac <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003540:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003544:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003548:	b2d9      	uxtb	r1, r3
 800354a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800354e:	b2da      	uxtb	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	400a      	ands	r2, r1
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	f040 809c 	bne.w	80036bc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003594:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003598:	66bb      	str	r3, [r7, #104]	; 0x68
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80035a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035aa:	e841 2300 	strex	r3, r2, [r1]
 80035ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1e6      	bne.n	8003584 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3308      	adds	r3, #8
 80035bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	e853 3f00 	ldrex	r3, [r3]
 80035c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	667b      	str	r3, [r7, #100]	; 0x64
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3308      	adds	r3, #8
 80035d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80035d6:	647a      	str	r2, [r7, #68]	; 0x44
 80035d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035de:	e841 2300 	strex	r3, r2, [r1]
 80035e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e5      	bne.n	80035b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d018      	beq.n	800363e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	623b      	str	r3, [r7, #32]
   return(result);
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003620:	663b      	str	r3, [r7, #96]	; 0x60
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800362a:	633b      	str	r3, [r7, #48]	; 0x30
 800362c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e6      	bne.n	800360c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003642:	2b01      	cmp	r3, #1
 8003644:	d12e      	bne.n	80036a4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	60fb      	str	r3, [r7, #12]
   return(result);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f023 0310 	bic.w	r3, r3, #16
 8003660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	69b9      	ldr	r1, [r7, #24]
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	617b      	str	r3, [r7, #20]
   return(result);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e6      	bne.n	800364c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b10      	cmp	r3, #16
 800368a:	d103      	bne.n	8003694 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2210      	movs	r2, #16
 8003692:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800369a:	4619      	mov	r1, r3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff fadf 	bl	8002c60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036a2:	e00b      	b.n	80036bc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7fc ffc9 	bl	800063c <HAL_UART_RxCpltCallback>
}
 80036aa:	e007      	b.n	80036bc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0208 	orr.w	r2, r2, #8
 80036ba:	619a      	str	r2, [r3, #24]
}
 80036bc:	bf00      	nop
 80036be:	3770      	adds	r7, #112	; 0x70
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b09c      	sub	sp, #112	; 0x70
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036d2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036dc:	2b22      	cmp	r3, #34	; 0x22
 80036de:	f040 80b9 	bne.w	8003854 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80036f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80036f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80036fa:	4013      	ands	r3, r2
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003700:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	1c9a      	adds	r2, r3, #2
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	f040 809c 	bne.w	8003864 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800373a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003740:	667b      	str	r3, [r7, #100]	; 0x64
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800374a:	657b      	str	r3, [r7, #84]	; 0x54
 800374c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003750:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e6      	bne.n	800372c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3308      	adds	r3, #8
 8003764:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	f023 0301 	bic.w	r3, r3, #1
 8003774:	663b      	str	r3, [r7, #96]	; 0x60
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3308      	adds	r3, #8
 800377c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800377e:	643a      	str	r2, [r7, #64]	; 0x40
 8003780:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003786:	e841 2300 	strex	r3, r2, [r1]
 800378a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800378c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e5      	bne.n	800375e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d018      	beq.n	80037e6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e6      	bne.n	80037b4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d12e      	bne.n	800384c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	60bb      	str	r3, [r7, #8]
   return(result);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f023 0310 	bic.w	r3, r3, #16
 8003808:	65bb      	str	r3, [r7, #88]	; 0x58
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	6979      	ldr	r1, [r7, #20]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	613b      	str	r3, [r7, #16]
   return(result);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e6      	bne.n	80037f4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b10      	cmp	r3, #16
 8003832:	d103      	bne.n	800383c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2210      	movs	r2, #16
 800383a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003842:	4619      	mov	r1, r3
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fa0b 	bl	8002c60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800384a:	e00b      	b.n	8003864 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7fc fef5 	bl	800063c <HAL_UART_RxCpltCallback>
}
 8003852:	e007      	b.n	8003864 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0208 	orr.w	r2, r2, #8
 8003862:	619a      	str	r2, [r3, #24]
}
 8003864:	bf00      	nop
 8003866:	3770      	adds	r7, #112	; 0x70
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <__libc_init_array>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	4d0d      	ldr	r5, [pc, #52]	; (80038b8 <__libc_init_array+0x38>)
 8003884:	4c0d      	ldr	r4, [pc, #52]	; (80038bc <__libc_init_array+0x3c>)
 8003886:	1b64      	subs	r4, r4, r5
 8003888:	10a4      	asrs	r4, r4, #2
 800388a:	2600      	movs	r6, #0
 800388c:	42a6      	cmp	r6, r4
 800388e:	d109      	bne.n	80038a4 <__libc_init_array+0x24>
 8003890:	4d0b      	ldr	r5, [pc, #44]	; (80038c0 <__libc_init_array+0x40>)
 8003892:	4c0c      	ldr	r4, [pc, #48]	; (80038c4 <__libc_init_array+0x44>)
 8003894:	f000 f820 	bl	80038d8 <_init>
 8003898:	1b64      	subs	r4, r4, r5
 800389a:	10a4      	asrs	r4, r4, #2
 800389c:	2600      	movs	r6, #0
 800389e:	42a6      	cmp	r6, r4
 80038a0:	d105      	bne.n	80038ae <__libc_init_array+0x2e>
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a8:	4798      	blx	r3
 80038aa:	3601      	adds	r6, #1
 80038ac:	e7ee      	b.n	800388c <__libc_init_array+0xc>
 80038ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b2:	4798      	blx	r3
 80038b4:	3601      	adds	r6, #1
 80038b6:	e7f2      	b.n	800389e <__libc_init_array+0x1e>
 80038b8:	0800395c 	.word	0x0800395c
 80038bc:	0800395c 	.word	0x0800395c
 80038c0:	0800395c 	.word	0x0800395c
 80038c4:	08003960 	.word	0x08003960

080038c8 <memset>:
 80038c8:	4402      	add	r2, r0
 80038ca:	4603      	mov	r3, r0
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d100      	bne.n	80038d2 <memset+0xa>
 80038d0:	4770      	bx	lr
 80038d2:	f803 1b01 	strb.w	r1, [r3], #1
 80038d6:	e7f9      	b.n	80038cc <memset+0x4>

080038d8 <_init>:
 80038d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038da:	bf00      	nop
 80038dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038de:	bc08      	pop	{r3}
 80038e0:	469e      	mov	lr, r3
 80038e2:	4770      	bx	lr

080038e4 <_fini>:
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	bf00      	nop
 80038e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ea:	bc08      	pop	{r3}
 80038ec:	469e      	mov	lr, r3
 80038ee:	4770      	bx	lr
