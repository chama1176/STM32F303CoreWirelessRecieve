
STM32F303CoreWirelessRecieve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003a7c  08003a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003af0  08003af0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003af0  08003af0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003af0  08003af0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003af0  08003af0  00013af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af8  08003af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000000c  08003b08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003b08  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b268  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bab  00000000  00000000  0002b2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002ce50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002d600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b823  00000000  00000000  0002dd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4e4  00000000  00000000  00049553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097946  00000000  00000000  00053a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb37d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e20  00000000  00000000  000eb3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a64 	.word	0x08003a64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003a64 	.word	0x08003a64

080001c8 <_ZN11UsartBufferC1Ev>:
	uint32_t rp_;
	uint32_t wp_;
	uint32_t nl_count_;

public:
  UsartBuffer()
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  : rp_(0)
  , wp_(0)
  , nl_count_(0)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4618      	mov	r0, r3
 80001d4:	2380      	movs	r3, #128	; 0x80
 80001d6:	461a      	mov	r2, r3
 80001d8:	2100      	movs	r1, #0
 80001da:	f003 fc3b 	bl	8003a54 <memset>
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2200      	movs	r2, #0
 80001e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2200      	movs	r2, #0
 80001ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  {
  }
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4618      	mov	r0, r3
 80001fa:	3708      	adds	r7, #8
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <_ZN11UsartBuffer7enqueueEh>:
  bool enqueue(unsigned char data){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	460b      	mov	r3, r1
 800020a:	70fb      	strb	r3, [r7, #3]
	  if(((wp_ - rp_) & (BUFFER_SIZE-1)) == (BUFFER_SIZE-1)){
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000218:	1ad3      	subs	r3, r2, r3
 800021a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800021e:	2b7f      	cmp	r3, #127	; 0x7f
 8000220:	d101      	bne.n	8000226 <_ZN11UsartBuffer7enqueueEh+0x26>
		  return false;
 8000222:	2300      	movs	r3, #0
 8000224:	e013      	b.n	800024e <_ZN11UsartBuffer7enqueueEh+0x4e>
	  }
	  if(data == NL_CODE){
 8000226:	78fb      	ldrb	r3, [r7, #3]
 8000228:	2b0d      	cmp	r3, #13
 800022a:	d106      	bne.n	800023a <_ZN11UsartBuffer7enqueueEh+0x3a>
		  ++nl_count_;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000232:	1c5a      	adds	r2, r3, #1
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  }
	  buffer_[wp_] = data;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	78f9      	ldrb	r1, [r7, #3]
 8000244:	54d1      	strb	r1, [r2, r3]
	  inc_wp();
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f000 f805 	bl	8000256 <_ZN11UsartBuffer6inc_wpEv>
	  return true;
 800024c:	2301      	movs	r3, #1
  }
 800024e:	4618      	mov	r0, r3
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}

08000256 <_ZN11UsartBuffer6inc_wpEv>:
  void inc_wp(){
 8000256:	b480      	push	{r7}
 8000258:	b083      	sub	sp, #12
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
	  wp_ = (++wp_) & (BUFFER_SIZE-1);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000264:	1c5a      	adds	r2, r3, #1
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
 800027c:	bf00      	nop
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr

08000288 <_ZN11UsartBuffer6inc_rpEv>:
  void inc_rp(){
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	  rp_ = (++rp_) & (BUFFER_SIZE-1);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000296:	1c5a      	adds	r2, r3, #1
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr

080002ba <_ZN11UsartBuffer7dequeueERh>:
  bool dequeue(unsigned char & data){
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b082      	sub	sp, #8
 80002be:	af00      	add	r7, sp, #0
 80002c0:	6078      	str	r0, [r7, #4]
 80002c2:	6039      	str	r1, [r7, #0]
	  if(rp_ == wp_){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d101      	bne.n	80002d8 <_ZN11UsartBuffer7dequeueERh+0x1e>
		  return false;
 80002d4:	2300      	movs	r3, #0
 80002d6:	e018      	b.n	800030a <_ZN11UsartBuffer7dequeueERh+0x50>
	  }
	  if(buffer_[rp_] == NL_CODE){
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	5cd3      	ldrb	r3, [r2, r3]
 80002e2:	2b0d      	cmp	r3, #13
 80002e4:	d106      	bne.n	80002f4 <_ZN11UsartBuffer7dequeueERh+0x3a>
		  --nl_count_;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ec:	1e5a      	subs	r2, r3, #1
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  }
	  data = buffer_[rp_];
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	5cd2      	ldrb	r2, [r2, r3]
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	701a      	strb	r2, [r3, #0]
	  inc_rp();
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f7ff ffc0 	bl	8000288 <_ZN11UsartBuffer6inc_rpEv>
	  return true;
 8000308:	2301      	movs	r3, #1
  }
 800030a:	4618      	mov	r0, r3
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}

08000312 <_ZN11UsartBuffer8get_lineEPcm>:
  uint32_t get_line(char* buff, uint32_t len){
 8000312:	b580      	push	{r7, lr}
 8000314:	b086      	sub	sp, #24
 8000316:	af00      	add	r7, sp, #0
 8000318:	60f8      	str	r0, [r7, #12]
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	607a      	str	r2, [r7, #4]
	  uint32_t i = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]
	  while(1){
		  if(i == len) break;
 8000322:	697a      	ldr	r2, [r7, #20]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	429a      	cmp	r2, r3
 8000328:	d01b      	beq.n	8000362 <_ZN11UsartBuffer8get_lineEPcm+0x50>
		  uint8_t data = ' ';
 800032a:	2320      	movs	r3, #32
 800032c:	74bb      	strb	r3, [r7, #18]
		  bool res = dequeue(data);
 800032e:	f107 0312 	add.w	r3, r7, #18
 8000332:	4619      	mov	r1, r3
 8000334:	68f8      	ldr	r0, [r7, #12]
 8000336:	f7ff ffc0 	bl	80002ba <_ZN11UsartBuffer7dequeueERh>
 800033a:	4603      	mov	r3, r0
 800033c:	74fb      	strb	r3, [r7, #19]
		  if(!res) break;
 800033e:	7cfb      	ldrb	r3, [r7, #19]
 8000340:	f083 0301 	eor.w	r3, r3, #1
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b00      	cmp	r3, #0
 8000348:	d10d      	bne.n	8000366 <_ZN11UsartBuffer8get_lineEPcm+0x54>
		  else buff[i] = data;
 800034a:	68ba      	ldr	r2, [r7, #8]
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	4413      	add	r3, r2
 8000350:	7cba      	ldrb	r2, [r7, #18]
 8000352:	701a      	strb	r2, [r3, #0]
		  ++i;
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	3301      	adds	r3, #1
 8000358:	617b      	str	r3, [r7, #20]
		  if(data == NL_CODE) break;
 800035a:	7cbb      	ldrb	r3, [r7, #18]
 800035c:	2b0d      	cmp	r3, #13
 800035e:	d004      	beq.n	800036a <_ZN11UsartBuffer8get_lineEPcm+0x58>
	  }
 8000360:	e7df      	b.n	8000322 <_ZN11UsartBuffer8get_lineEPcm+0x10>
		  if(i == len) break;
 8000362:	bf00      	nop
 8000364:	e002      	b.n	800036c <_ZN11UsartBuffer8get_lineEPcm+0x5a>
		  if(!res) break;
 8000366:	bf00      	nop
 8000368:	e000      	b.n	800036c <_ZN11UsartBuffer8get_lineEPcm+0x5a>
		  if(data == NL_CODE) break;
 800036a:	bf00      	nop
	  return i;
 800036c:	697b      	ldr	r3, [r7, #20]
  }
 800036e:	4618      	mov	r0, r3
 8000370:	3718      	adds	r7, #24
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <_ZN11UsartBuffer8nl_countEv>:
  uint32_t nl_count(){
 8000376:	b480      	push	{r7}
 8000378:	b083      	sub	sp, #12
 800037a:	af00      	add	r7, sp, #0
 800037c:	6078      	str	r0, [r7, #4]
	  return nl_count_;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  }
 8000384:	4618      	mov	r0, r3
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <_ZN21CoreWirelessControlRxC1EP11UsartBuffer>:
	int16_t axis_[5] = {};
	bool buttons_[8] = {};
	char test_;

public:
  CoreWirelessControlRx(UsartBuffer * usart)
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3304      	adds	r3, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	811a      	strh	r2, [r3, #8]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	330e      	adds	r3, #14
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
	  usart_ = usart;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	683a      	ldr	r2, [r7, #0]
 80003b4:	601a      	str	r2, [r3, #0]
  }
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4618      	mov	r0, r3
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr

080003c4 <_ZN21CoreWirelessControlRx5parseEv>:
  bool parse(){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08e      	sub	sp, #56	; 0x38
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]

    // parse when buffer has new line code
    if(usart_->nl_count() <= 0){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ffd0 	bl	8000376 <_ZN11UsartBuffer8nl_countEv>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	bf0c      	ite	eq
 80003dc:	2301      	moveq	r3, #1
 80003de:	2300      	movne	r3, #0
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <_ZN21CoreWirelessControlRx5parseEv+0x26>
    	return false;
 80003e6:	2300      	movs	r3, #0
 80003e8:	e042      	b.n	8000470 <_ZN21CoreWirelessControlRx5parseEv+0xac>
    }
    char data[40] = {};
 80003ea:	2300      	movs	r3, #0
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	f107 030c 	add.w	r3, r7, #12
 80003f2:	2224      	movs	r2, #36	; 0x24
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f003 fb2c 	bl	8003a54 <memset>
    uint32_t len = usart_->get_line(data, 40);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f107 0108 	add.w	r1, r7, #8
 8000404:	2228      	movs	r2, #40	; 0x28
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff83 	bl	8000312 <_ZN11UsartBuffer8get_lineEPcm>
 800040c:	6338      	str	r0, [r7, #48]	; 0x30
    if(len < 35){
 800040e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000410:	2b22      	cmp	r3, #34	; 0x22
 8000412:	d801      	bhi.n	8000418 <_ZN21CoreWirelessControlRx5parseEv+0x54>
     return false;
 8000414:	2300      	movs	r3, #0
 8000416:	e02b      	b.n	8000470 <_ZN21CoreWirelessControlRx5parseEv+0xac>
    }
    uint32_t idx = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	637b      	str	r3, [r7, #52]	; 0x34
    while(1){
	  if(len < idx + 35){
 800041c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800041e:	3323      	adds	r3, #35	; 0x23
 8000420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000422:	429a      	cmp	r2, r3
 8000424:	d201      	bcs.n	800042a <_ZN21CoreWirelessControlRx5parseEv+0x66>
		 return false;
 8000426:	2300      	movs	r3, #0
 8000428:	e022      	b.n	8000470 <_ZN21CoreWirelessControlRx5parseEv+0xac>
	  }
	  if(data[idx] == '0' && data[idx+1] == '0' && data[idx+34] == '\r') {
 800042a:	f107 0208 	add.w	r2, r7, #8
 800042e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000430:	4413      	add	r3, r2
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b30      	cmp	r3, #48	; 0x30
 8000436:	d116      	bne.n	8000466 <_ZN21CoreWirelessControlRx5parseEv+0xa2>
 8000438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800043a:	3301      	adds	r3, #1
 800043c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000440:	4413      	add	r3, r2
 8000442:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000446:	2b30      	cmp	r3, #48	; 0x30
 8000448:	d10d      	bne.n	8000466 <_ZN21CoreWirelessControlRx5parseEv+0xa2>
 800044a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800044c:	3322      	adds	r3, #34	; 0x22
 800044e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000452:	4413      	add	r3, r2
 8000454:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000458:	2b0d      	cmp	r3, #13
 800045a:	d104      	bne.n	8000466 <_ZN21CoreWirelessControlRx5parseEv+0xa2>
        test_ = 'k';
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	226b      	movs	r2, #107	; 0x6b
 8000460:	759a      	strb	r2, [r3, #22]
	    return true;
 8000462:	2301      	movs	r3, #1
 8000464:	e004      	b.n	8000470 <_ZN21CoreWirelessControlRx5parseEv+0xac>
	  } else{
		++idx;
 8000466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000468:	3301      	adds	r3, #1
 800046a:	637b      	str	r3, [r7, #52]	; 0x34
		continue;
 800046c:	bf00      	nop
	  if(len < idx + 35){
 800046e:	e7d5      	b.n	800041c <_ZN21CoreWirelessControlRx5parseEv+0x58>
	  }
	}
	return true;
  }
 8000470:	4618      	mov	r0, r3
 8000472:	3738      	adds	r7, #56	; 0x38
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <_ZN21CoreWirelessControlRx4testEv>:
  uint8_t test(){
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	  char tmp = test_;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	7d9b      	ldrb	r3, [r3, #22]
 8000484:	73fb      	strb	r3, [r7, #15]
	  test_ = '\r';
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	220d      	movs	r2, #13
 800048a:	759a      	strb	r2, [r3, #22]
	  return tmp;
 800048c:	7bfb      	ldrb	r3, [r7, #15]
  }
 800048e:	4618      	mov	r0, r3
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b5b0      	push	{r4, r5, r7, lr}
 800049e:	b092      	sub	sp, #72	; 0x48
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fac9 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f867 	bl	8000578 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f92f 	bl	800070c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80004ae:	f000 f8f9 	bl	80006a4 <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 80004b2:	f000 f8c3 	bl	800063c <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  CoreWirelessControlRx cwcr(&ub);
 80004b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004ba:	492a      	ldr	r1, [pc, #168]	; (8000564 <main+0xc8>)
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff ff67 	bl	8000390 <_ZN21CoreWirelessControlRxC1EP11UsartBuffer>
  HAL_UART_Receive_IT(&huart1, &rxed_byte_data, 1);
 80004c2:	2201      	movs	r2, #1
 80004c4:	4928      	ldr	r1, [pc, #160]	; (8000568 <main+0xcc>)
 80004c6:	4829      	ldr	r0, [pc, #164]	; (800056c <main+0xd0>)
 80004c8:	f002 f952 	bl	8002770 <HAL_UART_Receive_IT>
  uint32_t  last_processed_time = HAL_GetTick();
 80004cc:	f000 fb0e 	bl	8000aec <HAL_GetTick>
 80004d0:	6478      	str	r0, [r7, #68]	; 0x44
  while (1)
  {
	  if(cwcr.parse() == true){
 80004d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ff74 	bl	80003c4 <_ZN21CoreWirelessControlRx5parseEv>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b01      	cmp	r3, #1
 80004e0:	bf0c      	ite	eq
 80004e2:	2301      	moveq	r3, #1
 80004e4:	2300      	movne	r3, #0
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d018      	beq.n	800051e <main+0x82>
		  	  uint8_t a = cwcr.test();
 80004ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ffc1 	bl	8000478 <_ZN21CoreWirelessControlRx4testEv>
 80004f6:	4603      	mov	r3, r0
 80004f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		  	  HAL_UART_Transmit(&huart2, &a, sizeof(a), 10);
 80004fc:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8000500:	230a      	movs	r3, #10
 8000502:	2201      	movs	r2, #1
 8000504:	481a      	ldr	r0, [pc, #104]	; (8000570 <main+0xd4>)
 8000506:	f002 f8a9 	bl	800265c <HAL_UART_Transmit>
		  	  uint8_t t = '!';
 800050a:	2321      	movs	r3, #33	; 0x21
 800050c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		  	  HAL_UART_Transmit(&huart2, &t, sizeof(t), 10);
 8000510:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8000514:	230a      	movs	r3, #10
 8000516:	2201      	movs	r2, #1
 8000518:	4815      	ldr	r0, [pc, #84]	; (8000570 <main+0xd4>)
 800051a:	f002 f89f 	bl	800265c <HAL_UART_Transmit>
//	  }else{
//		  const uint8_t tx_empty[] = "empty\r\n";
//		  HAL_UART_Transmit(&huart2, tx_empty, sizeof(tx_empty), 10);
//	  }

	  if(HAL_GetTick() - last_processed_time > 500){
 800051e:	f000 fae5 	bl	8000aec <HAL_GetTick>
 8000522:	4602      	mov	r2, r0
 8000524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800052c:	bf8c      	ite	hi
 800052e:	2301      	movhi	r3, #1
 8000530:	2300      	movls	r3, #0
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0cc      	beq.n	80004d2 <main+0x36>
		  const uint8_t tx_data[] = "00,0401,CD:01,90,7F,91,89,00,00,00\r\n";
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <main+0xd8>)
 800053a:	1d3c      	adds	r4, r7, #4
 800053c:	461d      	mov	r5, r3
 800053e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	e895 0003 	ldmia.w	r5, {r0, r1}
 800054a:	6020      	str	r0, [r4, #0]
 800054c:	3404      	adds	r4, #4
 800054e:	7021      	strb	r1, [r4, #0]
		  HAL_UART_Transmit(&huart1, tx_data, sizeof(tx_data), 10);
 8000550:	1d39      	adds	r1, r7, #4
 8000552:	230a      	movs	r3, #10
 8000554:	2225      	movs	r2, #37	; 0x25
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <main+0xd0>)
 8000558:	f002 f880 	bl	800265c <HAL_UART_Transmit>
		  last_processed_time = HAL_GetTick();
 800055c:	f000 fac6 	bl	8000aec <HAL_GetTick>
 8000560:	6478      	str	r0, [r7, #68]	; 0x44
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000562:	e7b6      	b.n	80004d2 <main+0x36>
 8000564:	2000013c 	.word	0x2000013c
 8000568:	20000138 	.word	0x20000138
 800056c:	20000028 	.word	0x20000028
 8000570:	200000b0 	.word	0x200000b0
 8000574:	08003a7c 	.word	0x08003a7c

08000578 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b096      	sub	sp, #88	; 0x58
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000582:	2228      	movs	r2, #40	; 0x28
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fa64 	bl	8003a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 031c 	add.w	r3, r7, #28
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]
 80005aa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2310      	movs	r3, #16
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fd99 	bl	80010f8 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	bf14      	ite	ne
 80005cc:	2301      	movne	r3, #1
 80005ce:	2300      	moveq	r3, #0
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80005d6:	f000 f8f9 	bl	80007cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005de:	2300      	movs	r3, #0
 80005e0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fc87 	bl	8001f08 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf14      	ite	ne
 8000600:	2301      	movne	r3, #1
 8000602:	2300      	moveq	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800060a:	f000 f8df 	bl	80007cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800060e:	2301      	movs	r3, #1
 8000610:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4618      	mov	r0, r3
 800061a:	f001 feab 	bl	8002374 <HAL_RCCEx_PeriphCLKConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	bf14      	ite	ne
 8000624:	2301      	movne	r3, #1
 8000626:	2300      	moveq	r3, #0
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800062e:	f000 f8cd 	bl	80007cc <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3758      	adds	r7, #88	; 0x58
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000642:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <_ZL19MX_USART1_UART_Initv+0x60>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <_ZL19MX_USART1_UART_Initv+0x60>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <_ZL19MX_USART1_UART_Initv+0x60>)
 800067a:	2200      	movs	r2, #0
 800067c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800067e:	4807      	ldr	r0, [pc, #28]	; (800069c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000680:	f001 ff9e 	bl	80025c0 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	bf14      	ite	ne
 800068a:	2301      	movne	r3, #1
 800068c:	2300      	moveq	r3, #0
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8000694:	f000 f89a 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000028 	.word	0x20000028
 80006a0:	40013800 	.word	0x40013800

080006a4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006aa:	4a17      	ldr	r2, [pc, #92]	; (8000708 <_ZL19MX_USART2_UART_Initv+0x64>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006e8:	f001 ff6a 	bl	80025c0 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	bf14      	ite	ne
 80006f2:	2301      	movne	r3, #1
 80006f4:	2300      	moveq	r3, #0
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80006fc:	f000 f866 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000b0 	.word	0x200000b0
 8000708:	40004400 	.word	0x40004400

0800070c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <_ZL12MX_GPIO_Initv+0x44>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <_ZL12MX_GPIO_Initv+0x44>)
 8000718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <_ZL12MX_GPIO_Initv+0x44>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <_ZL12MX_GPIO_Initv+0x44>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <_ZL12MX_GPIO_Initv+0x44>)
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <_ZL12MX_GPIO_Initv+0x44>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_UART_RxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000754:	b5b0      	push	{r4, r5, r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <HAL_UART_RxCpltCallback+0x60>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d121      	bne.n	80007aa <HAL_UART_RxCpltCallback+0x56>
  {
	  bool res = ub.enqueue(rxed_byte_data);
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_UART_RxCpltCallback+0x64>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	4619      	mov	r1, r3
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <HAL_UART_RxCpltCallback+0x68>)
 800076e:	f7ff fd47 	bl	8000200 <_ZN11UsartBuffer7enqueueEh>
 8000772:	4603      	mov	r3, r0
 8000774:	77fb      	strb	r3, [r7, #31]
	  if(!res){
 8000776:	7ffb      	ldrb	r3, [r7, #31]
 8000778:	f083 0301 	eor.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d00e      	beq.n	80007a0 <HAL_UART_RxCpltCallback+0x4c>
		  const uint8_t tx_fail[] = "Failed to enqueue\r\n";
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_UART_RxCpltCallback+0x6c>)
 8000784:	f107 0408 	add.w	r4, r7, #8
 8000788:	461d      	mov	r5, r3
 800078a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078e:	682b      	ldr	r3, [r5, #0]
 8000790:	6023      	str	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, tx_fail, sizeof(tx_fail), 10);
 8000792:	f107 0108 	add.w	r1, r7, #8
 8000796:	230a      	movs	r3, #10
 8000798:	2214      	movs	r2, #20
 800079a:	480a      	ldr	r0, [pc, #40]	; (80007c4 <HAL_UART_RxCpltCallback+0x70>)
 800079c:	f001 ff5e 	bl	800265c <HAL_UART_Transmit>
	  }

	  HAL_UART_Receive_IT(&huart1, &rxed_byte_data, 1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	4905      	ldr	r1, [pc, #20]	; (80007b8 <HAL_UART_RxCpltCallback+0x64>)
 80007a4:	4808      	ldr	r0, [pc, #32]	; (80007c8 <HAL_UART_RxCpltCallback+0x74>)
 80007a6:	f001 ffe3 	bl	8002770 <HAL_UART_Receive_IT>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3720      	adds	r7, #32
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bdb0      	pop	{r4, r5, r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40013800 	.word	0x40013800
 80007b8:	20000138 	.word	0x20000138
 80007bc:	2000013c 	.word	0x2000013c
 80007c0:	08003aa4 	.word	0x08003aa4
 80007c4:	200000b0 	.word	0x200000b0
 80007c8:	20000028 	.word	0x20000028

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d107      	bne.n	80007f8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d102      	bne.n	80007f8 <_Z41__static_initialization_and_destruction_0ii+0x20>
UsartBuffer ub;
 80007f2:	4803      	ldr	r0, [pc, #12]	; (8000800 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80007f4:	f7ff fce8 	bl	80001c8 <_ZN11UsartBufferC1Ev>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000013c 	.word	0x2000013c

08000804 <_GLOBAL__sub_I_huart1>:
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
 8000808:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff ffe3 	bl	80007d8 <_Z41__static_initialization_and_destruction_0ii>
 8000812:	bd80      	pop	{r7, pc}

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <HAL_MspInit+0x44>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <HAL_MspInit+0x44>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6193      	str	r3, [r2, #24]
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <HAL_MspInit+0x44>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_MspInit+0x44>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_MspInit+0x44>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	61d3      	str	r3, [r2, #28]
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_MspInit+0x44>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	; 0x30
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a34      	ldr	r2, [pc, #208]	; (800094c <HAL_UART_MspInit+0xf0>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d132      	bne.n	80008e4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800087e:	4b34      	ldr	r3, [pc, #208]	; (8000950 <HAL_UART_MspInit+0xf4>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	4a33      	ldr	r2, [pc, #204]	; (8000950 <HAL_UART_MspInit+0xf4>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6193      	str	r3, [r2, #24]
 800088a:	4b31      	ldr	r3, [pc, #196]	; (8000950 <HAL_UART_MspInit+0xf4>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	61bb      	str	r3, [r7, #24]
 8000894:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <HAL_UART_MspInit+0xf4>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a2d      	ldr	r2, [pc, #180]	; (8000950 <HAL_UART_MspInit+0xf4>)
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	6153      	str	r3, [r2, #20]
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <HAL_UART_MspInit+0xf4>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008c0:	2307      	movs	r3, #7
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ce:	f000 faa1 	bl	8000e14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	2025      	movs	r0, #37	; 0x25
 80008d8:	f000 f9ef 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008dc:	2025      	movs	r0, #37	; 0x25
 80008de:	f000 fa08 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e2:	e02e      	b.n	8000942 <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1a      	ldr	r2, [pc, #104]	; (8000954 <HAL_UART_MspInit+0xf8>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d129      	bne.n	8000942 <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <HAL_UART_MspInit+0xf4>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	4a17      	ldr	r2, [pc, #92]	; (8000950 <HAL_UART_MspInit+0xf4>)
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	61d3      	str	r3, [r2, #28]
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <HAL_UART_MspInit+0xf4>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_UART_MspInit+0xf4>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	4a11      	ldr	r2, [pc, #68]	; (8000950 <HAL_UART_MspInit+0xf4>)
 800090c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000910:	6153      	str	r3, [r2, #20]
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_UART_MspInit+0xf4>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800091e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000930:	2307      	movs	r3, #7
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093e:	f000 fa69 	bl	8000e14 <HAL_GPIO_Init>
}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	; 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40013800 	.word	0x40013800
 8000950:	40021000 	.word	0x40021000
 8000954:	40004400 	.word	0x40004400

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800095c:	e7fe      	b.n	800095c <NMI_Handler+0x4>

0800095e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <MemManage_Handler+0x4>

0800096a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <UsageFault_Handler+0x4>

08000976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a4:	f000 f88e 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <USART1_IRQHandler+0x10>)
 80009b2:	f001 ff21 	bl	80027f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000028 	.word	0x20000028

080009c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e8:	f7ff ffea 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	; (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	; (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a12:	f002 fffb 	bl	8003a0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a16:	f7ff fd41 	bl	800049c <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a1c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a28:	08003afc 	.word	0x08003afc
  ldr r2, =_sbss
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a30:	200001cc 	.word	0x200001cc

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_Init+0x28>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_Init+0x28>)
 8000a42:	f043 0310 	orr.w	r3, r3, #16
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f92b 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f808 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff fede 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40022000 	.word	0x40022000

08000a64 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f943 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f000 f90b 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	200001c8 	.word	0x200001c8

08000aec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;  
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200001c8 	.word	0x200001c8

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff8e 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff29 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff3e 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff8e 	bl	8000bf8 <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff31 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa2 	bl	8000c60 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d008      	beq.n	8000d4a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e020      	b.n	8000d8c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 020e 	bic.w	r2, r2, #14
 8000d58:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 0201 	bic.w	r2, r2, #1
 8000d68:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d72:	2101      	movs	r1, #1
 8000d74:	fa01 f202 	lsl.w	r2, r1, r2
 8000d78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d005      	beq.n	8000dba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2204      	movs	r2, #4
 8000db2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	e027      	b.n	8000e0a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 020e 	bic.w	r2, r2, #14
 8000dc8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0201 	bic.w	r2, r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de2:	2101      	movs	r1, #1
 8000de4:	fa01 f202 	lsl.w	r2, r1, r2
 8000de8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2201      	movs	r2, #1
 8000dee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	4798      	blx	r3
    } 
  }
  return status;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e22:	e14e      	b.n	80010c2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 8140 	beq.w	80010bc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d005      	beq.n	8000e54 <HAL_GPIO_Init+0x40>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d130      	bne.n	8000eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	091b      	lsrs	r3, r3, #4
 8000ea0:	f003 0201 	and.w	r2, r3, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d017      	beq.n	8000ef2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d123      	bne.n	8000f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	6939      	ldr	r1, [r7, #16]
 8000f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0203 	and.w	r2, r3, #3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 809a 	beq.w	80010bc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f88:	4b55      	ldr	r3, [pc, #340]	; (80010e0 <HAL_GPIO_Init+0x2cc>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a54      	ldr	r2, [pc, #336]	; (80010e0 <HAL_GPIO_Init+0x2cc>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b52      	ldr	r3, [pc, #328]	; (80010e0 <HAL_GPIO_Init+0x2cc>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa0:	4a50      	ldr	r2, [pc, #320]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fca:	d013      	beq.n	8000ff4 <HAL_GPIO_Init+0x1e0>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a46      	ldr	r2, [pc, #280]	; (80010e8 <HAL_GPIO_Init+0x2d4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d00d      	beq.n	8000ff0 <HAL_GPIO_Init+0x1dc>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a45      	ldr	r2, [pc, #276]	; (80010ec <HAL_GPIO_Init+0x2d8>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d007      	beq.n	8000fec <HAL_GPIO_Init+0x1d8>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a44      	ldr	r2, [pc, #272]	; (80010f0 <HAL_GPIO_Init+0x2dc>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d101      	bne.n	8000fe8 <HAL_GPIO_Init+0x1d4>
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e006      	b.n	8000ff6 <HAL_GPIO_Init+0x1e2>
 8000fe8:	2305      	movs	r3, #5
 8000fea:	e004      	b.n	8000ff6 <HAL_GPIO_Init+0x1e2>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_Init+0x1e2>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <HAL_GPIO_Init+0x1e2>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	f002 0203 	and.w	r2, r2, #3
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	4093      	lsls	r3, r2
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001006:	4937      	ldr	r1, [pc, #220]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001014:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <HAL_GPIO_Init+0x2e0>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001038:	4a2e      	ldr	r2, [pc, #184]	; (80010f4 <HAL_GPIO_Init+0x2e0>)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HAL_GPIO_Init+0x2e0>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001062:	4a24      	ldr	r2, [pc, #144]	; (80010f4 <HAL_GPIO_Init+0x2e0>)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <HAL_GPIO_Init+0x2e0>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800108c:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <HAL_GPIO_Init+0x2e0>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_GPIO_Init+0x2e0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_GPIO_Init+0x2e0>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3301      	adds	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	fa22 f303 	lsr.w	r3, r2, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f47f aea9 	bne.w	8000e24 <HAL_GPIO_Init+0x10>
  }
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	48000400 	.word	0x48000400
 80010ec:	48000800 	.word	0x48000800
 80010f0:	48000c00 	.word	0x48000c00
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80010fe:	af00      	add	r7, sp, #0
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	f000 bef4 	b.w	8001efa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 816a 	beq.w	80013f6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001122:	4bb3      	ldr	r3, [pc, #716]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b04      	cmp	r3, #4
 800112c:	d00c      	beq.n	8001148 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800112e:	4bb0      	ldr	r3, [pc, #704]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b08      	cmp	r3, #8
 8001138:	d159      	bne.n	80011ee <HAL_RCC_OscConfig+0xf6>
 800113a:	4bad      	ldr	r3, [pc, #692]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001146:	d152      	bne.n	80011ee <HAL_RCC_OscConfig+0xf6>
 8001148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800114c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001150:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001154:	fa93 f3a3 	rbit	r3, r3
 8001158:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800115c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001160:	fab3 f383 	clz	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d102      	bne.n	800117a <HAL_RCC_OscConfig+0x82>
 8001174:	4b9e      	ldr	r3, [pc, #632]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	e015      	b.n	80011a6 <HAL_RCC_OscConfig+0xae>
 800117a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800117e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001182:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800118e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001192:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001196:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800119a:	fa93 f3a3 	rbit	r3, r3
 800119e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80011a2:	4b93      	ldr	r3, [pc, #588]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011aa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80011ae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80011b2:	fa92 f2a2 	rbit	r2, r2
 80011b6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80011ba:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80011be:	fab2 f282 	clz	r2, r2
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	f042 0220 	orr.w	r2, r2, #32
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	f002 021f 	and.w	r2, r2, #31
 80011ce:	2101      	movs	r1, #1
 80011d0:	fa01 f202 	lsl.w	r2, r1, r2
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 810c 	beq.w	80013f4 <HAL_RCC_OscConfig+0x2fc>
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f040 8106 	bne.w	80013f4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	f000 be86 	b.w	8001efa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f8:	d106      	bne.n	8001208 <HAL_RCC_OscConfig+0x110>
 80011fa:	4b7d      	ldr	r3, [pc, #500]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a7c      	ldr	r2, [pc, #496]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e030      	b.n	800126a <HAL_RCC_OscConfig+0x172>
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x134>
 8001212:	4b77      	ldr	r3, [pc, #476]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a76      	ldr	r2, [pc, #472]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 8001218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b74      	ldr	r3, [pc, #464]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a73      	ldr	r2, [pc, #460]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 8001224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e01e      	b.n	800126a <HAL_RCC_OscConfig+0x172>
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001236:	d10c      	bne.n	8001252 <HAL_RCC_OscConfig+0x15a>
 8001238:	4b6d      	ldr	r3, [pc, #436]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a6c      	ldr	r2, [pc, #432]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 800123e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b6a      	ldr	r3, [pc, #424]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a69      	ldr	r2, [pc, #420]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 800124a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	e00b      	b.n	800126a <HAL_RCC_OscConfig+0x172>
 8001252:	4b67      	ldr	r3, [pc, #412]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a66      	ldr	r2, [pc, #408]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 8001258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b64      	ldr	r3, [pc, #400]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a63      	ldr	r2, [pc, #396]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 8001264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001268:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800126a:	4b61      	ldr	r3, [pc, #388]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 800126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126e:	f023 020f 	bic.w	r2, r3, #15
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	495d      	ldr	r1, [pc, #372]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 800127a:	4313      	orrs	r3, r2
 800127c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d059      	beq.n	800133c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fc30 	bl	8000aec <HAL_GetTick>
 800128c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001292:	f7ff fc2b 	bl	8000aec <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	; 0x64
 80012a0:	d902      	bls.n	80012a8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	f000 be29 	b.w	8001efa <HAL_RCC_OscConfig+0xe02>
 80012a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80012bc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c0:	fab3 f383 	clz	r3, r3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d102      	bne.n	80012da <HAL_RCC_OscConfig+0x1e2>
 80012d4:	4b46      	ldr	r3, [pc, #280]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	e015      	b.n	8001306 <HAL_RCC_OscConfig+0x20e>
 80012da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012de:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012f6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001302:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800130a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800130e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001312:	fa92 f2a2 	rbit	r2, r2
 8001316:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800131a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800131e:	fab2 f282 	clz	r2, r2
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	f042 0220 	orr.w	r2, r2, #32
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	f002 021f 	and.w	r2, r2, #31
 800132e:	2101      	movs	r1, #1
 8001330:	fa01 f202 	lsl.w	r2, r1, r2
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0ab      	beq.n	8001292 <HAL_RCC_OscConfig+0x19a>
 800133a:	e05c      	b.n	80013f6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fbd6 	bl	8000aec <HAL_GetTick>
 8001340:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001346:	f7ff fbd1 	bl	8000aec <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d902      	bls.n	800135c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	f000 bdcf 	b.w	8001efa <HAL_RCC_OscConfig+0xe02>
 800135c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001360:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001364:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001370:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001374:	fab3 f383 	clz	r3, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b01      	cmp	r3, #1
 8001386:	d102      	bne.n	800138e <HAL_RCC_OscConfig+0x296>
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	e015      	b.n	80013ba <HAL_RCC_OscConfig+0x2c2>
 800138e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001392:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001396:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800139a:	fa93 f3a3 	rbit	r3, r3
 800139e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80013aa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_RCC_OscConfig+0x2f8>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013be:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80013c2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80013c6:	fa92 f2a2 	rbit	r2, r2
 80013ca:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80013ce:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80013d2:	fab2 f282 	clz	r2, r2
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	f042 0220 	orr.w	r2, r2, #32
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	f002 021f 	and.w	r2, r2, #31
 80013e2:	2101      	movs	r1, #1
 80013e4:	fa01 f202 	lsl.w	r2, r1, r2
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1ab      	bne.n	8001346 <HAL_RCC_OscConfig+0x24e>
 80013ee:	e002      	b.n	80013f6 <HAL_RCC_OscConfig+0x2fe>
 80013f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 816f 	beq.w	80016e4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001406:	4bd0      	ldr	r3, [pc, #832]	; (8001748 <HAL_RCC_OscConfig+0x650>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00b      	beq.n	800142a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001412:	4bcd      	ldr	r3, [pc, #820]	; (8001748 <HAL_RCC_OscConfig+0x650>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b08      	cmp	r3, #8
 800141c:	d16c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x400>
 800141e:	4bca      	ldr	r3, [pc, #808]	; (8001748 <HAL_RCC_OscConfig+0x650>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d166      	bne.n	80014f8 <HAL_RCC_OscConfig+0x400>
 800142a:	2302      	movs	r3, #2
 800142c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001430:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001434:	fa93 f3a3 	rbit	r3, r3
 8001438:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800143c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001440:	fab3 f383 	clz	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d102      	bne.n	800145a <HAL_RCC_OscConfig+0x362>
 8001454:	4bbc      	ldr	r3, [pc, #752]	; (8001748 <HAL_RCC_OscConfig+0x650>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	e013      	b.n	8001482 <HAL_RCC_OscConfig+0x38a>
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001460:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800146c:	2302      	movs	r3, #2
 800146e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001472:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800147e:	4bb2      	ldr	r3, [pc, #712]	; (8001748 <HAL_RCC_OscConfig+0x650>)
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	2202      	movs	r2, #2
 8001484:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001488:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800148c:	fa92 f2a2 	rbit	r2, r2
 8001490:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001494:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001498:	fab2 f282 	clz	r2, r2
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	f042 0220 	orr.w	r2, r2, #32
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	f002 021f 	and.w	r2, r2, #31
 80014a8:	2101      	movs	r1, #1
 80014aa:	fa01 f202 	lsl.w	r2, r1, r2
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d007      	beq.n	80014c4 <HAL_RCC_OscConfig+0x3cc>
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d002      	beq.n	80014c4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	f000 bd1b 	b.w	8001efa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c4:	4ba0      	ldr	r3, [pc, #640]	; (8001748 <HAL_RCC_OscConfig+0x650>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	21f8      	movs	r1, #248	; 0xf8
 80014d4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014dc:	fa91 f1a1 	rbit	r1, r1
 80014e0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80014e4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80014e8:	fab1 f181 	clz	r1, r1
 80014ec:	b2c9      	uxtb	r1, r1
 80014ee:	408b      	lsls	r3, r1
 80014f0:	4995      	ldr	r1, [pc, #596]	; (8001748 <HAL_RCC_OscConfig+0x650>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f6:	e0f5      	b.n	80016e4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8085 	beq.w	800160e <HAL_RCC_OscConfig+0x516>
 8001504:	2301      	movs	r3, #1
 8001506:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001516:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151a:	fab3 f383 	clz	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001524:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	461a      	mov	r2, r3
 800152c:	2301      	movs	r3, #1
 800152e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fadc 	bl	8000aec <HAL_GetTick>
 8001534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fad7 	bl	8000aec <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d902      	bls.n	8001550 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	f000 bcd5 	b.w	8001efa <HAL_RCC_OscConfig+0xe02>
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001556:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001562:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	fab3 f383 	clz	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	095b      	lsrs	r3, r3, #5
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d102      	bne.n	8001580 <HAL_RCC_OscConfig+0x488>
 800157a:	4b73      	ldr	r3, [pc, #460]	; (8001748 <HAL_RCC_OscConfig+0x650>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	e013      	b.n	80015a8 <HAL_RCC_OscConfig+0x4b0>
 8001580:	2302      	movs	r3, #2
 8001582:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001598:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80015a4:	4b68      	ldr	r3, [pc, #416]	; (8001748 <HAL_RCC_OscConfig+0x650>)
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	2202      	movs	r2, #2
 80015aa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80015ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015b2:	fa92 f2a2 	rbit	r2, r2
 80015b6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80015ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80015be:	fab2 f282 	clz	r2, r2
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	f042 0220 	orr.w	r2, r2, #32
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	f002 021f 	and.w	r2, r2, #31
 80015ce:	2101      	movs	r1, #1
 80015d0:	fa01 f202 	lsl.w	r2, r1, r2
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0af      	beq.n	800153a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015da:	4b5b      	ldr	r3, [pc, #364]	; (8001748 <HAL_RCC_OscConfig+0x650>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	21f8      	movs	r1, #248	; 0xf8
 80015ea:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015f2:	fa91 f1a1 	rbit	r1, r1
 80015f6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80015fa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80015fe:	fab1 f181 	clz	r1, r1
 8001602:	b2c9      	uxtb	r1, r1
 8001604:	408b      	lsls	r3, r1
 8001606:	4950      	ldr	r1, [pc, #320]	; (8001748 <HAL_RCC_OscConfig+0x650>)
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
 800160c:	e06a      	b.n	80016e4 <HAL_RCC_OscConfig+0x5ec>
 800160e:	2301      	movs	r3, #1
 8001610:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001618:	fa93 f3a3 	rbit	r3, r3
 800161c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001620:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001624:	fab3 f383 	clz	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800162e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	461a      	mov	r2, r3
 8001636:	2300      	movs	r3, #0
 8001638:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff fa57 	bl	8000aec <HAL_GetTick>
 800163e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	e00a      	b.n	800165a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fa52 	bl	8000aec <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d902      	bls.n	800165a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	f000 bc50 	b.w	8001efa <HAL_RCC_OscConfig+0xe02>
 800165a:	2302      	movs	r3, #2
 800165c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800166c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d102      	bne.n	800168a <HAL_RCC_OscConfig+0x592>
 8001684:	4b30      	ldr	r3, [pc, #192]	; (8001748 <HAL_RCC_OscConfig+0x650>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	e013      	b.n	80016b2 <HAL_RCC_OscConfig+0x5ba>
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800169c:	2302      	movs	r3, #2
 800169e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_RCC_OscConfig+0x650>)
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	2202      	movs	r2, #2
 80016b4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80016b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016bc:	fa92 f2a2 	rbit	r2, r2
 80016c0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80016c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016c8:	fab2 f282 	clz	r2, r2
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	f042 0220 	orr.w	r2, r2, #32
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	f002 021f 	and.w	r2, r2, #31
 80016d8:	2101      	movs	r1, #1
 80016da:	fa01 f202 	lsl.w	r2, r1, r2
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1af      	bne.n	8001644 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 80da 	beq.w	80018a8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d069      	beq.n	80017d2 <HAL_RCC_OscConfig+0x6da>
 80016fe:	2301      	movs	r3, #1
 8001700:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	461a      	mov	r2, r3
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_RCC_OscConfig+0x654>)
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	461a      	mov	r2, r3
 8001724:	2301      	movs	r3, #1
 8001726:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff f9e0 	bl	8000aec <HAL_GetTick>
 800172c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001730:	e00e      	b.n	8001750 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001732:	f7ff f9db 	bl	8000aec <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d906      	bls.n	8001750 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e3d9      	b.n	8001efa <HAL_RCC_OscConfig+0xe02>
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	10908120 	.word	0x10908120
 8001750:	2302      	movs	r3, #2
 8001752:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001762:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001766:	2202      	movs	r2, #2
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800177e:	2202      	movs	r2, #2
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	fa93 f2a3 	rbit	r2, r3
 800178c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001790:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001792:	4ba5      	ldr	r3, [pc, #660]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 8001794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001796:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800179a:	2102      	movs	r1, #2
 800179c:	6019      	str	r1, [r3, #0]
 800179e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	fa93 f1a3 	rbit	r1, r3
 80017a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017ac:	6019      	str	r1, [r3, #0]
  return result;
 80017ae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	2101      	movs	r1, #1
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0b0      	beq.n	8001732 <HAL_RCC_OscConfig+0x63a>
 80017d0:	e06a      	b.n	80018a8 <HAL_RCC_OscConfig+0x7b0>
 80017d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017d6:	2201      	movs	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fa93 f2a3 	rbit	r2, r3
 80017e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017e8:	601a      	str	r2, [r3, #0]
  return result;
 80017ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017ee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f0:	fab3 f383 	clz	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b8c      	ldr	r3, [pc, #560]	; (8001a2c <HAL_RCC_OscConfig+0x934>)
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	461a      	mov	r2, r3
 8001800:	2300      	movs	r3, #0
 8001802:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff f972 	bl	8000aec <HAL_GetTick>
 8001808:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	e009      	b.n	8001822 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180e:	f7ff f96d 	bl	8000aec <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e36b      	b.n	8001efa <HAL_RCC_OscConfig+0xe02>
 8001822:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001826:	2202      	movs	r2, #2
 8001828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	fa93 f2a3 	rbit	r2, r3
 8001834:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800183e:	2202      	movs	r2, #2
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	fa93 f2a3 	rbit	r2, r3
 800184c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001856:	2202      	movs	r2, #2
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001868:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186a:	4b6f      	ldr	r3, [pc, #444]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 800186c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800186e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001872:	2102      	movs	r1, #2
 8001874:	6019      	str	r1, [r3, #0]
 8001876:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f1a3 	rbit	r1, r3
 8001880:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001884:	6019      	str	r1, [r3, #0]
  return result;
 8001886:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	2101      	movs	r1, #1
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1b2      	bne.n	800180e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 8158 	beq.w	8001b68 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	4b5a      	ldr	r3, [pc, #360]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d112      	bne.n	80018f0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	4b57      	ldr	r3, [pc, #348]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	4a56      	ldr	r2, [pc, #344]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	61d3      	str	r3, [r2, #28]
 80018d6:	4b54      	ldr	r3, [pc, #336]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	f107 0308 	add.w	r3, r7, #8
 80018e8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <HAL_RCC_OscConfig+0x938>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11a      	bne.n	8001932 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018fc:	4b4c      	ldr	r3, [pc, #304]	; (8001a30 <HAL_RCC_OscConfig+0x938>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a4b      	ldr	r2, [pc, #300]	; (8001a30 <HAL_RCC_OscConfig+0x938>)
 8001902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001906:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001908:	f7ff f8f0 	bl	8000aec <HAL_GetTick>
 800190c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	e009      	b.n	8001926 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001912:	f7ff f8eb 	bl	8000aec <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e2e9      	b.n	8001efa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001926:	4b42      	ldr	r3, [pc, #264]	; (8001a30 <HAL_RCC_OscConfig+0x938>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0ef      	beq.n	8001912 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x852>
 800193c:	4b3a      	ldr	r3, [pc, #232]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4a39      	ldr	r2, [pc, #228]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6213      	str	r3, [r2, #32]
 8001948:	e02f      	b.n	80019aa <HAL_RCC_OscConfig+0x8b2>
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10c      	bne.n	800196e <HAL_RCC_OscConfig+0x876>
 8001954:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4a33      	ldr	r2, [pc, #204]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 800195a:	f023 0301 	bic.w	r3, r3, #1
 800195e:	6213      	str	r3, [r2, #32]
 8001960:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a30      	ldr	r2, [pc, #192]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 8001966:	f023 0304 	bic.w	r3, r3, #4
 800196a:	6213      	str	r3, [r2, #32]
 800196c:	e01d      	b.n	80019aa <HAL_RCC_OscConfig+0x8b2>
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b05      	cmp	r3, #5
 8001976:	d10c      	bne.n	8001992 <HAL_RCC_OscConfig+0x89a>
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4a2a      	ldr	r2, [pc, #168]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	6213      	str	r3, [r2, #32]
 8001984:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4a27      	ldr	r2, [pc, #156]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6213      	str	r3, [r2, #32]
 8001990:	e00b      	b.n	80019aa <HAL_RCC_OscConfig+0x8b2>
 8001992:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	4a24      	ldr	r2, [pc, #144]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	6213      	str	r3, [r2, #32]
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a21      	ldr	r2, [pc, #132]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 80019a4:	f023 0304 	bic.w	r3, r3, #4
 80019a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d06b      	beq.n	8001a8c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7ff f89a 	bl	8000aec <HAL_GetTick>
 80019b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	e00b      	b.n	80019d6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff f895 	bl	8000aec <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e291      	b.n	8001efa <HAL_RCC_OscConfig+0xe02>
 80019d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80019da:	2202      	movs	r2, #2
 80019dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	fa93 f2a3 	rbit	r2, r3
 80019e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019f2:	2202      	movs	r2, #2
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fa93 f2a3 	rbit	r2, r3
 8001a00:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a04:	601a      	str	r2, [r3, #0]
  return result;
 8001a06:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	f043 0302 	orr.w	r3, r3, #2
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d109      	bne.n	8001a34 <HAL_RCC_OscConfig+0x93c>
 8001a20:	4b01      	ldr	r3, [pc, #4]	; (8001a28 <HAL_RCC_OscConfig+0x930>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	e014      	b.n	8001a50 <HAL_RCC_OscConfig+0x958>
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	10908120 	.word	0x10908120
 8001a30:	40007000 	.word	0x40007000
 8001a34:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a38:	2202      	movs	r2, #2
 8001a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	fa93 f2a3 	rbit	r2, r3
 8001a46:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	4bbb      	ldr	r3, [pc, #748]	; (8001d3c <HAL_RCC_OscConfig+0xc44>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a54:	2102      	movs	r1, #2
 8001a56:	6011      	str	r1, [r2, #0]
 8001a58:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	fa92 f1a2 	rbit	r1, r2
 8001a62:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a66:	6011      	str	r1, [r2, #0]
  return result;
 8001a68:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	fab2 f282 	clz	r2, r2
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	f002 021f 	and.w	r2, r2, #31
 8001a7e:	2101      	movs	r1, #1
 8001a80:	fa01 f202 	lsl.w	r2, r1, r2
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d099      	beq.n	80019be <HAL_RCC_OscConfig+0x8c6>
 8001a8a:	e063      	b.n	8001b54 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff f82e 	bl	8000aec <HAL_GetTick>
 8001a90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	e00b      	b.n	8001aae <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff f829 	bl	8000aec <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e225      	b.n	8001efa <HAL_RCC_OscConfig+0xe02>
 8001aae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001aca:	2202      	movs	r2, #2
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	fa93 f2a3 	rbit	r2, r3
 8001ad8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001adc:	601a      	str	r2, [r3, #0]
  return result;
 8001ade:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ae2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d102      	bne.n	8001afe <HAL_RCC_OscConfig+0xa06>
 8001af8:	4b90      	ldr	r3, [pc, #576]	; (8001d3c <HAL_RCC_OscConfig+0xc44>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	e00d      	b.n	8001b1a <HAL_RCC_OscConfig+0xa22>
 8001afe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b02:	2202      	movs	r2, #2
 8001b04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	fa93 f2a3 	rbit	r2, r3
 8001b10:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	4b89      	ldr	r3, [pc, #548]	; (8001d3c <HAL_RCC_OscConfig+0xc44>)
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b1e:	2102      	movs	r1, #2
 8001b20:	6011      	str	r1, [r2, #0]
 8001b22:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	fa92 f1a2 	rbit	r1, r2
 8001b2c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b30:	6011      	str	r1, [r2, #0]
  return result;
 8001b32:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	fab2 f282 	clz	r2, r2
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	f002 021f 	and.w	r2, r2, #31
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1a0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b54:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5c:	4b77      	ldr	r3, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0xc44>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	4a76      	ldr	r2, [pc, #472]	; (8001d3c <HAL_RCC_OscConfig+0xc44>)
 8001b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b66:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 81c2 	beq.w	8001ef8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b74:	4b71      	ldr	r3, [pc, #452]	; (8001d3c <HAL_RCC_OscConfig+0xc44>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	f000 819c 	beq.w	8001eba <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	f040 8114 	bne.w	8001db6 <HAL_RCC_OscConfig+0xcbe>
 8001b8e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	fa93 f2a3 	rbit	r2, r3
 8001ba2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ba6:	601a      	str	r2, [r3, #0]
  return result;
 8001ba8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ff92 	bl	8000aec <HAL_GetTick>
 8001bc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bcc:	e009      	b.n	8001be2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bce:	f7fe ff8d 	bl	8000aec <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e18b      	b.n	8001efa <HAL_RCC_OscConfig+0xe02>
 8001be2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001be6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f2a3 	rbit	r2, r3
 8001bf6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bfa:	601a      	str	r2, [r3, #0]
  return result;
 8001bfc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	095b      	lsrs	r3, r3, #5
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d102      	bne.n	8001c1c <HAL_RCC_OscConfig+0xb24>
 8001c16:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <HAL_RCC_OscConfig+0xc44>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	e01b      	b.n	8001c54 <HAL_RCC_OscConfig+0xb5c>
 8001c1c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <HAL_RCC_OscConfig+0xc44>)
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c5c:	6011      	str	r1, [r2, #0]
 8001c5e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	fa92 f1a2 	rbit	r1, r2
 8001c68:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c6c:	6011      	str	r1, [r2, #0]
  return result;
 8001c6e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	fab2 f282 	clz	r2, r2
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	f042 0220 	orr.w	r2, r2, #32
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f002 021f 	and.w	r2, r2, #31
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d19e      	bne.n	8001bce <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_RCC_OscConfig+0xc44>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	4925      	ldr	r1, [pc, #148]	; (8001d3c <HAL_RCC_OscConfig+0xc44>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
 8001cac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	fa93 f2a3 	rbit	r2, r3
 8001cc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cc4:	601a      	str	r2, [r3, #0]
  return result;
 8001cc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cca:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2301      	movs	r3, #1
 8001ce0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7fe ff03 	bl	8000aec <HAL_GetTick>
 8001ce6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cea:	e009      	b.n	8001d00 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe fefe 	bl	8000aec <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e0fc      	b.n	8001efa <HAL_RCC_OscConfig+0xe02>
 8001d00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	fa93 f2a3 	rbit	r2, r3
 8001d14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d18:	601a      	str	r2, [r3, #0]
  return result;
 8001d1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <HAL_RCC_OscConfig+0xc48>
 8001d34:	4b01      	ldr	r3, [pc, #4]	; (8001d3c <HAL_RCC_OscConfig+0xc44>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	e01e      	b.n	8001d78 <HAL_RCC_OscConfig+0xc80>
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	fa93 f2a3 	rbit	r2, r3
 8001d54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	4b63      	ldr	r3, [pc, #396]	; (8001f04 <HAL_RCC_OscConfig+0xe0c>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d80:	6011      	str	r1, [r2, #0]
 8001d82:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	fa92 f1a2 	rbit	r1, r2
 8001d8c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d90:	6011      	str	r1, [r2, #0]
  return result;
 8001d92:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	fab2 f282 	clz	r2, r2
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	f042 0220 	orr.w	r2, r2, #32
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f002 021f 	and.w	r2, r2, #31
 8001da8:	2101      	movs	r1, #1
 8001daa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d09b      	beq.n	8001cec <HAL_RCC_OscConfig+0xbf4>
 8001db4:	e0a0      	b.n	8001ef8 <HAL_RCC_OscConfig+0xe00>
 8001db6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	fa93 f2a3 	rbit	r2, r3
 8001dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dce:	601a      	str	r2, [r3, #0]
  return result;
 8001dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	461a      	mov	r2, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7fe fe7e 	bl	8000aec <HAL_GetTick>
 8001df0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df4:	e009      	b.n	8001e0a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df6:	f7fe fe79 	bl	8000aec <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e077      	b.n	8001efa <HAL_RCC_OscConfig+0xe02>
 8001e0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	fa93 f2a3 	rbit	r2, r3
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	601a      	str	r2, [r3, #0]
  return result;
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d102      	bne.n	8001e44 <HAL_RCC_OscConfig+0xd4c>
 8001e3e:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <HAL_RCC_OscConfig+0xe0c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	e01b      	b.n	8001e7c <HAL_RCC_OscConfig+0xd84>
 8001e44:	f107 0320 	add.w	r3, r7, #32
 8001e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	fa93 f2a3 	rbit	r2, r3
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	f107 0318 	add.w	r3, r7, #24
 8001e62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	f107 0318 	add.w	r3, r7, #24
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa93 f2a3 	rbit	r2, r3
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <HAL_RCC_OscConfig+0xe0c>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f107 0210 	add.w	r2, r7, #16
 8001e80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e84:	6011      	str	r1, [r2, #0]
 8001e86:	f107 0210 	add.w	r2, r7, #16
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	fa92 f1a2 	rbit	r1, r2
 8001e90:	f107 020c 	add.w	r2, r7, #12
 8001e94:	6011      	str	r1, [r2, #0]
  return result;
 8001e96:	f107 020c 	add.w	r2, r7, #12
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	fab2 f282 	clz	r2, r2
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f042 0220 	orr.w	r2, r2, #32
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	f002 021f 	and.w	r2, r2, #31
 8001eac:	2101      	movs	r1, #1
 8001eae:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d19e      	bne.n	8001df6 <HAL_RCC_OscConfig+0xcfe>
 8001eb8:	e01e      	b.n	8001ef8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e018      	b.n	8001efa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_RCC_OscConfig+0xe0c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ed0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ed4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d108      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000

08001f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b09e      	sub	sp, #120	; 0x78
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e162      	b.n	80021e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b90      	ldr	r3, [pc, #576]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b8d      	ldr	r3, [pc, #564]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	498b      	ldr	r1, [pc, #556]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b89      	ldr	r3, [pc, #548]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e14a      	b.n	80021e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b82      	ldr	r3, [pc, #520]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	497f      	ldr	r1, [pc, #508]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80dc 	beq.w	8002134 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d13c      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xf6>
 8001f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d102      	bne.n	8001fae <HAL_RCC_ClockConfig+0xa6>
 8001fa8:	4b6f      	ldr	r3, [pc, #444]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	e00f      	b.n	8001fce <HAL_RCC_ClockConfig+0xc6>
 8001fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	667b      	str	r3, [r7, #100]	; 0x64
 8001fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8001fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fca:	4b67      	ldr	r3, [pc, #412]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fd6:	fa92 f2a2 	rbit	r2, r2
 8001fda:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fde:	fab2 f282 	clz	r2, r2
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	f042 0220 	orr.w	r2, r2, #32
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	f002 021f 	and.w	r2, r2, #31
 8001fee:	2101      	movs	r1, #1
 8001ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d17b      	bne.n	80020f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0f3      	b.n	80021e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d13c      	bne.n	8002080 <HAL_RCC_ClockConfig+0x178>
 8002006:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800200a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	095b      	lsrs	r3, r3, #5
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d102      	bne.n	8002030 <HAL_RCC_ClockConfig+0x128>
 800202a:	4b4f      	ldr	r3, [pc, #316]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	e00f      	b.n	8002050 <HAL_RCC_ClockConfig+0x148>
 8002030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002034:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	647b      	str	r3, [r7, #68]	; 0x44
 800203e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002042:	643b      	str	r3, [r7, #64]	; 0x40
 8002044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800204c:	4b46      	ldr	r3, [pc, #280]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002054:	63ba      	str	r2, [r7, #56]	; 0x38
 8002056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002058:	fa92 f2a2 	rbit	r2, r2
 800205c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800205e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002060:	fab2 f282 	clz	r2, r2
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	f042 0220 	orr.w	r2, r2, #32
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	f002 021f 	and.w	r2, r2, #31
 8002070:	2101      	movs	r1, #1
 8002072:	fa01 f202 	lsl.w	r2, r1, r2
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d13a      	bne.n	80020f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0b2      	b.n	80021e6 <HAL_RCC_ClockConfig+0x2de>
 8002080:	2302      	movs	r3, #2
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x1a0>
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	e00d      	b.n	80020c4 <HAL_RCC_ClockConfig+0x1bc>
 80020a8:	2302      	movs	r3, #2
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
 80020b4:	2302      	movs	r3, #2
 80020b6:	623b      	str	r3, [r7, #32]
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	2202      	movs	r2, #2
 80020c6:	61ba      	str	r2, [r7, #24]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	fa92 f2a2 	rbit	r2, r2
 80020ce:	617a      	str	r2, [r7, #20]
  return result;
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	fab2 f282 	clz	r2, r2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f042 0220 	orr.w	r2, r2, #32
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f002 021f 	and.w	r2, r2, #31
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e079      	b.n	80021e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f2:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f023 0203 	bic.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	491a      	ldr	r1, [pc, #104]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002104:	f7fe fcf2 	bl	8000aec <HAL_GetTick>
 8002108:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	e00a      	b.n	8002122 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7fe fcee 	bl	8000aec <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e061      	b.n	80021e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 020c 	and.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	429a      	cmp	r2, r3
 8002132:	d1eb      	bne.n	800210c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d214      	bcs.n	800216c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 0207 	bic.w	r2, r3, #7
 800214a:	4906      	ldr	r1, [pc, #24]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e040      	b.n	80021e6 <HAL_RCC_ClockConfig+0x2de>
 8002164:	40022000 	.word	0x40022000
 8002168:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_RCC_ClockConfig+0x2e8>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	491a      	ldr	r1, [pc, #104]	; (80021f0 <HAL_RCC_ClockConfig+0x2e8>)
 8002186:	4313      	orrs	r3, r2
 8002188:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d009      	beq.n	80021aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_RCC_ClockConfig+0x2e8>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4912      	ldr	r1, [pc, #72]	; (80021f0 <HAL_RCC_ClockConfig+0x2e8>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021aa:	f000 f829 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80021ae:	4601      	mov	r1, r0
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_RCC_ClockConfig+0x2e8>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b8:	22f0      	movs	r2, #240	; 0xf0
 80021ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	fa92 f2a2 	rbit	r2, r2
 80021c2:	60fa      	str	r2, [r7, #12]
  return result;
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	fab2 f282 	clz	r2, r2
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	40d3      	lsrs	r3, r2
 80021ce:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <HAL_RCC_ClockConfig+0x2ec>)
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
 80021d2:	fa21 f303 	lsr.w	r3, r1, r3
 80021d6:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <HAL_RCC_ClockConfig+0x2f0>)
 80021d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_RCC_ClockConfig+0x2f4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fc40 	bl	8000a64 <HAL_InitTick>
  
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3778      	adds	r7, #120	; 0x78
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08003ab8 	.word	0x08003ab8
 80021f8:	20000000 	.word	0x20000000
 80021fc:	20000004 	.word	0x20000004

08002200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b08b      	sub	sp, #44	; 0x2c
 8002204:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d002      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x30>
 800222a:	2b08      	cmp	r3, #8
 800222c:	d003      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0x36>
 800222e:	e03c      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002232:	623b      	str	r3, [r7, #32]
      break;
 8002234:	e03c      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800223c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002240:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	fa92 f2a2 	rbit	r2, r2
 8002248:	607a      	str	r2, [r7, #4]
  return result;
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	fab2 f282 	clz	r2, r2
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	40d3      	lsrs	r3, r2
 8002254:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	220f      	movs	r2, #15
 8002264:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	fa92 f2a2 	rbit	r2, r2
 800226c:	60fa      	str	r2, [r7, #12]
  return result;
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	fab2 f282 	clz	r2, r2
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	40d3      	lsrs	r3, r2
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002288:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
 8002298:	e004      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	623b      	str	r3, [r7, #32]
      break;
 80022a8:	e002      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ac:	623b      	str	r3, [r7, #32]
      break;
 80022ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b0:	6a3b      	ldr	r3, [r7, #32]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	372c      	adds	r7, #44	; 0x2c
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	007a1200 	.word	0x007a1200
 80022c8:	08003ad0 	.word	0x08003ad0
 80022cc:	08003ae0 	.word	0x08003ae0
 80022d0:	003d0900 	.word	0x003d0900

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000000 	.word	0x20000000

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022f2:	f7ff ffef 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f6:	4601      	mov	r1, r0
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002300:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002304:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	fa92 f2a2 	rbit	r2, r2
 800230c:	603a      	str	r2, [r7, #0]
  return result;
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	40d3      	lsrs	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_RCC_GetPCLK1Freq+0x40>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	08003ac8 	.word	0x08003ac8

08002330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002336:	f7ff ffcd 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 800233a:	4601      	mov	r1, r0
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002344:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002348:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	fa92 f2a2 	rbit	r2, r2
 8002350:	603a      	str	r2, [r7, #0]
  return result;
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	fab2 f282 	clz	r2, r2
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	40d3      	lsrs	r3, r2
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x40>)
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	08003ac8 	.word	0x08003ac8

08002374 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b092      	sub	sp, #72	; 0x48
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 80cd 	beq.w	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002398:	4b86      	ldr	r3, [pc, #536]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10e      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	4b83      	ldr	r3, [pc, #524]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	4a82      	ldr	r2, [pc, #520]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	61d3      	str	r3, [r2, #28]
 80023b0:	4b80      	ldr	r3, [pc, #512]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023bc:	2301      	movs	r3, #1
 80023be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	4b7d      	ldr	r3, [pc, #500]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d118      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ce:	4b7a      	ldr	r3, [pc, #488]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a79      	ldr	r2, [pc, #484]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023da:	f7fe fb87 	bl	8000aec <HAL_GetTick>
 80023de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	e008      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e2:	f7fe fb83 	bl	8000aec <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0db      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002400:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002408:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800240a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d07d      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002418:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800241a:	429a      	cmp	r2, r3
 800241c:	d076      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	4b5e      	ldr	r3, [pc, #376]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	461a      	mov	r2, r3
 8002448:	2301      	movs	r3, #1
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002450:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800245a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	4b55      	ldr	r3, [pc, #340]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	461a      	mov	r2, r3
 800246c:	2300      	movs	r3, #0
 800246e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002470:	4a50      	ldr	r2, [pc, #320]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002474:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d045      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7fe fb34 	bl	8000aec <HAL_GetTick>
 8002484:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002486:	e00a      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002488:	f7fe fb30 	bl	8000aec <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e086      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x238>
 800249e:	2302      	movs	r3, #2
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	2302      	movs	r3, #2
 80024ac:	623b      	str	r3, [r7, #32]
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	61fb      	str	r3, [r7, #28]
  return result;
 80024b6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d102      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80024cc:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	e007      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80024d2:	2302      	movs	r3, #2
 80024d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	2202      	movs	r2, #2
 80024e4:	613a      	str	r2, [r7, #16]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	fa92 f2a2 	rbit	r2, r2
 80024ec:	60fa      	str	r2, [r7, #12]
  return result;
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	fab2 f282 	clz	r2, r2
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	f002 021f 	and.w	r2, r2, #31
 8002500:	2101      	movs	r1, #1
 8002502:	fa01 f202 	lsl.w	r2, r1, r2
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0bd      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4926      	ldr	r1, [pc, #152]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800251a:	4313      	orrs	r3, r2
 800251c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800251e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002522:	2b01      	cmp	r3, #1
 8002524:	d105      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002526:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a22      	ldr	r2, [pc, #136]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800252c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002530:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f023 0203 	bic.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	491a      	ldr	r1, [pc, #104]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800254c:	4313      	orrs	r3, r2
 800254e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	f023 0210 	bic.w	r2, r3, #16
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4912      	ldr	r1, [pc, #72]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800256a:	4313      	orrs	r3, r2
 800256c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800257a:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	490b      	ldr	r1, [pc, #44]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002588:	4313      	orrs	r3, r2
 800258a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4903      	ldr	r1, [pc, #12]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3748      	adds	r7, #72	; 0x48
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
 80025bc:	10908100 	.word	0x10908100

080025c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e040      	b.n	8002654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe f93a 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2224      	movs	r2, #36	; 0x24
 80025ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fc00 	bl	8002e04 <UART_SetConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e022      	b.n	8002654 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fd2a 	bl	8003070 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800262a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800263a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fdb1 	bl	80031b4 <UART_CheckIdleState>
 8002652:	4603      	mov	r3, r0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	; 0x28
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002670:	2b20      	cmp	r3, #32
 8002672:	d178      	bne.n	8002766 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_UART_Transmit+0x24>
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e071      	b.n	8002768 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2221      	movs	r2, #33	; 0x21
 8002690:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002692:	f7fe fa2b 	bl	8000aec <HAL_GetTick>
 8002696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	88fa      	ldrh	r2, [r7, #6]
 80026a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b0:	d108      	bne.n	80026c4 <HAL_UART_Transmit+0x68>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d104      	bne.n	80026c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	e003      	b.n	80026cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026cc:	e030      	b.n	8002730 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2200      	movs	r2, #0
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 fe13 	bl	8003304 <UART_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e03c      	b.n	8002768 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	881a      	ldrh	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002700:	b292      	uxth	r2, r2
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	3302      	adds	r3, #2
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	e008      	b.n	800271e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	b292      	uxth	r2, r2
 8002716:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	3301      	adds	r3, #1
 800271c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1c8      	bne.n	80026ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2200      	movs	r2, #0
 8002744:	2140      	movs	r1, #64	; 0x40
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fddc 	bl	8003304 <UART_WaitOnFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d004      	beq.n	800275c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e005      	b.n	8002768 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
  }
}
 8002768:	4618      	mov	r0, r3
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	4613      	mov	r3, r2
 800277c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002784:	2b20      	cmp	r3, #32
 8002786:	d132      	bne.n	80027ee <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_UART_Receive_IT+0x24>
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e02b      	b.n	80027f0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d018      	beq.n	80027de <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	e853 3f00 	ldrex	r3, [r3]
 80027b8:	613b      	str	r3, [r7, #16]
   return(result);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	623b      	str	r3, [r7, #32]
 80027cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ce:	69f9      	ldr	r1, [r7, #28]
 80027d0:	6a3a      	ldr	r2, [r7, #32]
 80027d2:	e841 2300 	strex	r3, r2, [r1]
 80027d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1e6      	bne.n	80027ac <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	461a      	mov	r2, r3
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 fdf5 	bl	80033d4 <UART_Start_Receive_IT>
 80027ea:	4603      	mov	r3, r0
 80027ec:	e000      	b.n	80027f0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80027ee:	2302      	movs	r3, #2
  }
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3728      	adds	r7, #40	; 0x28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b0ba      	sub	sp, #232	; 0xe8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800281e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002822:	f640 030f 	movw	r3, #2063	; 0x80f
 8002826:	4013      	ands	r3, r2
 8002828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800282c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d115      	bne.n	8002860 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00f      	beq.n	8002860 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b00      	cmp	r3, #0
 800284a:	d009      	beq.n	8002860 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 82ab 	beq.w	8002dac <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	4798      	blx	r3
      }
      return;
 800285e:	e2a5      	b.n	8002dac <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002860:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8117 	beq.w	8002a98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800286a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002876:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800287a:	4b85      	ldr	r3, [pc, #532]	; (8002a90 <HAL_UART_IRQHandler+0x298>)
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 810a 	beq.w	8002a98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d011      	beq.n	80028b4 <HAL_UART_IRQHandler+0xbc>
 8002890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00b      	beq.n	80028b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2201      	movs	r2, #1
 80028a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d011      	beq.n	80028e4 <HAL_UART_IRQHandler+0xec>
 80028c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00b      	beq.n	80028e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2202      	movs	r2, #2
 80028d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028da:	f043 0204 	orr.w	r2, r3, #4
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d011      	beq.n	8002914 <HAL_UART_IRQHandler+0x11c>
 80028f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00b      	beq.n	8002914 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2204      	movs	r2, #4
 8002902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800290a:	f043 0202 	orr.w	r2, r3, #2
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d017      	beq.n	8002950 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d105      	bne.n	8002938 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800292c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002930:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00b      	beq.n	8002950 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2208      	movs	r2, #8
 800293e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002946:	f043 0208 	orr.w	r2, r3, #8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002958:	2b00      	cmp	r3, #0
 800295a:	d012      	beq.n	8002982 <HAL_UART_IRQHandler+0x18a>
 800295c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002960:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00c      	beq.n	8002982 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002978:	f043 0220 	orr.w	r2, r3, #32
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8211 	beq.w	8002db0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800298e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00d      	beq.n	80029b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800299a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d005      	beq.n	80029da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d04f      	beq.n	8002a7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fdc0 	bl	8003560 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ea:	2b40      	cmp	r3, #64	; 0x40
 80029ec:	d141      	bne.n	8002a72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3308      	adds	r3, #8
 80029f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029fc:	e853 3f00 	ldrex	r3, [r3]
 8002a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3308      	adds	r3, #8
 8002a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a2a:	e841 2300 	strex	r3, r2, [r1]
 8002a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1d9      	bne.n	80029ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d013      	beq.n	8002a6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a46:	4a13      	ldr	r2, [pc, #76]	; (8002a94 <HAL_UART_IRQHandler+0x29c>)
 8002a48:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe f9a2 	bl	8000d98 <HAL_DMA_Abort_IT>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d017      	beq.n	8002a8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a64:	4610      	mov	r0, r2
 8002a66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a68:	e00f      	b.n	8002a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f9b4 	bl	8002dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a70:	e00b      	b.n	8002a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f9b0 	bl	8002dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a78:	e007      	b.n	8002a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f9ac 	bl	8002dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002a88:	e192      	b.n	8002db0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8a:	bf00      	nop
    return;
 8002a8c:	e190      	b.n	8002db0 <HAL_UART_IRQHandler+0x5b8>
 8002a8e:	bf00      	nop
 8002a90:	04000120 	.word	0x04000120
 8002a94:	08003629 	.word	0x08003629

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	f040 814b 	bne.w	8002d38 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8144 	beq.w	8002d38 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 813d 	beq.w	8002d38 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2210      	movs	r2, #16
 8002ac4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad0:	2b40      	cmp	r3, #64	; 0x40
 8002ad2:	f040 80b5 	bne.w	8002c40 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ae2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8164 	beq.w	8002db4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002af6:	429a      	cmp	r2, r3
 8002af8:	f080 815c 	bcs.w	8002db4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	f000 8086 	beq.w	8002c1e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b1e:	e853 3f00 	ldrex	r3, [r3]
 8002b22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b40:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b4c:	e841 2300 	strex	r3, r2, [r1]
 8002b50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1da      	bne.n	8002b12 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3308      	adds	r3, #8
 8002b62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b66:	e853 3f00 	ldrex	r3, [r3]
 8002b6a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b8c:	e841 2300 	strex	r3, r2, [r1]
 8002b90:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1e1      	bne.n	8002b5c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ba2:	e853 3f00 	ldrex	r3, [r3]
 8002ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3308      	adds	r3, #8
 8002bb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002bbc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bc4:	e841 2300 	strex	r3, r2, [r1]
 8002bc8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002bca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e3      	bne.n	8002b98 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be6:	e853 3f00 	ldrex	r3, [r3]
 8002bea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bee:	f023 0310 	bic.w	r3, r3, #16
 8002bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c00:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c08:	e841 2300 	strex	r3, r2, [r1]
 8002c0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e4      	bne.n	8002bde <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe f884 	bl	8000d26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2202      	movs	r2, #2
 8002c22:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	4619      	mov	r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f8d7 	bl	8002dec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c3e:	e0b9      	b.n	8002db4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80ab 	beq.w	8002db8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002c62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80a6 	beq.w	8002db8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e4      	bne.n	8002c6c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	623b      	str	r3, [r7, #32]
   return(result);
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3308      	adds	r3, #8
 8002cc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cc6:	633a      	str	r2, [r7, #48]	; 0x30
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e3      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0310 	bic.w	r3, r3, #16
 8002d02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d14:	69b9      	ldr	r1, [r7, #24]
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	e841 2300 	strex	r3, r2, [r1]
 8002d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e4      	bne.n	8002cee <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f85b 	bl	8002dec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d36:	e03f      	b.n	8002db8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00e      	beq.n	8002d62 <HAL_UART_IRQHandler+0x56a>
 8002d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fe4c 	bl	80039f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d60:	e02d      	b.n	8002dbe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00e      	beq.n	8002d8c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01c      	beq.n	8002dbc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
    }
    return;
 8002d8a:	e017      	b.n	8002dbc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d012      	beq.n	8002dbe <HAL_UART_IRQHandler+0x5c6>
 8002d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00c      	beq.n	8002dbe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fc55 	bl	8003654 <UART_EndTransmit_IT>
    return;
 8002daa:	e008      	b.n	8002dbe <HAL_UART_IRQHandler+0x5c6>
      return;
 8002dac:	bf00      	nop
 8002dae:	e006      	b.n	8002dbe <HAL_UART_IRQHandler+0x5c6>
    return;
 8002db0:	bf00      	nop
 8002db2:	e004      	b.n	8002dbe <HAL_UART_IRQHandler+0x5c6>
      return;
 8002db4:	bf00      	nop
 8002db6:	e002      	b.n	8002dbe <HAL_UART_IRQHandler+0x5c6>
      return;
 8002db8:	bf00      	nop
 8002dba:	e000      	b.n	8002dbe <HAL_UART_IRQHandler+0x5c6>
    return;
 8002dbc:	bf00      	nop
  }

}
 8002dbe:	37e8      	adds	r7, #232	; 0xe8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4b8a      	ldr	r3, [pc, #552]	; (8003058 <UART_SetConfig+0x254>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	6979      	ldr	r1, [r7, #20]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a78      	ldr	r2, [pc, #480]	; (800305c <UART_SetConfig+0x258>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d120      	bne.n	8002ec2 <UART_SetConfig+0xbe>
 8002e80:	4b77      	ldr	r3, [pc, #476]	; (8003060 <UART_SetConfig+0x25c>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d817      	bhi.n	8002ebc <UART_SetConfig+0xb8>
 8002e8c:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x90>)
 8002e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e92:	bf00      	nop
 8002e94:	08002ea5 	.word	0x08002ea5
 8002e98:	08002eb1 	.word	0x08002eb1
 8002e9c:	08002eb7 	.word	0x08002eb7
 8002ea0:	08002eab 	.word	0x08002eab
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	77fb      	strb	r3, [r7, #31]
 8002ea8:	e01d      	b.n	8002ee6 <UART_SetConfig+0xe2>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	77fb      	strb	r3, [r7, #31]
 8002eae:	e01a      	b.n	8002ee6 <UART_SetConfig+0xe2>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	77fb      	strb	r3, [r7, #31]
 8002eb4:	e017      	b.n	8002ee6 <UART_SetConfig+0xe2>
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	77fb      	strb	r3, [r7, #31]
 8002eba:	e014      	b.n	8002ee6 <UART_SetConfig+0xe2>
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	77fb      	strb	r3, [r7, #31]
 8002ec0:	e011      	b.n	8002ee6 <UART_SetConfig+0xe2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a67      	ldr	r2, [pc, #412]	; (8003064 <UART_SetConfig+0x260>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d102      	bne.n	8002ed2 <UART_SetConfig+0xce>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e009      	b.n	8002ee6 <UART_SetConfig+0xe2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a64      	ldr	r2, [pc, #400]	; (8003068 <UART_SetConfig+0x264>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d102      	bne.n	8002ee2 <UART_SetConfig+0xde>
 8002edc:	2300      	movs	r3, #0
 8002ede:	77fb      	strb	r3, [r7, #31]
 8002ee0:	e001      	b.n	8002ee6 <UART_SetConfig+0xe2>
 8002ee2:	2310      	movs	r3, #16
 8002ee4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eee:	d15a      	bne.n	8002fa6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002ef0:	7ffb      	ldrb	r3, [r7, #31]
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d827      	bhi.n	8002f46 <UART_SetConfig+0x142>
 8002ef6:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <UART_SetConfig+0xf8>)
 8002ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efc:	08002f21 	.word	0x08002f21
 8002f00:	08002f29 	.word	0x08002f29
 8002f04:	08002f31 	.word	0x08002f31
 8002f08:	08002f47 	.word	0x08002f47
 8002f0c:	08002f37 	.word	0x08002f37
 8002f10:	08002f47 	.word	0x08002f47
 8002f14:	08002f47 	.word	0x08002f47
 8002f18:	08002f47 	.word	0x08002f47
 8002f1c:	08002f3f 	.word	0x08002f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f20:	f7ff f9e4 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8002f24:	61b8      	str	r0, [r7, #24]
        break;
 8002f26:	e013      	b.n	8002f50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f28:	f7ff fa02 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8002f2c:	61b8      	str	r0, [r7, #24]
        break;
 8002f2e:	e00f      	b.n	8002f50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f30:	4b4e      	ldr	r3, [pc, #312]	; (800306c <UART_SetConfig+0x268>)
 8002f32:	61bb      	str	r3, [r7, #24]
        break;
 8002f34:	e00c      	b.n	8002f50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f36:	f7ff f963 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 8002f3a:	61b8      	str	r0, [r7, #24]
        break;
 8002f3c:	e008      	b.n	8002f50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f42:	61bb      	str	r3, [r7, #24]
        break;
 8002f44:	e004      	b.n	8002f50 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	77bb      	strb	r3, [r7, #30]
        break;
 8002f4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d074      	beq.n	8003040 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	005a      	lsls	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	085b      	lsrs	r3, r3, #1
 8002f60:	441a      	add	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	d916      	bls.n	8002fa0 <UART_SetConfig+0x19c>
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f78:	d212      	bcs.n	8002fa0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f023 030f 	bic.w	r3, r3, #15
 8002f82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	89fb      	ldrh	r3, [r7, #14]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	89fa      	ldrh	r2, [r7, #14]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	e04f      	b.n	8003040 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	77bb      	strb	r3, [r7, #30]
 8002fa4:	e04c      	b.n	8003040 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fa6:	7ffb      	ldrb	r3, [r7, #31]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d828      	bhi.n	8002ffe <UART_SetConfig+0x1fa>
 8002fac:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <UART_SetConfig+0x1b0>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08002fd9 	.word	0x08002fd9
 8002fb8:	08002fe1 	.word	0x08002fe1
 8002fbc:	08002fe9 	.word	0x08002fe9
 8002fc0:	08002fff 	.word	0x08002fff
 8002fc4:	08002fef 	.word	0x08002fef
 8002fc8:	08002fff 	.word	0x08002fff
 8002fcc:	08002fff 	.word	0x08002fff
 8002fd0:	08002fff 	.word	0x08002fff
 8002fd4:	08002ff7 	.word	0x08002ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd8:	f7ff f988 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8002fdc:	61b8      	str	r0, [r7, #24]
        break;
 8002fde:	e013      	b.n	8003008 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fe0:	f7ff f9a6 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8002fe4:	61b8      	str	r0, [r7, #24]
        break;
 8002fe6:	e00f      	b.n	8003008 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe8:	4b20      	ldr	r3, [pc, #128]	; (800306c <UART_SetConfig+0x268>)
 8002fea:	61bb      	str	r3, [r7, #24]
        break;
 8002fec:	e00c      	b.n	8003008 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fee:	f7ff f907 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 8002ff2:	61b8      	str	r0, [r7, #24]
        break;
 8002ff4:	e008      	b.n	8003008 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffa:	61bb      	str	r3, [r7, #24]
        break;
 8002ffc:	e004      	b.n	8003008 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	77bb      	strb	r3, [r7, #30]
        break;
 8003006:	bf00      	nop
    }

    if (pclk != 0U)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d018      	beq.n	8003040 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	085a      	lsrs	r2, r3, #1
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	441a      	add	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b0f      	cmp	r3, #15
 8003026:	d909      	bls.n	800303c <UART_SetConfig+0x238>
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302e:	d205      	bcs.n	800303c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	b29a      	uxth	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	e001      	b.n	8003040 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800304c:	7fbb      	ldrb	r3, [r7, #30]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	efff69f3 	.word	0xefff69f3
 800305c:	40013800 	.word	0x40013800
 8003060:	40021000 	.word	0x40021000
 8003064:	40004400 	.word	0x40004400
 8003068:	40004800 	.word	0x40004800
 800306c:	007a1200 	.word	0x007a1200

08003070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01a      	beq.n	8003186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800316e:	d10a      	bne.n	8003186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	605a      	str	r2, [r3, #4]
  }
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b098      	sub	sp, #96	; 0x60
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031c4:	f7fd fc92 	bl	8000aec <HAL_GetTick>
 80031c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d12e      	bne.n	8003236 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e0:	2200      	movs	r2, #0
 80031e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f88c 	bl	8003304 <UART_WaitOnFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d021      	beq.n	8003236 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fa:	e853 3f00 	ldrex	r3, [r3]
 80031fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003206:	653b      	str	r3, [r7, #80]	; 0x50
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003210:	647b      	str	r3, [r7, #68]	; 0x44
 8003212:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003214:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003218:	e841 2300 	strex	r3, r2, [r1]
 800321c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800321e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e6      	bne.n	80031f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e062      	b.n	80032fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b04      	cmp	r3, #4
 8003242:	d149      	bne.n	80032d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324c:	2200      	movs	r2, #0
 800324e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f856 	bl	8003304 <UART_WaitOnFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d03c      	beq.n	80032d8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	e853 3f00 	ldrex	r3, [r3]
 800326a:	623b      	str	r3, [r7, #32]
   return(result);
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327c:	633b      	str	r3, [r7, #48]	; 0x30
 800327e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e6      	bne.n	800325e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3308      	adds	r3, #8
 8003296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	e853 3f00 	ldrex	r3, [r3]
 800329e:	60fb      	str	r3, [r7, #12]
   return(result);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3308      	adds	r3, #8
 80032ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032b0:	61fa      	str	r2, [r7, #28]
 80032b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b4:	69b9      	ldr	r1, [r7, #24]
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	e841 2300 	strex	r3, r2, [r1]
 80032bc:	617b      	str	r3, [r7, #20]
   return(result);
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e5      	bne.n	8003290 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e011      	b.n	80032fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3758      	adds	r7, #88	; 0x58
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	4613      	mov	r3, r2
 8003312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003314:	e049      	b.n	80033aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d045      	beq.n	80033aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331e:	f7fd fbe5 	bl	8000aec <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	429a      	cmp	r2, r3
 800332c:	d302      	bcc.n	8003334 <UART_WaitOnFlagUntilTimeout+0x30>
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e048      	b.n	80033ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d031      	beq.n	80033aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b08      	cmp	r3, #8
 8003352:	d110      	bne.n	8003376 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2208      	movs	r2, #8
 800335a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f8ff 	bl	8003560 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2208      	movs	r2, #8
 8003366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e029      	b.n	80033ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003384:	d111      	bne.n	80033aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800338e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f8e5 	bl	8003560 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e00f      	b.n	80033ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4013      	ands	r3, r2
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	bf0c      	ite	eq
 80033ba:	2301      	moveq	r3, #1
 80033bc:	2300      	movne	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d0a6      	beq.n	8003316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b097      	sub	sp, #92	; 0x5c
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	4613      	mov	r3, r2
 80033e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	88fa      	ldrh	r2, [r7, #6]
 80033ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003406:	d10e      	bne.n	8003426 <UART_Start_Receive_IT+0x52>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <UART_Start_Receive_IT+0x48>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003416:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800341a:	e02d      	b.n	8003478 <UART_Start_Receive_IT+0xa4>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	22ff      	movs	r2, #255	; 0xff
 8003420:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003424:	e028      	b.n	8003478 <UART_Start_Receive_IT+0xa4>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <UART_Start_Receive_IT+0x76>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <UART_Start_Receive_IT+0x6c>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	22ff      	movs	r2, #255	; 0xff
 800343a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800343e:	e01b      	b.n	8003478 <UART_Start_Receive_IT+0xa4>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	227f      	movs	r2, #127	; 0x7f
 8003444:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003448:	e016      	b.n	8003478 <UART_Start_Receive_IT+0xa4>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003452:	d10d      	bne.n	8003470 <UART_Start_Receive_IT+0x9c>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <UART_Start_Receive_IT+0x92>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	227f      	movs	r2, #127	; 0x7f
 8003460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003464:	e008      	b.n	8003478 <UART_Start_Receive_IT+0xa4>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	223f      	movs	r2, #63	; 0x3f
 800346a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800346e:	e003      	b.n	8003478 <UART_Start_Receive_IT+0xa4>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2222      	movs	r2, #34	; 0x22
 8003484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3308      	adds	r3, #8
 800348e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003492:	e853 3f00 	ldrex	r3, [r3]
 8003496:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	657b      	str	r3, [r7, #84]	; 0x54
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3308      	adds	r3, #8
 80034a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80034aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80034b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e5      	bne.n	8003488 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c4:	d107      	bne.n	80034d6 <UART_Start_Receive_IT+0x102>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a21      	ldr	r2, [pc, #132]	; (8003558 <UART_Start_Receive_IT+0x184>)
 80034d2:	669a      	str	r2, [r3, #104]	; 0x68
 80034d4:	e002      	b.n	80034dc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a20      	ldr	r2, [pc, #128]	; (800355c <UART_Start_Receive_IT+0x188>)
 80034da:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d019      	beq.n	8003518 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80034f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
 8003504:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e6      	bne.n	80034e4 <UART_Start_Receive_IT+0x110>
 8003516:	e018      	b.n	800354a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	e853 3f00 	ldrex	r3, [r3]
 8003524:	613b      	str	r3, [r7, #16]
   return(result);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f043 0320 	orr.w	r3, r3, #32
 800352c:	653b      	str	r3, [r7, #80]	; 0x50
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003536:	623b      	str	r3, [r7, #32]
 8003538:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	69f9      	ldr	r1, [r7, #28]
 800353c:	6a3a      	ldr	r2, [r7, #32]
 800353e:	e841 2300 	strex	r3, r2, [r1]
 8003542:	61bb      	str	r3, [r7, #24]
   return(result);
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e6      	bne.n	8003518 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	375c      	adds	r7, #92	; 0x5c
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	08003851 	.word	0x08003851
 800355c:	080036a9 	.word	0x080036a9

08003560 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003560:	b480      	push	{r7}
 8003562:	b095      	sub	sp, #84	; 0x54
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800357c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003586:	643b      	str	r3, [r7, #64]	; 0x40
 8003588:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800358c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800358e:	e841 2300 	strex	r3, r2, [r1]
 8003592:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1e6      	bne.n	8003568 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	3308      	adds	r3, #8
 80035a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	e853 3f00 	ldrex	r3, [r3]
 80035a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3308      	adds	r3, #8
 80035b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e5      	bne.n	800359a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d118      	bne.n	8003608 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	e853 3f00 	ldrex	r3, [r3]
 80035e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f023 0310 	bic.w	r3, r3, #16
 80035ea:	647b      	str	r3, [r7, #68]	; 0x44
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f8:	6979      	ldr	r1, [r7, #20]
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	e841 2300 	strex	r3, r2, [r1]
 8003600:	613b      	str	r3, [r7, #16]
   return(result);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e6      	bne.n	80035d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800361c:	bf00      	nop
 800361e:	3754      	adds	r7, #84	; 0x54
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7ff fbc6 	bl	8002dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	e853 3f00 	ldrex	r3, [r3]
 8003668:	60bb      	str	r3, [r7, #8]
   return(result);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	61bb      	str	r3, [r7, #24]
 800367c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367e:	6979      	ldr	r1, [r7, #20]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	613b      	str	r3, [r7, #16]
   return(result);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e6      	bne.n	800365c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2220      	movs	r2, #32
 8003692:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fb92 	bl	8002dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036a0:	bf00      	nop
 80036a2:	3720      	adds	r7, #32
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b09c      	sub	sp, #112	; 0x70
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036b6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c0:	2b22      	cmp	r3, #34	; 0x22
 80036c2:	f040 80b9 	bne.w	8003838 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80036d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80036d4:	b2d9      	uxtb	r1, r3
 80036d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	400a      	ands	r2, r1
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 809c 	bne.w	8003848 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003718:	e853 3f00 	ldrex	r3, [r3]
 800371c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800371e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003720:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003724:	66bb      	str	r3, [r7, #104]	; 0x68
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800372e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003730:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003734:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800373c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e6      	bne.n	8003710 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3308      	adds	r3, #8
 8003748:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003754:	f023 0301 	bic.w	r3, r3, #1
 8003758:	667b      	str	r3, [r7, #100]	; 0x64
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3308      	adds	r3, #8
 8003760:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003762:	647a      	str	r2, [r7, #68]	; 0x44
 8003764:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003768:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e5      	bne.n	8003742 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d018      	beq.n	80037ca <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	623b      	str	r3, [r7, #32]
   return(result);
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037ac:	663b      	str	r3, [r7, #96]	; 0x60
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037b6:	633b      	str	r3, [r7, #48]	; 0x30
 80037b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e6      	bne.n	8003798 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d12e      	bne.n	8003830 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f023 0310 	bic.w	r3, r3, #16
 80037ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	69b9      	ldr	r1, [r7, #24]
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	617b      	str	r3, [r7, #20]
   return(result);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e6      	bne.n	80037d8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b10      	cmp	r3, #16
 8003816:	d103      	bne.n	8003820 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2210      	movs	r2, #16
 800381e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff fadf 	bl	8002dec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800382e:	e00b      	b.n	8003848 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7fc ff8f 	bl	8000754 <HAL_UART_RxCpltCallback>
}
 8003836:	e007      	b.n	8003848 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0208 	orr.w	r2, r2, #8
 8003846:	619a      	str	r2, [r3, #24]
}
 8003848:	bf00      	nop
 800384a:	3770      	adds	r7, #112	; 0x70
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b09c      	sub	sp, #112	; 0x70
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800385e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003868:	2b22      	cmp	r3, #34	; 0x22
 800386a:	f040 80b9 	bne.w	80039e0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003874:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800387e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003882:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003886:	4013      	ands	r3, r2
 8003888:	b29a      	uxth	r2, r3
 800388a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800388c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	1c9a      	adds	r2, r3, #2
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 809c 	bne.w	80039f0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80038c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038cc:	667b      	str	r3, [r7, #100]	; 0x64
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038d6:	657b      	str	r3, [r7, #84]	; 0x54
 80038d8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80038dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80038e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e6      	bne.n	80038b8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3308      	adds	r3, #8
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f4:	e853 3f00 	ldrex	r3, [r3]
 80038f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	f023 0301 	bic.w	r3, r3, #1
 8003900:	663b      	str	r3, [r7, #96]	; 0x60
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3308      	adds	r3, #8
 8003908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800390a:	643a      	str	r2, [r7, #64]	; 0x40
 800390c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003910:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003912:	e841 2300 	strex	r3, r2, [r1]
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e5      	bne.n	80038ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d018      	beq.n	8003972 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	e853 3f00 	ldrex	r3, [r3]
 800394c:	61fb      	str	r3, [r7, #28]
   return(result);
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003960:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e6      	bne.n	8003940 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003976:	2b01      	cmp	r3, #1
 8003978:	d12e      	bne.n	80039d8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	60bb      	str	r3, [r7, #8]
   return(result);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f023 0310 	bic.w	r3, r3, #16
 8003994:	65bb      	str	r3, [r7, #88]	; 0x58
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	6979      	ldr	r1, [r7, #20]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	613b      	str	r3, [r7, #16]
   return(result);
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e6      	bne.n	8003980 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d103      	bne.n	80039c8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2210      	movs	r2, #16
 80039c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80039ce:	4619      	mov	r1, r3
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff fa0b 	bl	8002dec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039d6:	e00b      	b.n	80039f0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7fc febb 	bl	8000754 <HAL_UART_RxCpltCallback>
}
 80039de:	e007      	b.n	80039f0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0208 	orr.w	r2, r2, #8
 80039ee:	619a      	str	r2, [r3, #24]
}
 80039f0:	bf00      	nop
 80039f2:	3770      	adds	r7, #112	; 0x70
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <__libc_init_array>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	4d0d      	ldr	r5, [pc, #52]	; (8003a44 <__libc_init_array+0x38>)
 8003a10:	4c0d      	ldr	r4, [pc, #52]	; (8003a48 <__libc_init_array+0x3c>)
 8003a12:	1b64      	subs	r4, r4, r5
 8003a14:	10a4      	asrs	r4, r4, #2
 8003a16:	2600      	movs	r6, #0
 8003a18:	42a6      	cmp	r6, r4
 8003a1a:	d109      	bne.n	8003a30 <__libc_init_array+0x24>
 8003a1c:	4d0b      	ldr	r5, [pc, #44]	; (8003a4c <__libc_init_array+0x40>)
 8003a1e:	4c0c      	ldr	r4, [pc, #48]	; (8003a50 <__libc_init_array+0x44>)
 8003a20:	f000 f820 	bl	8003a64 <_init>
 8003a24:	1b64      	subs	r4, r4, r5
 8003a26:	10a4      	asrs	r4, r4, #2
 8003a28:	2600      	movs	r6, #0
 8003a2a:	42a6      	cmp	r6, r4
 8003a2c:	d105      	bne.n	8003a3a <__libc_init_array+0x2e>
 8003a2e:	bd70      	pop	{r4, r5, r6, pc}
 8003a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a34:	4798      	blx	r3
 8003a36:	3601      	adds	r6, #1
 8003a38:	e7ee      	b.n	8003a18 <__libc_init_array+0xc>
 8003a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3e:	4798      	blx	r3
 8003a40:	3601      	adds	r6, #1
 8003a42:	e7f2      	b.n	8003a2a <__libc_init_array+0x1e>
 8003a44:	08003af0 	.word	0x08003af0
 8003a48:	08003af0 	.word	0x08003af0
 8003a4c:	08003af0 	.word	0x08003af0
 8003a50:	08003af8 	.word	0x08003af8

08003a54 <memset>:
 8003a54:	4402      	add	r2, r0
 8003a56:	4603      	mov	r3, r0
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d100      	bne.n	8003a5e <memset+0xa>
 8003a5c:	4770      	bx	lr
 8003a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a62:	e7f9      	b.n	8003a58 <memset+0x4>

08003a64 <_init>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	bf00      	nop
 8003a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6a:	bc08      	pop	{r3}
 8003a6c:	469e      	mov	lr, r3
 8003a6e:	4770      	bx	lr

08003a70 <_fini>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	bf00      	nop
 8003a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a76:	bc08      	pop	{r3}
 8003a78:	469e      	mov	lr, r3
 8003a7a:	4770      	bx	lr
