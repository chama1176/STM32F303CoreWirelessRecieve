
STM32F303CoreWirelessRecieve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000428c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c4  080044c4  0002043c  2**0
                  CONTENTS
  4 .ARM          00000000  080044c4  080044c4  0002043c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044c4  080044c4  0002043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080044c4  080044c4  000144c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044d0  080044d0  000144d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  080044d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000043c  08004910  0002043c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  08004910  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8af  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f44  00000000  00000000  0002cd1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  0002ec60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  0002f480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1ae  00000000  00000000  0002fc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afd2  00000000  00000000  0004bdbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a900  00000000  00000000  00056d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1690  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a4  00000000  00000000  000f16e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000043c 	.word	0x2000043c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043fc 	.word	0x080043fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000440 	.word	0x20000440
 80001c4:	080043fc 	.word	0x080043fc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <_ZN11UsartBufferC1Ev>:
	uint32_t rp_;
	uint32_t wp_;
	uint32_t nl_count_;

public:
  UsartBuffer()
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  : rp_(0)
  , wp_(0)
  , nl_count_(0)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4618      	mov	r0, r3
 80001e4:	2380      	movs	r3, #128	; 0x80
 80001e6:	461a      	mov	r2, r3
 80001e8:	2100      	movs	r1, #0
 80001ea:	f004 f899 	bl	8004320 <memset>
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2200      	movs	r2, #0
 80001fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  {
  }
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4618      	mov	r0, r3
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <_ZN11UsartBuffer7enqueueEh>:
  bool enqueue(unsigned char data){
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	460b      	mov	r3, r1
 800021a:	70fb      	strb	r3, [r7, #3]
	  if(((wp_ - rp_) & (BUFFER_SIZE-1)) == (BUFFER_SIZE-1)){
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000228:	1ad3      	subs	r3, r2, r3
 800022a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800022e:	2b7f      	cmp	r3, #127	; 0x7f
 8000230:	d101      	bne.n	8000236 <_ZN11UsartBuffer7enqueueEh+0x26>
		  return false;
 8000232:	2300      	movs	r3, #0
 8000234:	e013      	b.n	800025e <_ZN11UsartBuffer7enqueueEh+0x4e>
	  }
	  if(data == NL_CODE){
 8000236:	78fb      	ldrb	r3, [r7, #3]
 8000238:	2b0d      	cmp	r3, #13
 800023a:	d106      	bne.n	800024a <_ZN11UsartBuffer7enqueueEh+0x3a>
		  ++nl_count_;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000242:	1c5a      	adds	r2, r3, #1
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  }
	  buffer_[wp_] = data;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000250:	687a      	ldr	r2, [r7, #4]
 8000252:	78f9      	ldrb	r1, [r7, #3]
 8000254:	54d1      	strb	r1, [r2, r3]
	  inc_wp();
 8000256:	6878      	ldr	r0, [r7, #4]
 8000258:	f000 f805 	bl	8000266 <_ZN11UsartBuffer6inc_wpEv>
	  return true;
 800025c:	2301      	movs	r3, #1
  }
 800025e:	4618      	mov	r0, r3
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}

08000266 <_ZN11UsartBuffer6inc_wpEv>:
  void inc_wp(){
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
	  wp_ = (++wp_) & (BUFFER_SIZE-1);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <_ZN11UsartBuffer6inc_rpEv>:
  void inc_rp(){
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	  rp_ = (++rp_) & (BUFFER_SIZE-1);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002a6:	1c5a      	adds	r2, r3, #1
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr

080002ca <_ZN11UsartBuffer7dequeueERh>:
  bool dequeue(unsigned char & data){
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b082      	sub	sp, #8
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	6078      	str	r0, [r7, #4]
 80002d2:	6039      	str	r1, [r7, #0]
	  if(rp_ == wp_){
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d101      	bne.n	80002e8 <_ZN11UsartBuffer7dequeueERh+0x1e>
		  return false;
 80002e4:	2300      	movs	r3, #0
 80002e6:	e018      	b.n	800031a <_ZN11UsartBuffer7dequeueERh+0x50>
	  }
	  if(buffer_[rp_] == NL_CODE){
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	5cd3      	ldrb	r3, [r2, r3]
 80002f2:	2b0d      	cmp	r3, #13
 80002f4:	d106      	bne.n	8000304 <_ZN11UsartBuffer7dequeueERh+0x3a>
		  --nl_count_;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002fc:	1e5a      	subs	r2, r3, #1
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  }
	  data = buffer_[rp_];
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	5cd2      	ldrb	r2, [r2, r3]
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	701a      	strb	r2, [r3, #0]
	  inc_rp();
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f7ff ffc0 	bl	8000298 <_ZN11UsartBuffer6inc_rpEv>
	  return true;
 8000318:	2301      	movs	r3, #1
  }
 800031a:	4618      	mov	r0, r3
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}

08000322 <_ZN11UsartBuffer8get_lineEPcm>:
  uint32_t get_line(char* buff, uint32_t len){
 8000322:	b580      	push	{r7, lr}
 8000324:	b086      	sub	sp, #24
 8000326:	af00      	add	r7, sp, #0
 8000328:	60f8      	str	r0, [r7, #12]
 800032a:	60b9      	str	r1, [r7, #8]
 800032c:	607a      	str	r2, [r7, #4]
	  uint32_t i = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]
	  while(1){
		  if(i == len) break;
 8000332:	697a      	ldr	r2, [r7, #20]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	429a      	cmp	r2, r3
 8000338:	d01b      	beq.n	8000372 <_ZN11UsartBuffer8get_lineEPcm+0x50>
		  uint8_t data = ' ';
 800033a:	2320      	movs	r3, #32
 800033c:	74bb      	strb	r3, [r7, #18]
		  bool res = dequeue(data);
 800033e:	f107 0312 	add.w	r3, r7, #18
 8000342:	4619      	mov	r1, r3
 8000344:	68f8      	ldr	r0, [r7, #12]
 8000346:	f7ff ffc0 	bl	80002ca <_ZN11UsartBuffer7dequeueERh>
 800034a:	4603      	mov	r3, r0
 800034c:	74fb      	strb	r3, [r7, #19]
		  if(!res) break;
 800034e:	7cfb      	ldrb	r3, [r7, #19]
 8000350:	f083 0301 	eor.w	r3, r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d10d      	bne.n	8000376 <_ZN11UsartBuffer8get_lineEPcm+0x54>
		  else buff[i] = data;
 800035a:	68ba      	ldr	r2, [r7, #8]
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	4413      	add	r3, r2
 8000360:	7cba      	ldrb	r2, [r7, #18]
 8000362:	701a      	strb	r2, [r3, #0]
		  ++i;
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	3301      	adds	r3, #1
 8000368:	617b      	str	r3, [r7, #20]
		  if(data == NL_CODE) break;
 800036a:	7cbb      	ldrb	r3, [r7, #18]
 800036c:	2b0d      	cmp	r3, #13
 800036e:	d004      	beq.n	800037a <_ZN11UsartBuffer8get_lineEPcm+0x58>
	  }
 8000370:	e7df      	b.n	8000332 <_ZN11UsartBuffer8get_lineEPcm+0x10>
		  if(i == len) break;
 8000372:	bf00      	nop
 8000374:	e002      	b.n	800037c <_ZN11UsartBuffer8get_lineEPcm+0x5a>
		  if(!res) break;
 8000376:	bf00      	nop
 8000378:	e000      	b.n	800037c <_ZN11UsartBuffer8get_lineEPcm+0x5a>
		  if(data == NL_CODE) break;
 800037a:	bf00      	nop
	  return i;
 800037c:	697b      	ldr	r3, [r7, #20]
  }
 800037e:	4618      	mov	r0, r3
 8000380:	3718      	adds	r7, #24
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <_ZN11UsartBuffer8nl_countEv>:
  uint32_t nl_count(){
 8000386:	b480      	push	{r7}
 8000388:	b083      	sub	sp, #12
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
	  return nl_count_;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  }
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <_ZN21CoreWirelessControlRx8char2intERc>:
	bool buttons_[16] = {};
	char test_;

	// original func for minimum flash size
	// input char should be a-f,0-9,A-F
	inline uint8_t char2int(char & c) {
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
		int8_t ans = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	73fb      	strb	r3, [r7, #15]
		if('a' <= c && c <= 'f'){
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b60      	cmp	r3, #96	; 0x60
 80003b4:	d909      	bls.n	80003ca <_ZN21CoreWirelessControlRx8char2intERc+0x2a>
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b66      	cmp	r3, #102	; 0x66
 80003bc:	d805      	bhi.n	80003ca <_ZN21CoreWirelessControlRx8char2intERc+0x2a>
			ans = c - 'a' + 10;
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	3b57      	subs	r3, #87	; 0x57
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	73fb      	strb	r3, [r7, #15]
 80003c8:	e01a      	b.n	8000400 <_ZN21CoreWirelessControlRx8char2intERc+0x60>
		} else if('A' <= c && c <= 'F'){
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b40      	cmp	r3, #64	; 0x40
 80003d0:	d909      	bls.n	80003e6 <_ZN21CoreWirelessControlRx8char2intERc+0x46>
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b46      	cmp	r3, #70	; 0x46
 80003d8:	d805      	bhi.n	80003e6 <_ZN21CoreWirelessControlRx8char2intERc+0x46>
			ans = c - 'A' + 10;
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	3b37      	subs	r3, #55	; 0x37
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	73fb      	strb	r3, [r7, #15]
 80003e4:	e00c      	b.n	8000400 <_ZN21CoreWirelessControlRx8char2intERc+0x60>
		} else if('0' <= c && c <= '9'){
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b2f      	cmp	r3, #47	; 0x2f
 80003ec:	d908      	bls.n	8000400 <_ZN21CoreWirelessControlRx8char2intERc+0x60>
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b39      	cmp	r3, #57	; 0x39
 80003f4:	d804      	bhi.n	8000400 <_ZN21CoreWirelessControlRx8char2intERc+0x60>
			ans = c - '0';
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	3b30      	subs	r3, #48	; 0x30
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	73fb      	strb	r3, [r7, #15]
		}
		return ans;
 8000400:	7bfb      	ldrb	r3, [r7, #15]
	}
 8000402:	4618      	mov	r0, r3
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <_ZN21CoreWirelessControlRxC1EP11UsartBuffer>:

public:
  CoreWirelessControlRx(UsartBuffer * usart)
 800040e:	b480      	push	{r7}
 8000410:	b083      	sub	sp, #12
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
 8000416:	6039      	str	r1, [r7, #0]
  {
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3304      	adds	r3, #4
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	811a      	strh	r2, [r3, #8]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	330e      	adds	r3, #14
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
	  usart_ = usart;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	683a      	ldr	r2, [r7, #0]
 8000436:	601a      	str	r2, [r3, #0]
  }
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <_ZN21CoreWirelessControlRx5parseEv>:
  bool parse(){
 8000446:	b590      	push	{r4, r7, lr}
 8000448:	b093      	sub	sp, #76	; 0x4c
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]

    // parse when buffer has new line code
    if(usart_->nl_count() <= 0){
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff97 	bl	8000386 <_ZN11UsartBuffer8nl_countEv>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	bf0c      	ite	eq
 800045e:	2301      	moveq	r3, #1
 8000460:	2300      	movne	r3, #0
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <_ZN21CoreWirelessControlRx5parseEv+0x26>
    	return false;
 8000468:	2300      	movs	r3, #0
 800046a:	e11d      	b.n	80006a8 <_ZN21CoreWirelessControlRx5parseEv+0x262>
    }
    char data[40] = {};
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	2224      	movs	r2, #36	; 0x24
 8000476:	2100      	movs	r1, #0
 8000478:	4618      	mov	r0, r3
 800047a:	f003 ff51 	bl	8004320 <memset>
    uint32_t len = usart_->get_line(data, 40);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f107 010c 	add.w	r1, r7, #12
 8000486:	2228      	movs	r2, #40	; 0x28
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff4a 	bl	8000322 <_ZN11UsartBuffer8get_lineEPcm>
 800048e:	63b8      	str	r0, [r7, #56]	; 0x38
    if(len < 35){
 8000490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000492:	2b22      	cmp	r3, #34	; 0x22
 8000494:	d801      	bhi.n	800049a <_ZN21CoreWirelessControlRx5parseEv+0x54>
     return false;
 8000496:	2300      	movs	r3, #0
 8000498:	e106      	b.n	80006a8 <_ZN21CoreWirelessControlRx5parseEv+0x262>
    }
    uint32_t idx = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	647b      	str	r3, [r7, #68]	; 0x44
    while(1){
	  if(len < idx + 35){
 800049e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004a0:	3323      	adds	r3, #35	; 0x23
 80004a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d201      	bcs.n	80004ac <_ZN21CoreWirelessControlRx5parseEv+0x66>
		 return false;
 80004a8:	2300      	movs	r3, #0
 80004aa:	e0fd      	b.n	80006a8 <_ZN21CoreWirelessControlRx5parseEv+0x262>
	  }
	  if(data[idx] == '0' && data[idx+1] == '0' && data[idx+34] == '\r') {
 80004ac:	f107 020c 	add.w	r2, r7, #12
 80004b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004b2:	4413      	add	r3, r2
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b30      	cmp	r3, #48	; 0x30
 80004b8:	f040 80f1 	bne.w	800069e <_ZN21CoreWirelessControlRx5parseEv+0x258>
 80004bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004be:	3301      	adds	r3, #1
 80004c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80004c4:	4413      	add	r3, r2
 80004c6:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80004ca:	2b30      	cmp	r3, #48	; 0x30
 80004cc:	f040 80e7 	bne.w	800069e <_ZN21CoreWirelessControlRx5parseEv+0x258>
 80004d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004d2:	3322      	adds	r3, #34	; 0x22
 80004d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80004d8:	4413      	add	r3, r2
 80004da:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80004de:	2b0d      	cmp	r3, #13
 80004e0:	f040 80dd 	bne.w	800069e <_ZN21CoreWirelessControlRx5parseEv+0x258>

		for(int i = 0; i < 5; ++i){
 80004e4:	2300      	movs	r3, #0
 80004e6:	643b      	str	r3, [r7, #64]	; 0x40
 80004e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	dc2f      	bgt.n	800054e <_ZN21CoreWirelessControlRx5parseEv+0x108>
			axis_[i] = (int8_t)((char2int(data[idx+14+i*3]) << 4) | char2int(data[idx+15+i*3]));
 80004ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80004f0:	4613      	mov	r3, r2
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	4413      	add	r3, r2
 80004f6:	461a      	mov	r2, r3
 80004f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004fa:	4413      	add	r3, r2
 80004fc:	330e      	adds	r3, #14
 80004fe:	f107 020c 	add.w	r2, r7, #12
 8000502:	4413      	add	r3, r2
 8000504:	4619      	mov	r1, r3
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ff4a 	bl	80003a0 <_ZN21CoreWirelessControlRx8char2intERc>
 800050c:	4603      	mov	r3, r0
 800050e:	011b      	lsls	r3, r3, #4
 8000510:	b25c      	sxtb	r4, r3
 8000512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000514:	4613      	mov	r3, r2
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	4413      	add	r3, r2
 800051a:	461a      	mov	r2, r3
 800051c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800051e:	4413      	add	r3, r2
 8000520:	330f      	adds	r3, #15
 8000522:	f107 020c 	add.w	r2, r7, #12
 8000526:	4413      	add	r3, r2
 8000528:	4619      	mov	r1, r3
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f7ff ff38 	bl	80003a0 <_ZN21CoreWirelessControlRx8char2intERc>
 8000530:	4603      	mov	r3, r0
 8000532:	b25b      	sxtb	r3, r3
 8000534:	4323      	orrs	r3, r4
 8000536:	b25b      	sxtb	r3, r3
 8000538:	b219      	sxth	r1, r3
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	4413      	add	r3, r2
 8000542:	460a      	mov	r2, r1
 8000544:	809a      	strh	r2, [r3, #4]
		for(int i = 0; i < 5; ++i){
 8000546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000548:	3301      	adds	r3, #1
 800054a:	643b      	str	r3, [r7, #64]	; 0x40
 800054c:	e7cc      	b.n	80004e8 <_ZN21CoreWirelessControlRx5parseEv+0xa2>
		}
		for(int i = 0; i < 2; ++i){
 800054e:	2300      	movs	r3, #0
 8000550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000554:	2b01      	cmp	r3, #1
 8000556:	f300 80a0 	bgt.w	800069a <_ZN21CoreWirelessControlRx5parseEv+0x254>
			uint8_t a1 = char2int(data[idx+29+i*3]);
 800055a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800055c:	4613      	mov	r3, r2
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	4413      	add	r3, r2
 8000562:	461a      	mov	r2, r3
 8000564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000566:	4413      	add	r3, r2
 8000568:	331d      	adds	r3, #29
 800056a:	f107 020c 	add.w	r2, r7, #12
 800056e:	4413      	add	r3, r2
 8000570:	4619      	mov	r1, r3
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff ff14 	bl	80003a0 <_ZN21CoreWirelessControlRx8char2intERc>
 8000578:	4603      	mov	r3, r0
 800057a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			uint8_t a2 = char2int(data[idx+30+i*3]);
 800057e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000580:	4613      	mov	r3, r2
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	4413      	add	r3, r2
 8000586:	461a      	mov	r2, r3
 8000588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800058a:	4413      	add	r3, r2
 800058c:	331e      	adds	r3, #30
 800058e:	f107 020c 	add.w	r2, r7, #12
 8000592:	4413      	add	r3, r2
 8000594:	4619      	mov	r1, r3
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff ff02 	bl	80003a0 <_ZN21CoreWirelessControlRx8char2intERc>
 800059c:	4603      	mov	r3, r0
 800059e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			buttons_[0+i] = (a1 & 0x1) >> 0;
 80005a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	bf14      	ite	ne
 80005ae:	2301      	movne	r3, #1
 80005b0:	2300      	moveq	r3, #0
 80005b2:	b2d9      	uxtb	r1, r3
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005b8:	4413      	add	r3, r2
 80005ba:	330e      	adds	r3, #14
 80005bc:	460a      	mov	r2, r1
 80005be:	701a      	strb	r2, [r3, #0]
			buttons_[1+i] = (a1 & 0x2) >> 1;
 80005c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005c4:	f003 0202 	and.w	r2, r3, #2
 80005c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005ca:	3301      	adds	r3, #1
 80005cc:	2a00      	cmp	r2, #0
 80005ce:	bf14      	ite	ne
 80005d0:	2201      	movne	r2, #1
 80005d2:	2200      	moveq	r2, #0
 80005d4:	b2d1      	uxtb	r1, r2
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	460a      	mov	r2, r1
 80005dc:	739a      	strb	r2, [r3, #14]
			buttons_[2+i] = (a1 & 0x4) >> 2;
 80005de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005e2:	f003 0204 	and.w	r2, r3, #4
 80005e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005e8:	3302      	adds	r3, #2
 80005ea:	2a00      	cmp	r2, #0
 80005ec:	bf14      	ite	ne
 80005ee:	2201      	movne	r2, #1
 80005f0:	2200      	moveq	r2, #0
 80005f2:	b2d1      	uxtb	r1, r2
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	4413      	add	r3, r2
 80005f8:	460a      	mov	r2, r1
 80005fa:	739a      	strb	r2, [r3, #14]
			buttons_[3+i] = (a1 & 0x8) >> 3;
 80005fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000600:	f003 0208 	and.w	r2, r3, #8
 8000604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000606:	3303      	adds	r3, #3
 8000608:	2a00      	cmp	r2, #0
 800060a:	bf14      	ite	ne
 800060c:	2201      	movne	r2, #1
 800060e:	2200      	moveq	r2, #0
 8000610:	b2d1      	uxtb	r1, r2
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	460a      	mov	r2, r1
 8000618:	739a      	strb	r2, [r3, #14]

			buttons_[4+i] = (a2 & 0x1) >> 0;
 800061a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800061e:	f003 0201 	and.w	r2, r3, #1
 8000622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000624:	3304      	adds	r3, #4
 8000626:	2a00      	cmp	r2, #0
 8000628:	bf14      	ite	ne
 800062a:	2201      	movne	r2, #1
 800062c:	2200      	moveq	r2, #0
 800062e:	b2d1      	uxtb	r1, r2
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	460a      	mov	r2, r1
 8000636:	739a      	strb	r2, [r3, #14]
			buttons_[5+i] = (a2 & 0x2) >> 1;
 8000638:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800063c:	f003 0202 	and.w	r2, r3, #2
 8000640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000642:	3305      	adds	r3, #5
 8000644:	2a00      	cmp	r2, #0
 8000646:	bf14      	ite	ne
 8000648:	2201      	movne	r2, #1
 800064a:	2200      	moveq	r2, #0
 800064c:	b2d1      	uxtb	r1, r2
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	460a      	mov	r2, r1
 8000654:	739a      	strb	r2, [r3, #14]
			buttons_[6+i] = (a2 & 0x4) >> 2;
 8000656:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800065a:	f003 0204 	and.w	r2, r3, #4
 800065e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000660:	3306      	adds	r3, #6
 8000662:	2a00      	cmp	r2, #0
 8000664:	bf14      	ite	ne
 8000666:	2201      	movne	r2, #1
 8000668:	2200      	moveq	r2, #0
 800066a:	b2d1      	uxtb	r1, r2
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	460a      	mov	r2, r1
 8000672:	739a      	strb	r2, [r3, #14]
			buttons_[7+i] = (a2 & 0x8) >> 3;
 8000674:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000678:	f003 0208 	and.w	r2, r3, #8
 800067c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067e:	3307      	adds	r3, #7
 8000680:	2a00      	cmp	r2, #0
 8000682:	bf14      	ite	ne
 8000684:	2201      	movne	r2, #1
 8000686:	2200      	moveq	r2, #0
 8000688:	b2d1      	uxtb	r1, r2
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	460a      	mov	r2, r1
 8000690:	739a      	strb	r2, [r3, #14]
		for(int i = 0; i < 2; ++i){
 8000692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000694:	3301      	adds	r3, #1
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000698:	e75b      	b.n	8000552 <_ZN21CoreWirelessControlRx5parseEv+0x10c>
		}
	    return true;
 800069a:	2301      	movs	r3, #1
 800069c:	e004      	b.n	80006a8 <_ZN21CoreWirelessControlRx5parseEv+0x262>
	  } else{
		++idx;
 800069e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006a0:	3301      	adds	r3, #1
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
		continue;
 80006a4:	bf00      	nop
	  }
	}
 80006a6:	e6fa      	b.n	800049e <_ZN21CoreWirelessControlRx5parseEv+0x58>
	return true;
  }
 80006a8:	4618      	mov	r0, r3
 80006aa:	374c      	adds	r7, #76	; 0x4c
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd90      	pop	{r4, r7, pc}

080006b0 <_ZN21CoreWirelessControlRx4axisEh>:
  uint8_t test(){
	  char tmp = test_;
	  test_ = '\r';
	  return tmp;
  }
  int16_t axis(uint8_t i){
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
	  if(i < 5) return axis_[i];
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d806      	bhi.n	80006d0 <_ZN21CoreWirelessControlRx4axisEh+0x20>
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80006ce:	e000      	b.n	80006d2 <_ZN21CoreWirelessControlRx4axisEh+0x22>
	  return 0;
 80006d0:	2300      	movs	r3, #0
  }
 80006d2:	4618      	mov	r0, r3
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <_ZN21CoreWirelessControlRx6buttonEh>:
  bool button(uint8_t i){
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	460b      	mov	r3, r1
 80006e8:	70fb      	strb	r3, [r7, #3]
	  if(i < 8) return buttons_[i];
 80006ea:	78fb      	ldrb	r3, [r7, #3]
 80006ec:	2b07      	cmp	r3, #7
 80006ee:	d804      	bhi.n	80006fa <_ZN21CoreWirelessControlRx6buttonEh+0x1c>
 80006f0:	78fb      	ldrb	r3, [r7, #3]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	7b9b      	ldrb	r3, [r3, #14]
 80006f8:	e000      	b.n	80006fc <_ZN21CoreWirelessControlRx6buttonEh+0x1e>
	  return 0;
 80006fa:	2300      	movs	r3, #0
  }
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <_Z9uart_putch>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rxed_byte_data;
UsartBuffer ub;

void uart_putc(uint8_t c){
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	char buf[1];
	buf[0] = c;
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8000716:	f107 010c 	add.w	r1, r7, #12
 800071a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800071e:	2201      	movs	r2, #1
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <_Z9uart_putch+0x28>)
 8000722:	f002 fc01 	bl	8002f28 <HAL_UART_Transmit>
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200004e0 	.word	0x200004e0

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000738:	b098      	sub	sp, #96	; 0x60
 800073a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fde2 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f934 	bl	80009ac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f000 f9fc 	bl	8000b40 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000748:	f000 f9c6 	bl	8000ad8 <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 800074c:	f000 f990 	bl	8000a70 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  xdev_out(uart_putc);
 8000750:	4b8c      	ldr	r3, [pc, #560]	; (8000984 <main+0x250>)
 8000752:	4a8d      	ldr	r2, [pc, #564]	; (8000988 <main+0x254>)
 8000754:	601a      	str	r2, [r3, #0]
  CoreWirelessControlRx cwcr(&ub);
 8000756:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800075a:	498c      	ldr	r1, [pc, #560]	; (800098c <main+0x258>)
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fe56 	bl	800040e <_ZN21CoreWirelessControlRxC1EP11UsartBuffer>
  HAL_UART_Receive_IT(&huart1, &rxed_byte_data, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	498a      	ldr	r1, [pc, #552]	; (8000990 <main+0x25c>)
 8000766:	488b      	ldr	r0, [pc, #556]	; (8000994 <main+0x260>)
 8000768:	f002 fc68 	bl	800303c <HAL_UART_Receive_IT>
  uint32_t  last_processed_time = HAL_GetTick();
 800076c:	f000 fe24 	bl	80013b8 <HAL_GetTick>
 8000770:	6578      	str	r0, [r7, #84]	; 0x54
  while (1)
  {
	  if(cwcr.parse() == true){
 8000772:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fe65 	bl	8000446 <_ZN21CoreWirelessControlRx5parseEv>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	bf0c      	ite	eq
 8000782:	2301      	moveq	r3, #1
 8000784:	2300      	movne	r3, #0
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	f000 80d6 	beq.w	800093a <main+0x206>
		  const uint8_t tx_fail[] = "!--\r\n";
 800078e:	4a82      	ldr	r2, [pc, #520]	; (8000998 <main+0x264>)
 8000790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000794:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000798:	6018      	str	r0, [r3, #0]
 800079a:	3304      	adds	r3, #4
 800079c:	8019      	strh	r1, [r3, #0]
		  HAL_UART_Transmit(&huart2, tx_fail, sizeof(tx_fail), 10);
 800079e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80007a2:	230a      	movs	r3, #10
 80007a4:	2206      	movs	r2, #6
 80007a6:	487d      	ldr	r0, [pc, #500]	; (800099c <main+0x268>)
 80007a8:	f002 fbbe 	bl	8002f28 <HAL_UART_Transmit>
		  xprintf("%d, %d, %d, %d, %d\r\n", cwcr.axis(0), cwcr.axis(1), cwcr.axis(2), cwcr.axis(3), cwcr.axis(4));
 80007ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff7c 	bl	80006b0 <_ZN21CoreWirelessControlRx4axisEh>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461d      	mov	r5, r3
 80007bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007c0:	2101      	movs	r1, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff74 	bl	80006b0 <_ZN21CoreWirelessControlRx4axisEh>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461e      	mov	r6, r3
 80007cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007d0:	2102      	movs	r1, #2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff6c 	bl	80006b0 <_ZN21CoreWirelessControlRx4axisEh>
 80007d8:	4603      	mov	r3, r0
 80007da:	4698      	mov	r8, r3
 80007dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007e0:	2103      	movs	r1, #3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff64 	bl	80006b0 <_ZN21CoreWirelessControlRx4axisEh>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461c      	mov	r4, r3
 80007ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007f0:	2104      	movs	r1, #4
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff5c 	bl	80006b0 <_ZN21CoreWirelessControlRx4axisEh>
 80007f8:	4603      	mov	r3, r0
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	9400      	str	r4, [sp, #0]
 80007fe:	4643      	mov	r3, r8
 8000800:	4632      	mov	r2, r6
 8000802:	4629      	mov	r1, r5
 8000804:	4866      	ldr	r0, [pc, #408]	; (80009a0 <main+0x26c>)
 8000806:	f000 fd3b 	bl	8001280 <xprintf>
		  xprintf("%d, %d, %d, %d\r\n", cwcr.button(0), cwcr.button(1), cwcr.button(2), cwcr.button(3));
 800080a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff64 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 8000816:	4603      	mov	r3, r0
 8000818:	461c      	mov	r4, r3
 800081a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800081e:	2101      	movs	r1, #1
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff5c 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 8000826:	4603      	mov	r3, r0
 8000828:	461d      	mov	r5, r3
 800082a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800082e:	2102      	movs	r1, #2
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff54 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 8000836:	4603      	mov	r3, r0
 8000838:	461e      	mov	r6, r3
 800083a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800083e:	2103      	movs	r1, #3
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff4c 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 8000846:	4603      	mov	r3, r0
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	4633      	mov	r3, r6
 800084c:	462a      	mov	r2, r5
 800084e:	4621      	mov	r1, r4
 8000850:	4854      	ldr	r0, [pc, #336]	; (80009a4 <main+0x270>)
 8000852:	f000 fd15 	bl	8001280 <xprintf>
		  xprintf("%d, %d, %d, %d\r\n", cwcr.button(4), cwcr.button(5), cwcr.button(6), cwcr.button(7));
 8000856:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800085a:	2104      	movs	r1, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff3e 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 8000862:	4603      	mov	r3, r0
 8000864:	461c      	mov	r4, r3
 8000866:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800086a:	2105      	movs	r1, #5
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff36 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 8000872:	4603      	mov	r3, r0
 8000874:	461d      	mov	r5, r3
 8000876:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800087a:	2106      	movs	r1, #6
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff2e 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 8000882:	4603      	mov	r3, r0
 8000884:	461e      	mov	r6, r3
 8000886:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800088a:	2107      	movs	r1, #7
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff26 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 8000892:	4603      	mov	r3, r0
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	4633      	mov	r3, r6
 8000898:	462a      	mov	r2, r5
 800089a:	4621      	mov	r1, r4
 800089c:	4841      	ldr	r0, [pc, #260]	; (80009a4 <main+0x270>)
 800089e:	f000 fcef 	bl	8001280 <xprintf>
		  xprintf("%d, %d, %d, %d\r\n", cwcr.button(8), cwcr.button(9), cwcr.button(10), cwcr.button(11));
 80008a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008a6:	2108      	movs	r1, #8
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff18 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 80008ae:	4603      	mov	r3, r0
 80008b0:	461c      	mov	r4, r3
 80008b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008b6:	2109      	movs	r1, #9
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff10 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 80008be:	4603      	mov	r3, r0
 80008c0:	461d      	mov	r5, r3
 80008c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008c6:	210a      	movs	r1, #10
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff08 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 80008ce:	4603      	mov	r3, r0
 80008d0:	461e      	mov	r6, r3
 80008d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008d6:	210b      	movs	r1, #11
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff00 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 80008de:	4603      	mov	r3, r0
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	4633      	mov	r3, r6
 80008e4:	462a      	mov	r2, r5
 80008e6:	4621      	mov	r1, r4
 80008e8:	482e      	ldr	r0, [pc, #184]	; (80009a4 <main+0x270>)
 80008ea:	f000 fcc9 	bl	8001280 <xprintf>
		  xprintf("%d, %d, %d, %d\r\n", cwcr.button(12), cwcr.button(13), cwcr.button(14), cwcr.button(15));
 80008ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008f2:	210c      	movs	r1, #12
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fef2 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461c      	mov	r4, r3
 80008fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000902:	210d      	movs	r1, #13
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff feea 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 800090a:	4603      	mov	r3, r0
 800090c:	461d      	mov	r5, r3
 800090e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000912:	210e      	movs	r1, #14
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fee2 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 800091a:	4603      	mov	r3, r0
 800091c:	461e      	mov	r6, r3
 800091e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000922:	210f      	movs	r1, #15
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff feda 	bl	80006de <_ZN21CoreWirelessControlRx6buttonEh>
 800092a:	4603      	mov	r3, r0
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	4633      	mov	r3, r6
 8000930:	462a      	mov	r2, r5
 8000932:	4621      	mov	r1, r4
 8000934:	481b      	ldr	r0, [pc, #108]	; (80009a4 <main+0x270>)
 8000936:	f000 fca3 	bl	8001280 <xprintf>
	  }

	  if(HAL_GetTick() - last_processed_time > 500){
 800093a:	f000 fd3d 	bl	80013b8 <HAL_GetTick>
 800093e:	4602      	mov	r2, r0
 8000940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000948:	bf8c      	ite	hi
 800094a:	2301      	movhi	r3, #1
 800094c:	2300      	movls	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	f43f af0e 	beq.w	8000772 <main+0x3e>
		  const uint8_t tx_data[] = "00,0401,CD:01,90,7F,91,89,00,00,00\r\n";
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <main+0x274>)
 8000958:	1d3c      	adds	r4, r7, #4
 800095a:	461d      	mov	r5, r3
 800095c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000964:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000968:	6020      	str	r0, [r4, #0]
 800096a:	3404      	adds	r4, #4
 800096c:	7021      	strb	r1, [r4, #0]
		  HAL_UART_Transmit(&huart1, tx_data, sizeof(tx_data), 10);
 800096e:	1d39      	adds	r1, r7, #4
 8000970:	230a      	movs	r3, #10
 8000972:	2225      	movs	r2, #37	; 0x25
 8000974:	4807      	ldr	r0, [pc, #28]	; (8000994 <main+0x260>)
 8000976:	f002 fad7 	bl	8002f28 <HAL_UART_Transmit>
		  last_processed_time = HAL_GetTick();
 800097a:	f000 fd1d 	bl	80013b8 <HAL_GetTick>
 800097e:	6578      	str	r0, [r7, #84]	; 0x54
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000980:	e6f7      	b.n	8000772 <main+0x3e>
 8000982:	bf00      	nop
 8000984:	200005fc 	.word	0x200005fc
 8000988:	08000709 	.word	0x08000709
 800098c:	2000056c 	.word	0x2000056c
 8000990:	20000568 	.word	0x20000568
 8000994:	20000458 	.word	0x20000458
 8000998:	08004440 	.word	0x08004440
 800099c:	200004e0 	.word	0x200004e0
 80009a0:	08004414 	.word	0x08004414
 80009a4:	0800442c 	.word	0x0800442c
 80009a8:	08004448 	.word	0x08004448

080009ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b096      	sub	sp, #88	; 0x58
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009b6:	2228      	movs	r2, #40	; 0x28
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 fcb0 	bl	8004320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
 80009de:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e0:	2302      	movs	r3, #2
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e4:	2301      	movs	r3, #1
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e8:	2310      	movs	r3, #16
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 ffe5 	bl	80019c4 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bf14      	ite	ne
 8000a00:	2301      	movne	r3, #1
 8000a02:	2300      	moveq	r3, #0
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8000a0a:	f000 f8f9 	bl	8000c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0e:	230f      	movs	r3, #15
 8000a10:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 fed3 	bl	80027d4 <HAL_RCC_ClockConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	bf14      	ite	ne
 8000a34:	2301      	movne	r3, #1
 8000a36:	2300      	moveq	r3, #0
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8000a3e:	f000 f8df 	bl	8000c00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a42:	2301      	movs	r3, #1
 8000a44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 f8f7 	bl	8002c40 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	bf14      	ite	ne
 8000a58:	2301      	movne	r3, #1
 8000a5a:	2300      	moveq	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000a62:	f000 f8cd 	bl	8000c00 <Error_Handler>
  }
}
 8000a66:	bf00      	nop
 8000a68:	3758      	adds	r7, #88	; 0x58
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab2:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ab4:	f002 f9ea 	bl	8002e8c <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	bf14      	ite	ne
 8000abe:	2301      	movne	r3, #1
 8000ac0:	2300      	moveq	r3, #0
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 f89a 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000458 	.word	0x20000458
 8000ad4:	40013800 	.word	0x40013800

08000ad8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <_ZL19MX_USART2_UART_Initv+0x64>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b1c:	f002 f9b6 	bl	8002e8c <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bf14      	ite	ne
 8000b26:	2301      	movne	r3, #1
 8000b28:	2300      	moveq	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000b30:	f000 f866 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200004e0 	.word	0x200004e0
 8000b3c:	40004400 	.word	0x40004400

08000b40 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <_ZL12MX_GPIO_Initv+0x44>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <_ZL12MX_GPIO_Initv+0x44>)
 8000b4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b50:	6153      	str	r3, [r2, #20]
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <_ZL12MX_GPIO_Initv+0x44>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <_ZL12MX_GPIO_Initv+0x44>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <_ZL12MX_GPIO_Initv+0x44>)
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	6153      	str	r3, [r2, #20]
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <_ZL12MX_GPIO_Initv+0x44>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_UART_RxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b88:	b5b0      	push	{r4, r5, r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <HAL_UART_RxCpltCallback+0x60>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d121      	bne.n	8000bde <HAL_UART_RxCpltCallback+0x56>
  {
	  bool res = ub.enqueue(rxed_byte_data);
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_UART_RxCpltCallback+0x64>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4813      	ldr	r0, [pc, #76]	; (8000bf0 <HAL_UART_RxCpltCallback+0x68>)
 8000ba2:	f7ff fb35 	bl	8000210 <_ZN11UsartBuffer7enqueueEh>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	77fb      	strb	r3, [r7, #31]
	  if(!res){
 8000baa:	7ffb      	ldrb	r3, [r7, #31]
 8000bac:	f083 0301 	eor.w	r3, r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00e      	beq.n	8000bd4 <HAL_UART_RxCpltCallback+0x4c>
		  const uint8_t tx_fail[] = "Failed to enqueue\r\n";
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_UART_RxCpltCallback+0x6c>)
 8000bb8:	f107 0408 	add.w	r4, r7, #8
 8000bbc:	461d      	mov	r5, r3
 8000bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	6023      	str	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, tx_fail, sizeof(tx_fail), 10);
 8000bc6:	f107 0108 	add.w	r1, r7, #8
 8000bca:	230a      	movs	r3, #10
 8000bcc:	2214      	movs	r2, #20
 8000bce:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <HAL_UART_RxCpltCallback+0x70>)
 8000bd0:	f002 f9aa 	bl	8002f28 <HAL_UART_Transmit>
	  }

	  HAL_UART_Receive_IT(&huart1, &rxed_byte_data, 1);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4905      	ldr	r1, [pc, #20]	; (8000bec <HAL_UART_RxCpltCallback+0x64>)
 8000bd8:	4808      	ldr	r0, [pc, #32]	; (8000bfc <HAL_UART_RxCpltCallback+0x74>)
 8000bda:	f002 fa2f 	bl	800303c <HAL_UART_Receive_IT>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3720      	adds	r7, #32
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bdb0      	pop	{r4, r5, r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40013800 	.word	0x40013800
 8000bec:	20000568 	.word	0x20000568
 8000bf0:	2000056c 	.word	0x2000056c
 8000bf4:	08004470 	.word	0x08004470
 8000bf8:	200004e0 	.word	0x200004e0
 8000bfc:	20000458 	.word	0x20000458

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d107      	bne.n	8000c2c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d102      	bne.n	8000c2c <_Z41__static_initialization_and_destruction_0ii+0x20>
UsartBuffer ub;
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000c28:	f7ff fad6 	bl	80001d8 <_ZN11UsartBufferC1Ev>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000056c 	.word	0x2000056c

08000c38 <_GLOBAL__sub_I_huart1>:
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c40:	2001      	movs	r0, #1
 8000c42:	f7ff ffe3 	bl	8000c0c <_Z41__static_initialization_and_destruction_0ii>
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_MspInit+0x44>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_MspInit+0x44>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6193      	str	r3, [r2, #24]
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x44>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	61d3      	str	r3, [r2, #28]
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x44>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a34      	ldr	r2, [pc, #208]	; (8000d80 <HAL_UART_MspInit+0xf0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d132      	bne.n	8000d18 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb2:	4b34      	ldr	r3, [pc, #208]	; (8000d84 <HAL_UART_MspInit+0xf4>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	4a33      	ldr	r2, [pc, #204]	; (8000d84 <HAL_UART_MspInit+0xf4>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6193      	str	r3, [r2, #24]
 8000cbe:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <HAL_UART_MspInit+0xf4>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <HAL_UART_MspInit+0xf4>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	4a2d      	ldr	r2, [pc, #180]	; (8000d84 <HAL_UART_MspInit+0xf4>)
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	6153      	str	r3, [r2, #20]
 8000cd6:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <HAL_UART_MspInit+0xf4>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ce2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d02:	f000 fced 	bl	80016e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2025      	movs	r0, #37	; 0x25
 8000d0c:	f000 fc3b 	bl	8001586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d10:	2025      	movs	r0, #37	; 0x25
 8000d12:	f000 fc54 	bl	80015be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d16:	e02e      	b.n	8000d76 <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <HAL_UART_MspInit+0xf8>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d129      	bne.n	8000d76 <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_UART_MspInit+0xf4>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <HAL_UART_MspInit+0xf4>)
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	61d3      	str	r3, [r2, #28]
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_UART_MspInit+0xf4>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_UART_MspInit+0xf4>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <HAL_UART_MspInit+0xf4>)
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	6153      	str	r3, [r2, #20]
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_UART_MspInit+0xf4>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000d52:	f248 0304 	movw	r3, #32772	; 0x8004
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d64:	2307      	movs	r3, #7
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f000 fcb5 	bl	80016e0 <HAL_GPIO_Init>
}
 8000d76:	bf00      	nop
 8000d78:	3730      	adds	r7, #48	; 0x30
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40013800 	.word	0x40013800
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40004400 	.word	0x40004400

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd8:	f000 fada 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <USART1_IRQHandler+0x10>)
 8000de6:	f002 f96d 	bl	80030c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000458 	.word	0x20000458

08000df4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <xfputc>:

void xfputc (			/* Put a character to the specified device */
	void(*func)(int),	/* Pointer to the output function (null:strptr) */
	int chr				/* Character to be output */
)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	if (XF_CRLF && chr == '\n') xfputc(func, '\r');	/* CR -> CRLF */

	if (func) {
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <xfputc+0x18>
		func(chr);		/* Write a character to the output device */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6838      	ldr	r0, [r7, #0]
 8000e2c:	4798      	blx	r3
	} else if (strptr) {
		 *strptr++ = chr;	/* Write a character to the memory */
	}
}
 8000e2e:	e00b      	b.n	8000e48 <xfputc+0x30>
	} else if (strptr) {
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <xfputc+0x38>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d007      	beq.n	8000e48 <xfputc+0x30>
		 *strptr++ = chr;	/* Write a character to the memory */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <xfputc+0x38>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	1c5a      	adds	r2, r3, #1
 8000e3e:	4904      	ldr	r1, [pc, #16]	; (8000e50 <xfputc+0x38>)
 8000e40:	600a      	str	r2, [r1, #0]
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	701a      	strb	r2, [r3, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200005f8 	.word	0x200005f8

08000e54 <xvfprintf>:
static void xvfprintf (
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b098      	sub	sp, #96	; 0x60
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
	long v;
	unsigned long uv;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	60ba      	str	r2, [r7, #8]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if (!c) break;				/* End of format? */
 8000e6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 81fc 	beq.w	800126e <xvfprintf+0x41a>
		if (c != '%') {				/* Pass it through if not a % sequense */
 8000e76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000e7a:	2b25      	cmp	r3, #37	; 0x25
 8000e7c:	d006      	beq.n	8000e8c <xvfprintf+0x38>
			xfputc(func, c); continue;
 8000e7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000e82:	4619      	mov	r1, r3
 8000e84:	68f8      	ldr	r0, [r7, #12]
 8000e86:	f7ff ffc7 	bl	8000e18 <xfputc>
 8000e8a:	e1ef      	b.n	800126c <xvfprintf+0x418>
		}
		f = w = 0;			 		/* Clear parms */
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8000e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e92:	64fb      	str	r3, [r7, #76]	; 0x4c
		pad = ' '; prec = -1;
 8000e94:	2320      	movs	r3, #32
 8000e96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	647b      	str	r3, [r7, #68]	; 0x44
		c = *fmt++;					/* Get first char of the sequense */
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	1c5a      	adds	r2, r3, #1
 8000ea4:	60ba      	str	r2, [r7, #8]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if (c == '0') {				/* Flag: left '0' padded */
 8000eac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000eb0:	2b30      	cmp	r3, #48	; 0x30
 8000eb2:	d109      	bne.n	8000ec8 <xvfprintf+0x74>
			pad = '0'; c = *fmt++;
 8000eb4:	2330      	movs	r3, #48	; 0x30
 8000eb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	60ba      	str	r2, [r7, #8]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8000ec6:	e00b      	b.n	8000ee0 <xvfprintf+0x8c>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8000ec8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000ecc:	2b2d      	cmp	r3, #45	; 0x2d
 8000ece:	d107      	bne.n	8000ee0 <xvfprintf+0x8c>
				f = 2; c = *fmt++;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	60ba      	str	r2, [r7, #8]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 8000ee0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8000ee6:	d126      	bne.n	8000f36 <xvfprintf+0xe2>
			n = va_arg(arp, int);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	1d1a      	adds	r2, r3, #4
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	64bb      	str	r3, [r7, #72]	; 0x48
			if (n < 0) {			/* Flag: left justified */
 8000ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	da04      	bge.n	8000f02 <xvfprintf+0xae>
				n = 0 - n; f = 2;
 8000ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000efa:	425b      	negs	r3, r3
 8000efc:	64bb      	str	r3, [r7, #72]	; 0x48
 8000efe:	2302      	movs	r3, #2
 8000f00:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			w = n; c = *fmt++;
 8000f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f04:	653b      	str	r3, [r7, #80]	; 0x50
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	60ba      	str	r2, [r7, #8]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8000f12:	e018      	b.n	8000f46 <xvfprintf+0xf2>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 8000f14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	461a      	mov	r2, r3
 8000f20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f24:	4413      	add	r3, r2
 8000f26:	3b30      	subs	r3, #48	; 0x30
 8000f28:	653b      	str	r3, [r7, #80]	; 0x50
				c = *fmt++;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	60ba      	str	r2, [r7, #8]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			while (c >= '0' && c <= '9') {	/* Minimum width */
 8000f36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f3a:	2b2f      	cmp	r3, #47	; 0x2f
 8000f3c:	d903      	bls.n	8000f46 <xvfprintf+0xf2>
 8000f3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f42:	2b39      	cmp	r3, #57	; 0x39
 8000f44:	d9e6      	bls.n	8000f14 <xvfprintf+0xc0>
			}
		}
		if (c == '.') {				/* Precision */
 8000f46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8000f4c:	d131      	bne.n	8000fb2 <xvfprintf+0x15e>
			c = *fmt++;
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	60ba      	str	r2, [r7, #8]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			if (c == '*') {				/* Precision from an argument */
 8000f5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8000f60:	d10b      	bne.n	8000f7a <xvfprintf+0x126>
				prec = va_arg(arp, int);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	1d1a      	adds	r2, r3, #4
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	647b      	str	r3, [r7, #68]	; 0x44
				c = *fmt++;
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	60ba      	str	r2, [r7, #8]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8000f78:	e01b      	b.n	8000fb2 <xvfprintf+0x15e>
			} else {
				prec = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	647b      	str	r3, [r7, #68]	; 0x44
				while (c >= '0' && c <= '9') {
 8000f7e:	e010      	b.n	8000fa2 <xvfprintf+0x14e>
					prec = prec * 10 + c - '0';
 8000f80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f90:	4413      	add	r3, r2
 8000f92:	3b30      	subs	r3, #48	; 0x30
 8000f94:	647b      	str	r3, [r7, #68]	; 0x44
					c = *fmt++;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	60ba      	str	r2, [r7, #8]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				while (c >= '0' && c <= '9') {
 8000fa2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000fa6:	2b2f      	cmp	r3, #47	; 0x2f
 8000fa8:	d903      	bls.n	8000fb2 <xvfprintf+0x15e>
 8000faa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000fae:	2b39      	cmp	r3, #57	; 0x39
 8000fb0:	d9e6      	bls.n	8000f80 <xvfprintf+0x12c>
				}
			}
		}
		if (c == 'l') {		/* Prefix: Size is long */
 8000fb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000fb6:	2b6c      	cmp	r3, #108	; 0x6c
 8000fb8:	d109      	bne.n	8000fce <xvfprintf+0x17a>
			f |= 4; c = *fmt++;
 8000fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	60ba      	str	r2, [r7, #8]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			if (c == 'l') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 8000fce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 814d 	beq.w	8001272 <xvfprintf+0x41e>
		switch (c) {				/* Type is... */
 8000fd8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000fdc:	3b58      	subs	r3, #88	; 0x58
 8000fde:	2b20      	cmp	r3, #32
 8000fe0:	f200 80a4 	bhi.w	800112c <xvfprintf+0x2d8>
 8000fe4:	a201      	add	r2, pc, #4	; (adr r2, 8000fec <xvfprintf+0x198>)
 8000fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fea:	bf00      	nop
 8000fec:	08001083 	.word	0x08001083
 8000ff0:	0800112d 	.word	0x0800112d
 8000ff4:	0800112d 	.word	0x0800112d
 8000ff8:	0800112d 	.word	0x0800112d
 8000ffc:	0800112d 	.word	0x0800112d
 8001000:	0800112d 	.word	0x0800112d
 8001004:	0800112d 	.word	0x0800112d
 8001008:	0800112d 	.word	0x0800112d
 800100c:	0800112d 	.word	0x0800112d
 8001010:	0800112d 	.word	0x0800112d
 8001014:	08001071 	.word	0x08001071
 8001018:	08001089 	.word	0x08001089
 800101c:	0800107d 	.word	0x0800107d
 8001020:	0800112d 	.word	0x0800112d
 8001024:	0800112d 	.word	0x0800112d
 8001028:	0800112d 	.word	0x0800112d
 800102c:	0800112d 	.word	0x0800112d
 8001030:	0800112d 	.word	0x0800112d
 8001034:	0800112d 	.word	0x0800112d
 8001038:	0800112d 	.word	0x0800112d
 800103c:	0800112d 	.word	0x0800112d
 8001040:	0800112d 	.word	0x0800112d
 8001044:	0800112d 	.word	0x0800112d
 8001048:	08001077 	.word	0x08001077
 800104c:	0800112d 	.word	0x0800112d
 8001050:	0800112d 	.word	0x0800112d
 8001054:	0800112d 	.word	0x0800112d
 8001058:	0800109d 	.word	0x0800109d
 800105c:	0800112d 	.word	0x0800112d
 8001060:	0800107d 	.word	0x0800107d
 8001064:	0800112d 	.word	0x0800112d
 8001068:	0800112d 	.word	0x0800112d
 800106c:	08001083 	.word	0x08001083
		case 'b':					/* Unsigned binary */
			r = 2; break;
 8001070:	2302      	movs	r3, #2
 8001072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001074:	e061      	b.n	800113a <xvfprintf+0x2e6>
		case 'o':					/* Unsigned octal */
			r = 8; break;
 8001076:	2308      	movs	r3, #8
 8001078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800107a:	e05e      	b.n	800113a <xvfprintf+0x2e6>
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
 800107c:	230a      	movs	r3, #10
 800107e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001080:	e05b      	b.n	800113a <xvfprintf+0x2e6>
		case 'x':					/* Hexdecimal (lower case) */
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
 8001082:	2310      	movs	r3, #16
 8001084:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001086:	e058      	b.n	800113a <xvfprintf+0x2e6>
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	1d1a      	adds	r2, r3, #4
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	4619      	mov	r1, r3
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f7ff febf 	bl	8000e18 <xfputc>
 800109a:	e0e7      	b.n	800126c <xvfprintf+0x418>
		case 's':					/* String */
			p = va_arg(arp, char*);		/* Get a pointer argument */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	1d1a      	adds	r2, r3, #4
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (!p) p = "";				/* Null ptr generates a null string */
 80010a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <xvfprintf+0x25c>
 80010ac:	4b73      	ldr	r3, [pc, #460]	; (800127c <xvfprintf+0x428>)
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
			j = strlen(p);
 80010b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80010b2:	f7ff f889 	bl	80001c8 <strlen>
 80010b6:	6578      	str	r0, [r7, #84]	; 0x54
			if (prec >= 0 && j > (unsigned int)prec) j = prec;	/* Limited length of string body */
 80010b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0f      	blt.n	80010de <xvfprintf+0x28a>
 80010be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d90b      	bls.n	80010de <xvfprintf+0x28a>
 80010c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010c8:	657b      	str	r3, [r7, #84]	; 0x54
			for ( ; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 80010ca:	e008      	b.n	80010de <xvfprintf+0x28a>
 80010cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80010d0:	4619      	mov	r1, r3
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f7ff fea0 	bl	8000e18 <xfputc>
 80010d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010da:	3301      	adds	r3, #1
 80010dc:	657b      	str	r3, [r7, #84]	; 0x54
 80010de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10c      	bne.n	8001102 <xvfprintf+0x2ae>
 80010e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d3ed      	bcc.n	80010cc <xvfprintf+0x278>
			while (*p && prec--) xfputc(func, *p++);/* String body */
 80010f0:	e007      	b.n	8001102 <xvfprintf+0x2ae>
 80010f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	4619      	mov	r1, r3
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f7ff fe8b 	bl	8000e18 <xfputc>
 8001102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d009      	beq.n	800111e <xvfprintf+0x2ca>
 800110a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800110c:	1e5a      	subs	r2, r3, #1
 800110e:	647a      	str	r2, [r7, #68]	; 0x44
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1ee      	bne.n	80010f2 <xvfprintf+0x29e>
			while (j++ < w) xfputc(func, ' ');		/* Right pads */
 8001114:	e003      	b.n	800111e <xvfprintf+0x2ca>
 8001116:	2120      	movs	r1, #32
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f7ff fe7d 	bl	8000e18 <xfputc>
 800111e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	657a      	str	r2, [r7, #84]	; 0x54
 8001124:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001126:	429a      	cmp	r2, r3
 8001128:	d8f5      	bhi.n	8001116 <xvfprintf+0x2c2>
			continue;
 800112a:	e09f      	b.n	800126c <xvfprintf+0x418>
			while (*p) xfputc(func, *p++);		/* Value */
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
 800112c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001130:	4619      	mov	r1, r3
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff fe70 	bl	8000e18 <xfputc>
 8001138:	e098      	b.n	800126c <xvfprintf+0x418>
			} else {		/* int/short/char argument */
				v = (c == 'd') ? (long long)va_arg(arp, int) : (long long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 800113a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <xvfprintf+0x2fc>
			v = (long)va_arg(arp, long);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	1d1a      	adds	r2, r3, #4
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	637b      	str	r3, [r7, #52]	; 0x34
 800114e:	e00d      	b.n	800116c <xvfprintf+0x318>
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 8001150:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001154:	2b64      	cmp	r3, #100	; 0x64
 8001156:	d104      	bne.n	8001162 <xvfprintf+0x30e>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	1d1a      	adds	r2, r3, #4
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	e003      	b.n	800116a <xvfprintf+0x316>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	1d1a      	adds	r2, r3, #4
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
		}
#endif
		if (c == 'd' && v < 0) {	/* Negative value? */
 800116c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001170:	2b64      	cmp	r3, #100	; 0x64
 8001172:	d109      	bne.n	8001188 <xvfprintf+0x334>
 8001174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001176:	2b00      	cmp	r3, #0
 8001178:	da06      	bge.n	8001188 <xvfprintf+0x334>
			v = 0 - v; f |= 1;
 800117a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800117c:	425b      	negs	r3, r3
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
 8001180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		i = 0; uv = v;
 8001188:	2300      	movs	r3, #0
 800118a:	65bb      	str	r3, [r7, #88]	; 0x58
 800118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
		do {	/* Make an integer number string */
			d = (char)(uv % r); uv /= r;
 8001190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001192:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001194:	fbb3 f2f2 	udiv	r2, r3, r2
 8001198:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800119a:	fb01 f202 	mul.w	r2, r1, r2
 800119e:	1a9b      	subs	r3, r3, r2
 80011a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80011a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80011ae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80011b2:	2b09      	cmp	r3, #9
 80011b4:	d90b      	bls.n	80011ce <xvfprintf+0x37a>
 80011b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80011ba:	2b78      	cmp	r3, #120	; 0x78
 80011bc:	d101      	bne.n	80011c2 <xvfprintf+0x36e>
 80011be:	2227      	movs	r2, #39	; 0x27
 80011c0:	e000      	b.n	80011c4 <xvfprintf+0x370>
 80011c2:	2207      	movs	r2, #7
 80011c4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80011c8:	4413      	add	r3, r2
 80011ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			str[i++] = d + '0';
 80011ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80011d4:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80011d8:	3230      	adds	r2, #48	; 0x30
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80011e0:	440b      	add	r3, r1
 80011e2:	f803 2c50 	strb.w	r2, [r3, #-80]
		} while (uv != 0 && i < sizeof str);
 80011e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <xvfprintf+0x39e>
 80011ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011ee:	2b1f      	cmp	r3, #31
 80011f0:	d9ce      	bls.n	8001190 <xvfprintf+0x33c>
		if (f & 1) str[i++] = '-';					/* Sign */
 80011f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <xvfprintf+0x3ba>
 80011fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	65ba      	str	r2, [r7, #88]	; 0x58
 8001202:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001206:	4413      	add	r3, r2
 8001208:	222d      	movs	r2, #45	; 0x2d
 800120a:	f803 2c50 	strb.w	r2, [r3, #-80]
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 800120e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001210:	657b      	str	r3, [r7, #84]	; 0x54
 8001212:	e008      	b.n	8001226 <xvfprintf+0x3d2>
 8001214:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001218:	4619      	mov	r1, r3
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f7ff fdfc 	bl	8000e18 <xfputc>
 8001220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001222:	3301      	adds	r3, #1
 8001224:	657b      	str	r3, [r7, #84]	; 0x54
 8001226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d103      	bne.n	8001238 <xvfprintf+0x3e4>
 8001230:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001234:	429a      	cmp	r2, r3
 8001236:	d3ed      	bcc.n	8001214 <xvfprintf+0x3c0>
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
 8001238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800123a:	3b01      	subs	r3, #1
 800123c:	65bb      	str	r3, [r7, #88]	; 0x58
 800123e:	f107 0210 	add.w	r2, r7, #16
 8001242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001244:	4413      	add	r3, r2
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f7ff fde4 	bl	8000e18 <xfputc>
 8001250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <xvfprintf+0x3e4>
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
 8001256:	e003      	b.n	8001260 <xvfprintf+0x40c>
 8001258:	2120      	movs	r1, #32
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff fddc 	bl	8000e18 <xfputc>
 8001260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	657a      	str	r2, [r7, #84]	; 0x54
 8001266:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f5      	bhi.n	8001258 <xvfprintf+0x404>
		c = *fmt++;					/* Get a format character */
 800126c:	e5f8      	b.n	8000e60 <xvfprintf+0xc>
		if (!c) break;				/* End of format? */
 800126e:	bf00      	nop
 8001270:	e000      	b.n	8001274 <xvfprintf+0x420>
		if (!c) break;				/* End of format? */
 8001272:	bf00      	nop
	}
}
 8001274:	bf00      	nop
 8001276:	3760      	adds	r7, #96	; 0x60
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	08004484 	.word	0x08004484

08001280 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8001280:	b40f      	push	{r0, r1, r2, r3}
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	607b      	str	r3, [r7, #4]
	xvfprintf(xfunc_output, fmt, arp);
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <xprintf+0x2c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6939      	ldr	r1, [r7, #16]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fddc 	bl	8000e54 <xvfprintf>
	va_end(arp);
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012a6:	b004      	add	sp, #16
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	200005fc 	.word	0x200005fc

080012b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b4:	f7ff fd9e 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <LoopForever+0x6>)
  ldr r1, =_edata
 80012ba:	490d      	ldr	r1, [pc, #52]	; (80012f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <LoopForever+0xe>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d0:	4c0a      	ldr	r4, [pc, #40]	; (80012fc <LoopForever+0x16>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012de:	f002 fffb 	bl	80042d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012e2:	f7ff fa27 	bl	8000734 <main>

080012e6 <LoopForever>:

LoopForever:
    b LoopForever
 80012e6:	e7fe      	b.n	80012e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012e8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 80012f4:	080044d4 	.word	0x080044d4
  ldr r2, =_sbss
 80012f8:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 80012fc:	20000610 	.word	0x20000610

08001300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC1_2_IRQHandler>
	...

08001304 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_Init+0x28>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_Init+0x28>)
 800130e:	f043 0310 	orr.w	r3, r3, #16
 8001312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f000 f92b 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f808 	bl	8001330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001320:	f7ff fc92 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40022000 	.word	0x40022000

08001330 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x54>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x58>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f943 	bl	80015da <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00e      	b.n	800137c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d80a      	bhi.n	800137a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f000 f90b 	bl	8001586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_InitTick+0x5c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	20000008 	.word	0x20000008
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008
 80013b4:	20000600 	.word	0x20000600

080013b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000600 	.word	0x20000600

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	2b00      	cmp	r3, #0
 8001444:	db0b      	blt.n	800145e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f003 021f 	and.w	r2, r3, #31
 800144c:	4907      	ldr	r1, [pc, #28]	; (800146c <__NVIC_EnableIRQ+0x38>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	2001      	movs	r0, #1
 8001456:	fa00 f202 	lsl.w	r2, r0, r2
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800153c:	d301      	bcc.n	8001542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153e:	2301      	movs	r3, #1
 8001540:	e00f      	b.n	8001562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <SysTick_Config+0x40>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154a:	210f      	movs	r1, #15
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f7ff ff8e 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <SysTick_Config+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <SysTick_Config+0x40>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff29 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001598:	f7ff ff3e 	bl	8001418 <__NVIC_GetPriorityGrouping>
 800159c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7ff ff8e 	bl	80014c4 <NVIC_EncodePriority>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff5d 	bl	8001470 <__NVIC_SetPriority>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff31 	bl	8001434 <__NVIC_EnableIRQ>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ffa2 	bl	800152c <SysTick_Config>
 80015e8:	4603      	mov	r3, r0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001600:	2b02      	cmp	r3, #2
 8001602:	d008      	beq.n	8001616 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2204      	movs	r2, #4
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e020      	b.n	8001658 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 020e 	bic.w	r2, r2, #14
 8001624:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	2101      	movs	r1, #1
 8001640:	fa01 f202 	lsl.w	r2, r1, r2
 8001644:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001676:	2b02      	cmp	r3, #2
 8001678:	d005      	beq.n	8001686 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2204      	movs	r2, #4
 800167e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	e027      	b.n	80016d6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 020e 	bic.w	r2, r2, #14
 8001694:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ae:	2101      	movs	r1, #1
 80016b0:	fa01 f202 	lsl.w	r2, r1, r2
 80016b4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	4798      	blx	r3
    } 
  }
  return status;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ee:	e14e      	b.n	800198e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8140 	beq.w	8001988 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d005      	beq.n	8001720 <HAL_GPIO_Init+0x40>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d130      	bne.n	8001782 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001756:	2201      	movs	r2, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f003 0201 	and.w	r2, r3, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b03      	cmp	r3, #3
 800178c:	d017      	beq.n	80017be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d123      	bne.n	8001812 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3208      	adds	r2, #8
 80017d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	6939      	ldr	r1, [r7, #16]
 800180e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0203 	and.w	r2, r3, #3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 809a 	beq.w	8001988 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001854:	4b55      	ldr	r3, [pc, #340]	; (80019ac <HAL_GPIO_Init+0x2cc>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a54      	ldr	r2, [pc, #336]	; (80019ac <HAL_GPIO_Init+0x2cc>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b52      	ldr	r3, [pc, #328]	; (80019ac <HAL_GPIO_Init+0x2cc>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800186c:	4a50      	ldr	r2, [pc, #320]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001896:	d013      	beq.n	80018c0 <HAL_GPIO_Init+0x1e0>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a46      	ldr	r2, [pc, #280]	; (80019b4 <HAL_GPIO_Init+0x2d4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00d      	beq.n	80018bc <HAL_GPIO_Init+0x1dc>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a45      	ldr	r2, [pc, #276]	; (80019b8 <HAL_GPIO_Init+0x2d8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0x1d8>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a44      	ldr	r2, [pc, #272]	; (80019bc <HAL_GPIO_Init+0x2dc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_GPIO_Init+0x1d4>
 80018b0:	2303      	movs	r3, #3
 80018b2:	e006      	b.n	80018c2 <HAL_GPIO_Init+0x1e2>
 80018b4:	2305      	movs	r3, #5
 80018b6:	e004      	b.n	80018c2 <HAL_GPIO_Init+0x1e2>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0x1e2>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_GPIO_Init+0x1e2>
 80018c0:	2300      	movs	r3, #0
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	f002 0203 	and.w	r2, r2, #3
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	4093      	lsls	r3, r2
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018d2:	4937      	ldr	r1, [pc, #220]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e0:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <HAL_GPIO_Init+0x2e0>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001904:	4a2e      	ldr	r2, [pc, #184]	; (80019c0 <HAL_GPIO_Init+0x2e0>)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800190a:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <HAL_GPIO_Init+0x2e0>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800192e:	4a24      	ldr	r2, [pc, #144]	; (80019c0 <HAL_GPIO_Init+0x2e0>)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_GPIO_Init+0x2e0>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_GPIO_Init+0x2e0>)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800195e:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_GPIO_Init+0x2e0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_GPIO_Init+0x2e0>)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	f47f aea9 	bne.w	80016f0 <HAL_GPIO_Init+0x10>
  }
}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010000 	.word	0x40010000
 80019b4:	48000400 	.word	0x48000400
 80019b8:	48000800 	.word	0x48000800
 80019bc:	48000c00 	.word	0x48000c00
 80019c0:	40010400 	.word	0x40010400

080019c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	f000 bef4 	b.w	80027c6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 816a 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019ee:	4bb3      	ldr	r3, [pc, #716]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d00c      	beq.n	8001a14 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019fa:	4bb0      	ldr	r3, [pc, #704]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d159      	bne.n	8001aba <HAL_RCC_OscConfig+0xf6>
 8001a06:	4bad      	ldr	r3, [pc, #692]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a12:	d152      	bne.n	8001aba <HAL_RCC_OscConfig+0xf6>
 8001a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a18:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a28:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d102      	bne.n	8001a46 <HAL_RCC_OscConfig+0x82>
 8001a40:	4b9e      	ldr	r3, [pc, #632]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0xae>
 8001a46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a4a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a5e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a62:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a6e:	4b93      	ldr	r3, [pc, #588]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a76:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a7a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a7e:	fa92 f2a2 	rbit	r2, r2
 8001a82:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a86:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a8a:	fab2 f282 	clz	r2, r2
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	f042 0220 	orr.w	r2, r2, #32
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	f002 021f 	and.w	r2, r2, #31
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 810c 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x2fc>
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 8106 	bne.w	8001cc0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f000 be86 	b.w	80027c6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac4:	d106      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x110>
 8001ac6:	4b7d      	ldr	r3, [pc, #500]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7c      	ldr	r2, [pc, #496]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e030      	b.n	8001b36 <HAL_RCC_OscConfig+0x172>
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x134>
 8001ade:	4b77      	ldr	r3, [pc, #476]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a76      	ldr	r2, [pc, #472]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b74      	ldr	r3, [pc, #464]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a73      	ldr	r2, [pc, #460]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e01e      	b.n	8001b36 <HAL_RCC_OscConfig+0x172>
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b02:	d10c      	bne.n	8001b1e <HAL_RCC_OscConfig+0x15a>
 8001b04:	4b6d      	ldr	r3, [pc, #436]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a6c      	ldr	r2, [pc, #432]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001b0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a69      	ldr	r2, [pc, #420]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	e00b      	b.n	8001b36 <HAL_RCC_OscConfig+0x172>
 8001b1e:	4b67      	ldr	r3, [pc, #412]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a66      	ldr	r2, [pc, #408]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b64      	ldr	r3, [pc, #400]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a63      	ldr	r2, [pc, #396]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b34:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b36:	4b61      	ldr	r3, [pc, #388]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	f023 020f 	bic.w	r2, r3, #15
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	495d      	ldr	r1, [pc, #372]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d059      	beq.n	8001c08 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff fc30 	bl	80013b8 <HAL_GetTick>
 8001b58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5c:	e00a      	b.n	8001b74 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5e:	f7ff fc2b 	bl	80013b8 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	d902      	bls.n	8001b74 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	f000 be29 	b.w	80027c6 <HAL_RCC_OscConfig+0xe02>
 8001b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b78:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b88:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d102      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x1e2>
 8001ba0:	4b46      	ldr	r3, [pc, #280]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	e015      	b.n	8001bd2 <HAL_RCC_OscConfig+0x20e>
 8001ba6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001baa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bbe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001bc2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001bce:	4b3b      	ldr	r3, [pc, #236]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bd6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001bda:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001bde:	fa92 f2a2 	rbit	r2, r2
 8001be2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001be6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001bea:	fab2 f282 	clz	r2, r2
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	f042 0220 	orr.w	r2, r2, #32
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f002 021f 	and.w	r2, r2, #31
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0ab      	beq.n	8001b5e <HAL_RCC_OscConfig+0x19a>
 8001c06:	e05c      	b.n	8001cc2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fbd6 	bl	80013b8 <HAL_GetTick>
 8001c0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c12:	f7ff fbd1 	bl	80013b8 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d902      	bls.n	8001c28 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	f000 bdcf 	b.w	80027c6 <HAL_RCC_OscConfig+0xe02>
 8001c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c3c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d102      	bne.n	8001c5a <HAL_RCC_OscConfig+0x296>
 8001c54:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x2c2>
 8001c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c5e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c72:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c76:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_RCC_OscConfig+0x2f8>)
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c8a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c8e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c92:	fa92 f2a2 	rbit	r2, r2
 8001c96:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c9a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c9e:	fab2 f282 	clz	r2, r2
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	f042 0220 	orr.w	r2, r2, #32
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	f002 021f 	and.w	r2, r2, #31
 8001cae:	2101      	movs	r1, #1
 8001cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1ab      	bne.n	8001c12 <HAL_RCC_OscConfig+0x24e>
 8001cba:	e002      	b.n	8001cc2 <HAL_RCC_OscConfig+0x2fe>
 8001cbc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 816f 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cd2:	4bd0      	ldr	r3, [pc, #832]	; (8002014 <HAL_RCC_OscConfig+0x650>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cde:	4bcd      	ldr	r3, [pc, #820]	; (8002014 <HAL_RCC_OscConfig+0x650>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d16c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x400>
 8001cea:	4bca      	ldr	r3, [pc, #808]	; (8002014 <HAL_RCC_OscConfig+0x650>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d166      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x400>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d08:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_OscConfig+0x362>
 8001d20:	4bbc      	ldr	r3, [pc, #752]	; (8002014 <HAL_RCC_OscConfig+0x650>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	e013      	b.n	8001d4e <HAL_RCC_OscConfig+0x38a>
 8001d26:	2302      	movs	r3, #2
 8001d28:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d38:	2302      	movs	r3, #2
 8001d3a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d4a:	4bb2      	ldr	r3, [pc, #712]	; (8002014 <HAL_RCC_OscConfig+0x650>)
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d54:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d58:	fa92 f2a2 	rbit	r2, r2
 8001d5c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d60:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d64:	fab2 f282 	clz	r2, r2
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	f042 0220 	orr.w	r2, r2, #32
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	f002 021f 	and.w	r2, r2, #31
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_RCC_OscConfig+0x3cc>
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d002      	beq.n	8001d90 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f000 bd1b 	b.w	80027c6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4ba0      	ldr	r3, [pc, #640]	; (8002014 <HAL_RCC_OscConfig+0x650>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	21f8      	movs	r1, #248	; 0xf8
 8001da0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001da8:	fa91 f1a1 	rbit	r1, r1
 8001dac:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001db0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001db4:	fab1 f181 	clz	r1, r1
 8001db8:	b2c9      	uxtb	r1, r1
 8001dba:	408b      	lsls	r3, r1
 8001dbc:	4995      	ldr	r1, [pc, #596]	; (8002014 <HAL_RCC_OscConfig+0x650>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	e0f5      	b.n	8001fb0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8085 	beq.w	8001eda <HAL_RCC_OscConfig+0x516>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001de2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001df0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	461a      	mov	r2, r3
 8001df8:	2301      	movs	r3, #1
 8001dfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fadc 	bl	80013b8 <HAL_GetTick>
 8001e00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e06:	f7ff fad7 	bl	80013b8 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d902      	bls.n	8001e1c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	f000 bcd5 	b.w	80027c6 <HAL_RCC_OscConfig+0xe02>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d102      	bne.n	8001e4c <HAL_RCC_OscConfig+0x488>
 8001e46:	4b73      	ldr	r3, [pc, #460]	; (8002014 <HAL_RCC_OscConfig+0x650>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	e013      	b.n	8001e74 <HAL_RCC_OscConfig+0x4b0>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e64:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e68:	fa93 f3a3 	rbit	r3, r3
 8001e6c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e70:	4b68      	ldr	r3, [pc, #416]	; (8002014 <HAL_RCC_OscConfig+0x650>)
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	2202      	movs	r2, #2
 8001e76:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e7e:	fa92 f2a2 	rbit	r2, r2
 8001e82:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e86:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e8a:	fab2 f282 	clz	r2, r2
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	f042 0220 	orr.w	r2, r2, #32
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	f002 021f 	and.w	r2, r2, #31
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0af      	beq.n	8001e06 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea6:	4b5b      	ldr	r3, [pc, #364]	; (8002014 <HAL_RCC_OscConfig+0x650>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	21f8      	movs	r1, #248	; 0xf8
 8001eb6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ebe:	fa91 f1a1 	rbit	r1, r1
 8001ec2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ec6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001eca:	fab1 f181 	clz	r1, r1
 8001ece:	b2c9      	uxtb	r1, r1
 8001ed0:	408b      	lsls	r3, r1
 8001ed2:	4950      	ldr	r1, [pc, #320]	; (8002014 <HAL_RCC_OscConfig+0x650>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
 8001ed8:	e06a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x5ec>
 8001eda:	2301      	movs	r3, #1
 8001edc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001eec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef0:	fab3 f383 	clz	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001efa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	461a      	mov	r2, r3
 8001f02:	2300      	movs	r3, #0
 8001f04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7ff fa57 	bl	80013b8 <HAL_GetTick>
 8001f0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f10:	f7ff fa52 	bl	80013b8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d902      	bls.n	8001f26 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	f000 bc50 	b.w	80027c6 <HAL_RCC_OscConfig+0xe02>
 8001f26:	2302      	movs	r3, #2
 8001f28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d102      	bne.n	8001f56 <HAL_RCC_OscConfig+0x592>
 8001f50:	4b30      	ldr	r3, [pc, #192]	; (8002014 <HAL_RCC_OscConfig+0x650>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	e013      	b.n	8001f7e <HAL_RCC_OscConfig+0x5ba>
 8001f56:	2302      	movs	r3, #2
 8001f58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f7a:	4b26      	ldr	r3, [pc, #152]	; (8002014 <HAL_RCC_OscConfig+0x650>)
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f84:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f88:	fa92 f2a2 	rbit	r2, r2
 8001f8c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f90:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f94:	fab2 f282 	clz	r2, r2
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	f042 0220 	orr.w	r2, r2, #32
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	f002 021f 	and.w	r2, r2, #31
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1af      	bne.n	8001f10 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80da 	beq.w	8002174 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d069      	beq.n	800209e <HAL_RCC_OscConfig+0x6da>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe0:	fab3 f383 	clz	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_OscConfig+0x654>)
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff4:	f7ff f9e0 	bl	80013b8 <HAL_GetTick>
 8001ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffc:	e00e      	b.n	800201c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffe:	f7ff f9db 	bl	80013b8 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d906      	bls.n	800201c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e3d9      	b.n	80027c6 <HAL_RCC_OscConfig+0xe02>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	10908120 	.word	0x10908120
 800201c:	2302      	movs	r3, #2
 800201e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800202e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002032:	2202      	movs	r2, #2
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	fa93 f2a3 	rbit	r2, r3
 8002040:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800204a:	2202      	movs	r2, #2
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f2a3 	rbit	r2, r3
 8002058:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800205c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	4ba5      	ldr	r3, [pc, #660]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 8002060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002062:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002066:	2102      	movs	r1, #2
 8002068:	6019      	str	r1, [r3, #0]
 800206a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	fa93 f1a3 	rbit	r1, r3
 8002074:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002078:	6019      	str	r1, [r3, #0]
  return result;
 800207a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fab3 f383 	clz	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	2101      	movs	r1, #1
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0b0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x63a>
 800209c:	e06a      	b.n	8002174 <HAL_RCC_OscConfig+0x7b0>
 800209e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	fa93 f2a3 	rbit	r2, r3
 80020b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020b4:	601a      	str	r2, [r3, #0]
  return result;
 80020b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020ba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b8c      	ldr	r3, [pc, #560]	; (80022f8 <HAL_RCC_OscConfig+0x934>)
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	461a      	mov	r2, r3
 80020cc:	2300      	movs	r3, #0
 80020ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d0:	f7ff f972 	bl	80013b8 <HAL_GetTick>
 80020d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d8:	e009      	b.n	80020ee <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020da:	f7ff f96d 	bl	80013b8 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e36b      	b.n	80027c6 <HAL_RCC_OscConfig+0xe02>
 80020ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020f2:	2202      	movs	r2, #2
 80020f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	fa93 f2a3 	rbit	r2, r3
 8002100:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800210a:	2202      	movs	r2, #2
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	fa93 f2a3 	rbit	r2, r3
 8002118:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002122:	2202      	movs	r2, #2
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	fa93 f2a3 	rbit	r2, r3
 8002130:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002134:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002136:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 8002138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800213a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800213e:	2102      	movs	r1, #2
 8002140:	6019      	str	r1, [r3, #0]
 8002142:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	fa93 f1a3 	rbit	r1, r3
 800214c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002150:	6019      	str	r1, [r3, #0]
  return result;
 8002152:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	2101      	movs	r1, #1
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1b2      	bne.n	80020da <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8158 	beq.w	8002434 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b5a      	ldr	r3, [pc, #360]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d112      	bne.n	80021bc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a56      	ldr	r2, [pc, #344]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	61d3      	str	r3, [r2, #28]
 80021a2:	4b54      	ldr	r3, [pc, #336]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80021aa:	f107 0308 	add.w	r3, r7, #8
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	4b4f      	ldr	r3, [pc, #316]	; (80022fc <HAL_RCC_OscConfig+0x938>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d11a      	bne.n	80021fe <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c8:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x938>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a4b      	ldr	r2, [pc, #300]	; (80022fc <HAL_RCC_OscConfig+0x938>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d4:	f7ff f8f0 	bl	80013b8 <HAL_GetTick>
 80021d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	e009      	b.n	80021f2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021de:	f7ff f8eb 	bl	80013b8 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e2e9      	b.n	80027c6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f2:	4b42      	ldr	r3, [pc, #264]	; (80022fc <HAL_RCC_OscConfig+0x938>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0ef      	beq.n	80021de <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x852>
 8002208:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4a39      	ldr	r2, [pc, #228]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6213      	str	r3, [r2, #32]
 8002214:	e02f      	b.n	8002276 <HAL_RCC_OscConfig+0x8b2>
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10c      	bne.n	800223a <HAL_RCC_OscConfig+0x876>
 8002220:	4b34      	ldr	r3, [pc, #208]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4a33      	ldr	r2, [pc, #204]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 8002226:	f023 0301 	bic.w	r3, r3, #1
 800222a:	6213      	str	r3, [r2, #32]
 800222c:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4a30      	ldr	r2, [pc, #192]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 8002232:	f023 0304 	bic.w	r3, r3, #4
 8002236:	6213      	str	r3, [r2, #32]
 8002238:	e01d      	b.n	8002276 <HAL_RCC_OscConfig+0x8b2>
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b05      	cmp	r3, #5
 8002242:	d10c      	bne.n	800225e <HAL_RCC_OscConfig+0x89a>
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	6213      	str	r3, [r2, #32]
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6213      	str	r3, [r2, #32]
 800225c:	e00b      	b.n	8002276 <HAL_RCC_OscConfig+0x8b2>
 800225e:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4a24      	ldr	r2, [pc, #144]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	6213      	str	r3, [r2, #32]
 800226a:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 8002270:	f023 0304 	bic.w	r3, r3, #4
 8002274:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d06b      	beq.n	8002358 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002280:	f7ff f89a 	bl	80013b8 <HAL_GetTick>
 8002284:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	e00b      	b.n	80022a2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7ff f895 	bl	80013b8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e291      	b.n	80027c6 <HAL_RCC_OscConfig+0xe02>
 80022a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022a6:	2202      	movs	r2, #2
 80022a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022be:	2202      	movs	r2, #2
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	fa93 f2a3 	rbit	r2, r3
 80022cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022d0:	601a      	str	r2, [r3, #0]
  return result;
 80022d2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f043 0302 	orr.w	r3, r3, #2
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d109      	bne.n	8002300 <HAL_RCC_OscConfig+0x93c>
 80022ec:	4b01      	ldr	r3, [pc, #4]	; (80022f4 <HAL_RCC_OscConfig+0x930>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	e014      	b.n	800231c <HAL_RCC_OscConfig+0x958>
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	10908120 	.word	0x10908120
 80022fc:	40007000 	.word	0x40007000
 8002300:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002304:	2202      	movs	r2, #2
 8002306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	fa93 f2a3 	rbit	r2, r3
 8002312:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	4bbb      	ldr	r3, [pc, #748]	; (8002608 <HAL_RCC_OscConfig+0xc44>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002320:	2102      	movs	r1, #2
 8002322:	6011      	str	r1, [r2, #0]
 8002324:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	fa92 f1a2 	rbit	r1, r2
 800232e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002332:	6011      	str	r1, [r2, #0]
  return result;
 8002334:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	fab2 f282 	clz	r2, r2
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	f002 021f 	and.w	r2, r2, #31
 800234a:	2101      	movs	r1, #1
 800234c:	fa01 f202 	lsl.w	r2, r1, r2
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d099      	beq.n	800228a <HAL_RCC_OscConfig+0x8c6>
 8002356:	e063      	b.n	8002420 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7ff f82e 	bl	80013b8 <HAL_GetTick>
 800235c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002360:	e00b      	b.n	800237a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7ff f829 	bl	80013b8 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e225      	b.n	80027c6 <HAL_RCC_OscConfig+0xe02>
 800237a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800237e:	2202      	movs	r2, #2
 8002380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	fa93 f2a3 	rbit	r2, r3
 800238c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002396:	2202      	movs	r2, #2
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023a8:	601a      	str	r2, [r3, #0]
  return result;
 80023aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f043 0302 	orr.w	r3, r3, #2
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d102      	bne.n	80023ca <HAL_RCC_OscConfig+0xa06>
 80023c4:	4b90      	ldr	r3, [pc, #576]	; (8002608 <HAL_RCC_OscConfig+0xc44>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	e00d      	b.n	80023e6 <HAL_RCC_OscConfig+0xa22>
 80023ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023ce:	2202      	movs	r2, #2
 80023d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	fa93 f2a3 	rbit	r2, r3
 80023dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	4b89      	ldr	r3, [pc, #548]	; (8002608 <HAL_RCC_OscConfig+0xc44>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023ea:	2102      	movs	r1, #2
 80023ec:	6011      	str	r1, [r2, #0]
 80023ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	fa92 f1a2 	rbit	r1, r2
 80023f8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023fc:	6011      	str	r1, [r2, #0]
  return result;
 80023fe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	fab2 f282 	clz	r2, r2
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f002 021f 	and.w	r2, r2, #31
 8002414:	2101      	movs	r1, #1
 8002416:	fa01 f202 	lsl.w	r2, r1, r2
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1a0      	bne.n	8002362 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002420:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002424:	2b01      	cmp	r3, #1
 8002426:	d105      	bne.n	8002434 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002428:	4b77      	ldr	r3, [pc, #476]	; (8002608 <HAL_RCC_OscConfig+0xc44>)
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	4a76      	ldr	r2, [pc, #472]	; (8002608 <HAL_RCC_OscConfig+0xc44>)
 800242e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002432:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 81c2 	beq.w	80027c4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002440:	4b71      	ldr	r3, [pc, #452]	; (8002608 <HAL_RCC_OscConfig+0xc44>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	f000 819c 	beq.w	8002786 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b02      	cmp	r3, #2
 8002456:	f040 8114 	bne.w	8002682 <HAL_RCC_OscConfig+0xcbe>
 800245a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800245e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	fa93 f2a3 	rbit	r2, r3
 800246e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002472:	601a      	str	r2, [r3, #0]
  return result;
 8002474:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002478:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002484:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	461a      	mov	r2, r3
 800248c:	2300      	movs	r3, #0
 800248e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7fe ff92 	bl	80013b8 <HAL_GetTick>
 8002494:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002498:	e009      	b.n	80024ae <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249a:	f7fe ff8d 	bl	80013b8 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e18b      	b.n	80027c6 <HAL_RCC_OscConfig+0xe02>
 80024ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80024b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024c6:	601a      	str	r2, [r3, #0]
  return result;
 80024c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d102      	bne.n	80024e8 <HAL_RCC_OscConfig+0xb24>
 80024e2:	4b49      	ldr	r3, [pc, #292]	; (8002608 <HAL_RCC_OscConfig+0xc44>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	e01b      	b.n	8002520 <HAL_RCC_OscConfig+0xb5c>
 80024e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	fa93 f2a3 	rbit	r2, r3
 80024fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	fa93 f2a3 	rbit	r2, r3
 8002516:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <HAL_RCC_OscConfig+0xc44>)
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002524:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002528:	6011      	str	r1, [r2, #0]
 800252a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	fa92 f1a2 	rbit	r1, r2
 8002534:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002538:	6011      	str	r1, [r2, #0]
  return result;
 800253a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	fab2 f282 	clz	r2, r2
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	f042 0220 	orr.w	r2, r2, #32
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	f002 021f 	and.w	r2, r2, #31
 8002550:	2101      	movs	r1, #1
 8002552:	fa01 f202 	lsl.w	r2, r1, r2
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d19e      	bne.n	800249a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <HAL_RCC_OscConfig+0xc44>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	430b      	orrs	r3, r1
 8002572:	4925      	ldr	r1, [pc, #148]	; (8002608 <HAL_RCC_OscConfig+0xc44>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
 8002578:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800257c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	fa93 f2a3 	rbit	r2, r3
 800258c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002590:	601a      	str	r2, [r3, #0]
  return result;
 8002592:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002596:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	461a      	mov	r2, r3
 80025aa:	2301      	movs	r3, #1
 80025ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7fe ff03 	bl	80013b8 <HAL_GetTick>
 80025b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b6:	e009      	b.n	80025cc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b8:	f7fe fefe 	bl	80013b8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e0fc      	b.n	80027c6 <HAL_RCC_OscConfig+0xe02>
 80025cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fa93 f2a3 	rbit	r2, r3
 80025e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025e4:	601a      	str	r2, [r3, #0]
  return result;
 80025e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d105      	bne.n	800260c <HAL_RCC_OscConfig+0xc48>
 8002600:	4b01      	ldr	r3, [pc, #4]	; (8002608 <HAL_RCC_OscConfig+0xc44>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	e01e      	b.n	8002644 <HAL_RCC_OscConfig+0xc80>
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	fa93 f2a3 	rbit	r2, r3
 8002620:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800262a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fa93 f2a3 	rbit	r2, r3
 800263a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	4b63      	ldr	r3, [pc, #396]	; (80027d0 <HAL_RCC_OscConfig+0xe0c>)
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002648:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800264c:	6011      	str	r1, [r2, #0]
 800264e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	fa92 f1a2 	rbit	r1, r2
 8002658:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800265c:	6011      	str	r1, [r2, #0]
  return result;
 800265e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	fab2 f282 	clz	r2, r2
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f042 0220 	orr.w	r2, r2, #32
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f002 021f 	and.w	r2, r2, #31
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f202 	lsl.w	r2, r1, r2
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d09b      	beq.n	80025b8 <HAL_RCC_OscConfig+0xbf4>
 8002680:	e0a0      	b.n	80027c4 <HAL_RCC_OscConfig+0xe00>
 8002682:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002686:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800268a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	fa93 f2a3 	rbit	r2, r3
 8002696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800269a:	601a      	str	r2, [r3, #0]
  return result;
 800269c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	461a      	mov	r2, r3
 80026b4:	2300      	movs	r3, #0
 80026b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe fe7e 	bl	80013b8 <HAL_GetTick>
 80026bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c0:	e009      	b.n	80026d6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c2:	f7fe fe79 	bl	80013b8 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e077      	b.n	80027c6 <HAL_RCC_OscConfig+0xe02>
 80026d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	fa93 f2a3 	rbit	r2, r3
 80026ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ee:	601a      	str	r2, [r3, #0]
  return result;
 80026f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d102      	bne.n	8002710 <HAL_RCC_OscConfig+0xd4c>
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_RCC_OscConfig+0xe0c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	e01b      	b.n	8002748 <HAL_RCC_OscConfig+0xd84>
 8002710:	f107 0320 	add.w	r3, r7, #32
 8002714:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f107 0320 	add.w	r3, r7, #32
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	fa93 f2a3 	rbit	r2, r3
 8002724:	f107 031c 	add.w	r3, r7, #28
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	f107 0318 	add.w	r3, r7, #24
 800272e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	f107 0318 	add.w	r3, r7, #24
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <HAL_RCC_OscConfig+0xe0c>)
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	f107 0210 	add.w	r2, r7, #16
 800274c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002750:	6011      	str	r1, [r2, #0]
 8002752:	f107 0210 	add.w	r2, r7, #16
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	fa92 f1a2 	rbit	r1, r2
 800275c:	f107 020c 	add.w	r2, r7, #12
 8002760:	6011      	str	r1, [r2, #0]
  return result;
 8002762:	f107 020c 	add.w	r2, r7, #12
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	fab2 f282 	clz	r2, r2
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f042 0220 	orr.w	r2, r2, #32
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f002 021f 	and.w	r2, r2, #31
 8002778:	2101      	movs	r1, #1
 800277a:	fa01 f202 	lsl.w	r2, r1, r2
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d19e      	bne.n	80026c2 <HAL_RCC_OscConfig+0xcfe>
 8002784:	e01e      	b.n	80027c4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e018      	b.n	80027c6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_RCC_OscConfig+0xe0c>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800279c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d108      	bne.n	80027c0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80027ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b09e      	sub	sp, #120	; 0x78
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e162      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027ec:	4b90      	ldr	r3, [pc, #576]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d910      	bls.n	800281c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b8d      	ldr	r3, [pc, #564]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 0207 	bic.w	r2, r3, #7
 8002802:	498b      	ldr	r1, [pc, #556]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b89      	ldr	r3, [pc, #548]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e14a      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002828:	4b82      	ldr	r3, [pc, #520]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	497f      	ldr	r1, [pc, #508]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80dc 	beq.w	8002a00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d13c      	bne.n	80028ca <HAL_RCC_ClockConfig+0xf6>
 8002850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002854:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800285e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	b2db      	uxtb	r3, r3
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	d102      	bne.n	800287a <HAL_RCC_ClockConfig+0xa6>
 8002874:	4b6f      	ldr	r3, [pc, #444]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	e00f      	b.n	800289a <HAL_RCC_ClockConfig+0xc6>
 800287a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	667b      	str	r3, [r7, #100]	; 0x64
 8002888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800288c:	663b      	str	r3, [r7, #96]	; 0x60
 800288e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002896:	4b67      	ldr	r3, [pc, #412]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800289e:	65ba      	str	r2, [r7, #88]	; 0x58
 80028a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028a2:	fa92 f2a2 	rbit	r2, r2
 80028a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80028a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028aa:	fab2 f282 	clz	r2, r2
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	f042 0220 	orr.w	r2, r2, #32
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f002 021f 	and.w	r2, r2, #31
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d17b      	bne.n	80029be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0f3      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d13c      	bne.n	800294c <HAL_RCC_ClockConfig+0x178>
 80028d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d102      	bne.n	80028fc <HAL_RCC_ClockConfig+0x128>
 80028f6:	4b4f      	ldr	r3, [pc, #316]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	e00f      	b.n	800291c <HAL_RCC_ClockConfig+0x148>
 80028fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002900:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	647b      	str	r3, [r7, #68]	; 0x44
 800290a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290e:	643b      	str	r3, [r7, #64]	; 0x40
 8002910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002918:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002920:	63ba      	str	r2, [r7, #56]	; 0x38
 8002922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002924:	fa92 f2a2 	rbit	r2, r2
 8002928:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800292a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800292c:	fab2 f282 	clz	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f042 0220 	orr.w	r2, r2, #32
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	f002 021f 	and.w	r2, r2, #31
 800293c:	2101      	movs	r1, #1
 800293e:	fa01 f202 	lsl.w	r2, r1, r2
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d13a      	bne.n	80029be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0b2      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x2de>
 800294c:	2302      	movs	r3, #2
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d102      	bne.n	8002974 <HAL_RCC_ClockConfig+0x1a0>
 800296e:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	e00d      	b.n	8002990 <HAL_RCC_ClockConfig+0x1bc>
 8002974:	2302      	movs	r3, #2
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	2302      	movs	r3, #2
 8002982:	623b      	str	r3, [r7, #32]
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2202      	movs	r2, #2
 8002992:	61ba      	str	r2, [r7, #24]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	fa92 f2a2 	rbit	r2, r2
 800299a:	617a      	str	r2, [r7, #20]
  return result;
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	fab2 f282 	clz	r2, r2
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f042 0220 	orr.w	r2, r2, #32
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	f002 021f 	and.w	r2, r2, #31
 80029ae:	2101      	movs	r1, #1
 80029b0:	fa01 f202 	lsl.w	r2, r1, r2
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e079      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029be:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f023 0203 	bic.w	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	491a      	ldr	r1, [pc, #104]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d0:	f7fe fcf2 	bl	80013b8 <HAL_GetTick>
 80029d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d8:	f7fe fcee 	bl	80013b8 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e061      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 020c 	and.w	r2, r3, #12
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d1eb      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d214      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0207 	bic.w	r2, r3, #7
 8002a16:	4906      	ldr	r1, [pc, #24]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e040      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x2de>
 8002a30:	40022000 	.word	0x40022000
 8002a34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <HAL_RCC_ClockConfig+0x2e8>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	491a      	ldr	r1, [pc, #104]	; (8002abc <HAL_RCC_ClockConfig+0x2e8>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_RCC_ClockConfig+0x2e8>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4912      	ldr	r1, [pc, #72]	; (8002abc <HAL_RCC_ClockConfig+0x2e8>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a76:	f000 f829 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <HAL_RCC_ClockConfig+0x2e8>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a84:	22f0      	movs	r2, #240	; 0xf0
 8002a86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	fa92 f2a2 	rbit	r2, r2
 8002a8e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	fab2 f282 	clz	r2, r2
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	40d3      	lsrs	r3, r2
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x2ec>)
 8002a9c:	5cd3      	ldrb	r3, [r2, r3]
 8002a9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002aa2:	4a08      	ldr	r2, [pc, #32]	; (8002ac4 <HAL_RCC_ClockConfig+0x2f0>)
 8002aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <HAL_RCC_ClockConfig+0x2f4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fc40 	bl	8001330 <HAL_InitTick>
  
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3778      	adds	r7, #120	; 0x78
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	08004488 	.word	0x08004488
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	20000004 	.word	0x20000004

08002acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b08b      	sub	sp, #44	; 0x2c
 8002ad0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	2300      	movs	r3, #0
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ae6:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d002      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x30>
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0x36>
 8002afa:	e03c      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002afc:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002afe:	623b      	str	r3, [r7, #32]
      break;
 8002b00:	e03c      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b08:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	fa92 f2a2 	rbit	r2, r2
 8002b14:	607a      	str	r2, [r7, #4]
  return result;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	fab2 f282 	clz	r2, r2
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	40d3      	lsrs	r3, r2
 8002b20:	4a1c      	ldr	r2, [pc, #112]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b22:	5cd3      	ldrb	r3, [r2, r3]
 8002b24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b26:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	220f      	movs	r2, #15
 8002b30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	fa92 f2a2 	rbit	r2, r2
 8002b38:	60fa      	str	r2, [r7, #12]
  return result;
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	fab2 f282 	clz	r2, r2
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	40d3      	lsrs	r3, r2
 8002b44:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b54:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fb02 f303 	mul.w	r3, r2, r3
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
 8002b64:	e004      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	4a0c      	ldr	r2, [pc, #48]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	623b      	str	r3, [r7, #32]
      break;
 8002b74:	e002      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b78:	623b      	str	r3, [r7, #32]
      break;
 8002b7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	372c      	adds	r7, #44	; 0x2c
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	007a1200 	.word	0x007a1200
 8002b94:	080044a0 	.word	0x080044a0
 8002b98:	080044b0 	.word	0x080044b0
 8002b9c:	003d0900 	.word	0x003d0900

08002ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000000 	.word	0x20000000

08002bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002bbe:	f7ff ffef 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bcc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	fa92 f2a2 	rbit	r2, r2
 8002bd8:	603a      	str	r2, [r7, #0]
  return result;
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	fab2 f282 	clz	r2, r2
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	40d3      	lsrs	r3, r2
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002be6:	5cd3      	ldrb	r3, [r2, r3]
 8002be8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08004498 	.word	0x08004498

08002bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c02:	f7ff ffcd 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002c06:	4601      	mov	r1, r0
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c10:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	fa92 f2a2 	rbit	r2, r2
 8002c1c:	603a      	str	r2, [r7, #0]
  return result;
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	fab2 f282 	clz	r2, r2
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	40d3      	lsrs	r3, r2
 8002c28:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c2a:	5cd3      	ldrb	r3, [r2, r3]
 8002c2c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	08004498 	.word	0x08004498

08002c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b092      	sub	sp, #72	; 0x48
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80cd 	beq.w	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c64:	4b86      	ldr	r3, [pc, #536]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10e      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c70:	4b83      	ldr	r3, [pc, #524]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	4a82      	ldr	r2, [pc, #520]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	61d3      	str	r3, [r2, #28]
 8002c7c:	4b80      	ldr	r3, [pc, #512]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8e:	4b7d      	ldr	r3, [pc, #500]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d118      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9a:	4b7a      	ldr	r3, [pc, #488]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a79      	ldr	r2, [pc, #484]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe fb87 	bl	80013b8 <HAL_GetTick>
 8002caa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	e008      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cae:	f7fe fb83 	bl	80013b8 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b64      	cmp	r3, #100	; 0x64
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0db      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc0:	4b70      	ldr	r3, [pc, #448]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ccc:	4b6c      	ldr	r3, [pc, #432]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d07d      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d076      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cea:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cf8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d04:	fab3 f383 	clz	r3, r3
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	461a      	mov	r2, r3
 8002d14:	2301      	movs	r3, #1
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4b55      	ldr	r3, [pc, #340]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	461a      	mov	r2, r3
 8002d38:	2300      	movs	r3, #0
 8002d3a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d3c:	4a50      	ldr	r2, [pc, #320]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d045      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fb34 	bl	80013b8 <HAL_GetTick>
 8002d50:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d52:	e00a      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d54:	f7fe fb30 	bl	80013b8 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e086      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	2302      	movs	r3, #2
 8002d78:	623b      	str	r3, [r7, #32]
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	61fb      	str	r3, [r7, #28]
  return result;
 8002d82:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f043 0302 	orr.w	r3, r3, #2
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d102      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002d98:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	e007      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	2202      	movs	r2, #2
 8002db0:	613a      	str	r2, [r7, #16]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	fa92 f2a2 	rbit	r2, r2
 8002db8:	60fa      	str	r2, [r7, #12]
  return result;
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	fab2 f282 	clz	r2, r2
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f002 021f 	and.w	r2, r2, #31
 8002dcc:	2101      	movs	r1, #1
 8002dce:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0bd      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002dd8:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4926      	ldr	r1, [pc, #152]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d105      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df2:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	491a      	ldr	r1, [pc, #104]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	f023 0210 	bic.w	r2, r3, #16
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4912      	ldr	r1, [pc, #72]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	490b      	ldr	r1, [pc, #44]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	4903      	ldr	r1, [pc, #12]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3748      	adds	r7, #72	; 0x48
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40007000 	.word	0x40007000
 8002e88:	10908100 	.word	0x10908100

08002e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e040      	b.n	8002f20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fd feee 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	; 0x24
 8002eb8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fc00 	bl	80036d0 <UART_SetConfig>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e022      	b.n	8002f20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fd2a 	bl	800393c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fdb1 	bl	8003a80 <UART_CheckIdleState>
 8002f1e:	4603      	mov	r3, r0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d178      	bne.n	8003032 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_UART_Transmit+0x24>
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e071      	b.n	8003034 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2221      	movs	r2, #33	; 0x21
 8002f5c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f5e:	f7fe fa2b 	bl	80013b8 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	88fa      	ldrh	r2, [r7, #6]
 8002f68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	88fa      	ldrh	r2, [r7, #6]
 8002f70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7c:	d108      	bne.n	8002f90 <HAL_UART_Transmit+0x68>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d104      	bne.n	8002f90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	e003      	b.n	8002f98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f98:	e030      	b.n	8002ffc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fe13 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d004      	beq.n	8002fba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e03c      	b.n	8003034 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	881a      	ldrh	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fcc:	b292      	uxth	r2, r2
 8002fce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	e008      	b.n	8002fea <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	781a      	ldrb	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	b292      	uxth	r2, r2
 8002fe2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1c8      	bne.n	8002f9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2200      	movs	r2, #0
 8003010:	2140      	movs	r1, #64	; 0x40
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fddc 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e005      	b.n	8003034 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	e000      	b.n	8003034 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003032:	2302      	movs	r3, #2
  }
}
 8003034:	4618      	mov	r0, r3
 8003036:	3720      	adds	r7, #32
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	4613      	mov	r3, r2
 8003048:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003050:	2b20      	cmp	r3, #32
 8003052:	d132      	bne.n	80030ba <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_UART_Receive_IT+0x24>
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e02b      	b.n	80030bc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d018      	beq.n	80030aa <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	e853 3f00 	ldrex	r3, [r3]
 8003084:	613b      	str	r3, [r7, #16]
   return(result);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	623b      	str	r3, [r7, #32]
 8003098:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	69f9      	ldr	r1, [r7, #28]
 800309c:	6a3a      	ldr	r2, [r7, #32]
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e6      	bne.n	8003078 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	461a      	mov	r2, r3
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fdf5 	bl	8003ca0 <UART_Start_Receive_IT>
 80030b6:	4603      	mov	r3, r0
 80030b8:	e000      	b.n	80030bc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80030ba:	2302      	movs	r3, #2
  }
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3728      	adds	r7, #40	; 0x28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b0ba      	sub	sp, #232	; 0xe8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80030ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80030f2:	4013      	ands	r3, r2
 80030f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80030f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d115      	bne.n	800312c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00f      	beq.n	800312c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800310c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d009      	beq.n	800312c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 82ab 	beq.w	8003678 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
      }
      return;
 800312a:	e2a5      	b.n	8003678 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800312c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8117 	beq.w	8003364 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003142:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003146:	4b85      	ldr	r3, [pc, #532]	; (800335c <HAL_UART_IRQHandler+0x298>)
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 810a 	beq.w	8003364 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d011      	beq.n	8003180 <HAL_UART_IRQHandler+0xbc>
 800315c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00b      	beq.n	8003180 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2201      	movs	r2, #1
 800316e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003176:	f043 0201 	orr.w	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d011      	beq.n	80031b0 <HAL_UART_IRQHandler+0xec>
 800318c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00b      	beq.n	80031b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2202      	movs	r2, #2
 800319e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a6:	f043 0204 	orr.w	r2, r3, #4
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d011      	beq.n	80031e0 <HAL_UART_IRQHandler+0x11c>
 80031bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00b      	beq.n	80031e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2204      	movs	r2, #4
 80031ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d6:	f043 0202 	orr.w	r2, r3, #2
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d017      	beq.n	800321c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00b      	beq.n	800321c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2208      	movs	r2, #8
 800320a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003212:	f043 0208 	orr.w	r2, r3, #8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800321c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003224:	2b00      	cmp	r3, #0
 8003226:	d012      	beq.n	800324e <HAL_UART_IRQHandler+0x18a>
 8003228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800322c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00c      	beq.n	800324e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800323c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8211 	beq.w	800367c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00d      	beq.n	8003282 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003288:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d005      	beq.n	80032a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800329a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800329e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d04f      	beq.n	8003346 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fdc0 	bl	8003e2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d141      	bne.n	800333e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3308      	adds	r3, #8
 80032c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032c8:	e853 3f00 	ldrex	r3, [r3]
 80032cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80032d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3308      	adds	r3, #8
 80032e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80032f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1d9      	bne.n	80032ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330a:	2b00      	cmp	r3, #0
 800330c:	d013      	beq.n	8003336 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003312:	4a13      	ldr	r2, [pc, #76]	; (8003360 <HAL_UART_IRQHandler+0x29c>)
 8003314:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe f9a2 	bl	8001664 <HAL_DMA_Abort_IT>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d017      	beq.n	8003356 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003330:	4610      	mov	r0, r2
 8003332:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	e00f      	b.n	8003356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f9b4 	bl	80036a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333c:	e00b      	b.n	8003356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f9b0 	bl	80036a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003344:	e007      	b.n	8003356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f9ac 	bl	80036a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003354:	e192      	b.n	800367c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003356:	bf00      	nop
    return;
 8003358:	e190      	b.n	800367c <HAL_UART_IRQHandler+0x5b8>
 800335a:	bf00      	nop
 800335c:	04000120 	.word	0x04000120
 8003360:	08003ef5 	.word	0x08003ef5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003368:	2b01      	cmp	r3, #1
 800336a:	f040 814b 	bne.w	8003604 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800336e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8144 	beq.w	8003604 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800337c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 813d 	beq.w	8003604 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2210      	movs	r2, #16
 8003390:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	f040 80b5 	bne.w	800350c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8164 	beq.w	8003680 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80033be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033c2:	429a      	cmp	r2, r3
 80033c4:	f080 815c 	bcs.w	8003680 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b20      	cmp	r3, #32
 80033da:	f000 8086 	beq.w	80034ea <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003408:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800340c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003414:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003420:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1da      	bne.n	80033de <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3308      	adds	r3, #8
 800342e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003438:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3308      	adds	r3, #8
 8003448:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800344c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003450:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003452:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003454:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800345e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e1      	bne.n	8003428 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3308      	adds	r3, #8
 800346a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3308      	adds	r3, #8
 8003484:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003488:	66fa      	str	r2, [r7, #108]	; 0x6c
 800348a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800348e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e3      	bne.n	8003464 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ba:	f023 0310 	bic.w	r3, r3, #16
 80034be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80034ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80034da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e4      	bne.n	80034aa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe f884 	bl	80015f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	b29b      	uxth	r3, r3
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f8d7 	bl	80036b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800350a:	e0b9      	b.n	8003680 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003518:	b29b      	uxth	r3, r3
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80ab 	beq.w	8003684 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800352e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80a6 	beq.w	8003684 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800354c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800355a:	647b      	str	r3, [r7, #68]	; 0x44
 800355c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e4      	bne.n	8003538 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3308      	adds	r3, #8
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	623b      	str	r3, [r7, #32]
   return(result);
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3308      	adds	r3, #8
 800358e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003592:	633a      	str	r2, [r7, #48]	; 0x30
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800359a:	e841 2300 	strex	r3, r2, [r1]
 800359e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1e3      	bne.n	800356e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0310 	bic.w	r3, r3, #16
 80035ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e0:	69b9      	ldr	r1, [r7, #24]
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	e841 2300 	strex	r3, r2, [r1]
 80035e8:	617b      	str	r3, [r7, #20]
   return(result);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e4      	bne.n	80035ba <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f85b 	bl	80036b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003602:	e03f      	b.n	8003684 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00e      	beq.n	800362e <HAL_UART_IRQHandler+0x56a>
 8003610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003624:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fe4c 	bl	80042c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800362c:	e02d      	b.n	800368a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800362e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00e      	beq.n	8003658 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800363a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01c      	beq.n	8003688 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
    }
    return;
 8003656:	e017      	b.n	8003688 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <HAL_UART_IRQHandler+0x5c6>
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00c      	beq.n	800368a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fc55 	bl	8003f20 <UART_EndTransmit_IT>
    return;
 8003676:	e008      	b.n	800368a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003678:	bf00      	nop
 800367a:	e006      	b.n	800368a <HAL_UART_IRQHandler+0x5c6>
    return;
 800367c:	bf00      	nop
 800367e:	e004      	b.n	800368a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003680:	bf00      	nop
 8003682:	e002      	b.n	800368a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003684:	bf00      	nop
 8003686:	e000      	b.n	800368a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003688:	bf00      	nop
  }

}
 800368a:	37e8      	adds	r7, #232	; 0xe8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4b8a      	ldr	r3, [pc, #552]	; (8003924 <UART_SetConfig+0x254>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	6979      	ldr	r1, [r7, #20]
 8003704:	430b      	orrs	r3, r1
 8003706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	430a      	orrs	r2, r1
 8003740:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a78      	ldr	r2, [pc, #480]	; (8003928 <UART_SetConfig+0x258>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d120      	bne.n	800378e <UART_SetConfig+0xbe>
 800374c:	4b77      	ldr	r3, [pc, #476]	; (800392c <UART_SetConfig+0x25c>)
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	2b03      	cmp	r3, #3
 8003756:	d817      	bhi.n	8003788 <UART_SetConfig+0xb8>
 8003758:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <UART_SetConfig+0x90>)
 800375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375e:	bf00      	nop
 8003760:	08003771 	.word	0x08003771
 8003764:	0800377d 	.word	0x0800377d
 8003768:	08003783 	.word	0x08003783
 800376c:	08003777 	.word	0x08003777
 8003770:	2300      	movs	r3, #0
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e01d      	b.n	80037b2 <UART_SetConfig+0xe2>
 8003776:	2302      	movs	r3, #2
 8003778:	77fb      	strb	r3, [r7, #31]
 800377a:	e01a      	b.n	80037b2 <UART_SetConfig+0xe2>
 800377c:	2304      	movs	r3, #4
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e017      	b.n	80037b2 <UART_SetConfig+0xe2>
 8003782:	2308      	movs	r3, #8
 8003784:	77fb      	strb	r3, [r7, #31]
 8003786:	e014      	b.n	80037b2 <UART_SetConfig+0xe2>
 8003788:	2310      	movs	r3, #16
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e011      	b.n	80037b2 <UART_SetConfig+0xe2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a67      	ldr	r2, [pc, #412]	; (8003930 <UART_SetConfig+0x260>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d102      	bne.n	800379e <UART_SetConfig+0xce>
 8003798:	2300      	movs	r3, #0
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e009      	b.n	80037b2 <UART_SetConfig+0xe2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a64      	ldr	r2, [pc, #400]	; (8003934 <UART_SetConfig+0x264>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d102      	bne.n	80037ae <UART_SetConfig+0xde>
 80037a8:	2300      	movs	r3, #0
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e001      	b.n	80037b2 <UART_SetConfig+0xe2>
 80037ae:	2310      	movs	r3, #16
 80037b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ba:	d15a      	bne.n	8003872 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80037bc:	7ffb      	ldrb	r3, [r7, #31]
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d827      	bhi.n	8003812 <UART_SetConfig+0x142>
 80037c2:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <UART_SetConfig+0xf8>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	080037ed 	.word	0x080037ed
 80037cc:	080037f5 	.word	0x080037f5
 80037d0:	080037fd 	.word	0x080037fd
 80037d4:	08003813 	.word	0x08003813
 80037d8:	08003803 	.word	0x08003803
 80037dc:	08003813 	.word	0x08003813
 80037e0:	08003813 	.word	0x08003813
 80037e4:	08003813 	.word	0x08003813
 80037e8:	0800380b 	.word	0x0800380b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ec:	f7ff f9e4 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 80037f0:	61b8      	str	r0, [r7, #24]
        break;
 80037f2:	e013      	b.n	800381c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f4:	f7ff fa02 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 80037f8:	61b8      	str	r0, [r7, #24]
        break;
 80037fa:	e00f      	b.n	800381c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037fc:	4b4e      	ldr	r3, [pc, #312]	; (8003938 <UART_SetConfig+0x268>)
 80037fe:	61bb      	str	r3, [r7, #24]
        break;
 8003800:	e00c      	b.n	800381c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003802:	f7ff f963 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8003806:	61b8      	str	r0, [r7, #24]
        break;
 8003808:	e008      	b.n	800381c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800380a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800380e:	61bb      	str	r3, [r7, #24]
        break;
 8003810:	e004      	b.n	800381c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	77bb      	strb	r3, [r7, #30]
        break;
 800381a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d074      	beq.n	800390c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	005a      	lsls	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	441a      	add	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	fbb2 f3f3 	udiv	r3, r2, r3
 8003836:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b0f      	cmp	r3, #15
 800383c:	d916      	bls.n	800386c <UART_SetConfig+0x19c>
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003844:	d212      	bcs.n	800386c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	b29b      	uxth	r3, r3
 800384a:	f023 030f 	bic.w	r3, r3, #15
 800384e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	b29b      	uxth	r3, r3
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	b29a      	uxth	r2, r3
 800385c:	89fb      	ldrh	r3, [r7, #14]
 800385e:	4313      	orrs	r3, r2
 8003860:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	89fa      	ldrh	r2, [r7, #14]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	e04f      	b.n	800390c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	77bb      	strb	r3, [r7, #30]
 8003870:	e04c      	b.n	800390c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003872:	7ffb      	ldrb	r3, [r7, #31]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d828      	bhi.n	80038ca <UART_SetConfig+0x1fa>
 8003878:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <UART_SetConfig+0x1b0>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	080038a5 	.word	0x080038a5
 8003884:	080038ad 	.word	0x080038ad
 8003888:	080038b5 	.word	0x080038b5
 800388c:	080038cb 	.word	0x080038cb
 8003890:	080038bb 	.word	0x080038bb
 8003894:	080038cb 	.word	0x080038cb
 8003898:	080038cb 	.word	0x080038cb
 800389c:	080038cb 	.word	0x080038cb
 80038a0:	080038c3 	.word	0x080038c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a4:	f7ff f988 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 80038a8:	61b8      	str	r0, [r7, #24]
        break;
 80038aa:	e013      	b.n	80038d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038ac:	f7ff f9a6 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 80038b0:	61b8      	str	r0, [r7, #24]
        break;
 80038b2:	e00f      	b.n	80038d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038b4:	4b20      	ldr	r3, [pc, #128]	; (8003938 <UART_SetConfig+0x268>)
 80038b6:	61bb      	str	r3, [r7, #24]
        break;
 80038b8:	e00c      	b.n	80038d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ba:	f7ff f907 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 80038be:	61b8      	str	r0, [r7, #24]
        break;
 80038c0:	e008      	b.n	80038d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c6:	61bb      	str	r3, [r7, #24]
        break;
 80038c8:	e004      	b.n	80038d4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	77bb      	strb	r3, [r7, #30]
        break;
 80038d2:	bf00      	nop
    }

    if (pclk != 0U)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d018      	beq.n	800390c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	085a      	lsrs	r2, r3, #1
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	441a      	add	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b0f      	cmp	r3, #15
 80038f2:	d909      	bls.n	8003908 <UART_SetConfig+0x238>
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fa:	d205      	bcs.n	8003908 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	b29a      	uxth	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60da      	str	r2, [r3, #12]
 8003906:	e001      	b.n	800390c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003918:	7fbb      	ldrb	r3, [r7, #30]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	efff69f3 	.word	0xefff69f3
 8003928:	40013800 	.word	0x40013800
 800392c:	40021000 	.word	0x40021000
 8003930:	40004400 	.word	0x40004400
 8003934:	40004800 	.word	0x40004800
 8003938:	007a1200 	.word	0x007a1200

0800393c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01a      	beq.n	8003a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a3a:	d10a      	bne.n	8003a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]
  }
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b098      	sub	sp, #96	; 0x60
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a90:	f7fd fc92 	bl	80013b8 <HAL_GetTick>
 8003a94:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d12e      	bne.n	8003b02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aac:	2200      	movs	r2, #0
 8003aae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f88c 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d021      	beq.n	8003b02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac6:	e853 3f00 	ldrex	r3, [r3]
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003adc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ade:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ae4:	e841 2300 	strex	r3, r2, [r1]
 8003ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e6      	bne.n	8003abe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e062      	b.n	8003bc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d149      	bne.n	8003ba4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f856 	bl	8003bd0 <UART_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d03c      	beq.n	8003ba4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	623b      	str	r3, [r7, #32]
   return(result);
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b48:	633b      	str	r3, [r7, #48]	; 0x30
 8003b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e6      	bne.n	8003b2a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3308      	adds	r3, #8
 8003b62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	e853 3f00 	ldrex	r3, [r3]
 8003b6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3308      	adds	r3, #8
 8003b7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b7c:	61fa      	str	r2, [r7, #28]
 8003b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	69b9      	ldr	r1, [r7, #24]
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	617b      	str	r3, [r7, #20]
   return(result);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e5      	bne.n	8003b5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e011      	b.n	8003bc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3758      	adds	r7, #88	; 0x58
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be0:	e049      	b.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d045      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bea:	f7fd fbe5 	bl	80013b8 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d302      	bcc.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e048      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d031      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d110      	bne.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2208      	movs	r2, #8
 8003c26:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f8ff 	bl	8003e2c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2208      	movs	r2, #8
 8003c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e029      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c50:	d111      	bne.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f8e5 	bl	8003e2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e00f      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	bf0c      	ite	eq
 8003c86:	2301      	moveq	r3, #1
 8003c88:	2300      	movne	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d0a6      	beq.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b097      	sub	sp, #92	; 0x5c
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	4613      	mov	r3, r2
 8003cac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	88fa      	ldrh	r2, [r7, #6]
 8003cb8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	88fa      	ldrh	r2, [r7, #6]
 8003cc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd2:	d10e      	bne.n	8003cf2 <UART_Start_Receive_IT+0x52>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <UART_Start_Receive_IT+0x48>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ce2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ce6:	e02d      	b.n	8003d44 <UART_Start_Receive_IT+0xa4>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	22ff      	movs	r2, #255	; 0xff
 8003cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cf0:	e028      	b.n	8003d44 <UART_Start_Receive_IT+0xa4>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10d      	bne.n	8003d16 <UART_Start_Receive_IT+0x76>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d104      	bne.n	8003d0c <UART_Start_Receive_IT+0x6c>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	22ff      	movs	r2, #255	; 0xff
 8003d06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d0a:	e01b      	b.n	8003d44 <UART_Start_Receive_IT+0xa4>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	227f      	movs	r2, #127	; 0x7f
 8003d10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d14:	e016      	b.n	8003d44 <UART_Start_Receive_IT+0xa4>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d1e:	d10d      	bne.n	8003d3c <UART_Start_Receive_IT+0x9c>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d104      	bne.n	8003d32 <UART_Start_Receive_IT+0x92>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	227f      	movs	r2, #127	; 0x7f
 8003d2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d30:	e008      	b.n	8003d44 <UART_Start_Receive_IT+0xa4>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	223f      	movs	r2, #63	; 0x3f
 8003d36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d3a:	e003      	b.n	8003d44 <UART_Start_Receive_IT+0xa4>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2222      	movs	r2, #34	; 0x22
 8003d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3308      	adds	r3, #8
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3308      	adds	r3, #8
 8003d72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d74:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d76:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e5      	bne.n	8003d54 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d90:	d107      	bne.n	8003da2 <UART_Start_Receive_IT+0x102>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d103      	bne.n	8003da2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a21      	ldr	r2, [pc, #132]	; (8003e24 <UART_Start_Receive_IT+0x184>)
 8003d9e:	669a      	str	r2, [r3, #104]	; 0x68
 8003da0:	e002      	b.n	8003da8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a20      	ldr	r2, [pc, #128]	; (8003e28 <UART_Start_Receive_IT+0x188>)
 8003da6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d019      	beq.n	8003de4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dce:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e6      	bne.n	8003db0 <UART_Start_Receive_IT+0x110>
 8003de2:	e018      	b.n	8003e16 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	613b      	str	r3, [r7, #16]
   return(result);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f043 0320 	orr.w	r3, r3, #32
 8003df8:	653b      	str	r3, [r7, #80]	; 0x50
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e02:	623b      	str	r3, [r7, #32]
 8003e04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	69f9      	ldr	r1, [r7, #28]
 8003e08:	6a3a      	ldr	r2, [r7, #32]
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e6      	bne.n	8003de4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	375c      	adds	r7, #92	; 0x5c
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	0800411d 	.word	0x0800411d
 8003e28:	08003f75 	.word	0x08003f75

08003e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b095      	sub	sp, #84	; 0x54
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e52:	643b      	str	r3, [r7, #64]	; 0x40
 8003e54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e6      	bne.n	8003e34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3308      	adds	r3, #8
 8003e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e5      	bne.n	8003e66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d118      	bne.n	8003ed4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f023 0310 	bic.w	r3, r3, #16
 8003eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec4:	6979      	ldr	r1, [r7, #20]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	e841 2300 	strex	r3, r2, [r1]
 8003ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e6      	bne.n	8003ea2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ee8:	bf00      	nop
 8003eea:	3754      	adds	r7, #84	; 0x54
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f7ff fbc6 	bl	80036a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6979      	ldr	r1, [r7, #20]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	613b      	str	r3, [r7, #16]
   return(result);
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e6      	bne.n	8003f28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fb92 	bl	8003690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f6c:	bf00      	nop
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b09c      	sub	sp, #112	; 0x70
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f82:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f8c:	2b22      	cmp	r3, #34	; 0x22
 8003f8e:	f040 80b9 	bne.w	8004104 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f98:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003fa0:	b2d9      	uxtb	r1, r3
 8003fa2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fac:	400a      	ands	r2, r1
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f040 809c 	bne.w	8004114 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ffa:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ffc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004000:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e6      	bne.n	8003fdc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3308      	adds	r3, #8
 8004014:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800401e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	667b      	str	r3, [r7, #100]	; 0x64
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3308      	adds	r3, #8
 800402c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800402e:	647a      	str	r2, [r7, #68]	; 0x44
 8004030:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800403c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e5      	bne.n	800400e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d018      	beq.n	8004096 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	623b      	str	r3, [r7, #32]
   return(result);
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004078:	663b      	str	r3, [r7, #96]	; 0x60
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004082:	633b      	str	r3, [r7, #48]	; 0x30
 8004084:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e6      	bne.n	8004064 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409a:	2b01      	cmp	r3, #1
 800409c:	d12e      	bne.n	80040fc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f023 0310 	bic.w	r3, r3, #16
 80040b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040c2:	61fb      	str	r3, [r7, #28]
 80040c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	69b9      	ldr	r1, [r7, #24]
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	617b      	str	r3, [r7, #20]
   return(result);
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e6      	bne.n	80040a4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d103      	bne.n	80040ec <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2210      	movs	r2, #16
 80040ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040f2:	4619      	mov	r1, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fadf 	bl	80036b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040fa:	e00b      	b.n	8004114 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7fc fd43 	bl	8000b88 <HAL_UART_RxCpltCallback>
}
 8004102:	e007      	b.n	8004114 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0208 	orr.w	r2, r2, #8
 8004112:	619a      	str	r2, [r3, #24]
}
 8004114:	bf00      	nop
 8004116:	3770      	adds	r7, #112	; 0x70
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b09c      	sub	sp, #112	; 0x70
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800412a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004134:	2b22      	cmp	r3, #34	; 0x22
 8004136:	f040 80b9 	bne.w	80042ac <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004140:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800414a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800414e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004152:	4013      	ands	r3, r2
 8004154:	b29a      	uxth	r2, r3
 8004156:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004158:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415e:	1c9a      	adds	r2, r3, #2
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	f040 809c 	bne.w	80042bc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004198:	667b      	str	r3, [r7, #100]	; 0x64
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041a2:	657b      	str	r3, [r7, #84]	; 0x54
 80041a4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80041a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e6      	bne.n	8004184 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3308      	adds	r3, #8
 80041bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	663b      	str	r3, [r7, #96]	; 0x60
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3308      	adds	r3, #8
 80041d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041d6:	643a      	str	r2, [r7, #64]	; 0x40
 80041d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e5      	bne.n	80041b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d018      	beq.n	800423e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	61fb      	str	r3, [r7, #28]
   return(result);
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004220:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800422c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e6      	bne.n	800420c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004242:	2b01      	cmp	r3, #1
 8004244:	d12e      	bne.n	80042a4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	60bb      	str	r3, [r7, #8]
   return(result);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f023 0310 	bic.w	r3, r3, #16
 8004260:	65bb      	str	r3, [r7, #88]	; 0x58
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800426a:	61bb      	str	r3, [r7, #24]
 800426c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	6979      	ldr	r1, [r7, #20]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	613b      	str	r3, [r7, #16]
   return(result);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e6      	bne.n	800424c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b10      	cmp	r3, #16
 800428a:	d103      	bne.n	8004294 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2210      	movs	r2, #16
 8004292:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800429a:	4619      	mov	r1, r3
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff fa0b 	bl	80036b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042a2:	e00b      	b.n	80042bc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7fc fc6f 	bl	8000b88 <HAL_UART_RxCpltCallback>
}
 80042aa:	e007      	b.n	80042bc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0208 	orr.w	r2, r2, #8
 80042ba:	619a      	str	r2, [r3, #24]
}
 80042bc:	bf00      	nop
 80042be:	3770      	adds	r7, #112	; 0x70
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <__libc_init_array>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	4d0d      	ldr	r5, [pc, #52]	; (8004310 <__libc_init_array+0x38>)
 80042dc:	4c0d      	ldr	r4, [pc, #52]	; (8004314 <__libc_init_array+0x3c>)
 80042de:	1b64      	subs	r4, r4, r5
 80042e0:	10a4      	asrs	r4, r4, #2
 80042e2:	2600      	movs	r6, #0
 80042e4:	42a6      	cmp	r6, r4
 80042e6:	d109      	bne.n	80042fc <__libc_init_array+0x24>
 80042e8:	4d0b      	ldr	r5, [pc, #44]	; (8004318 <__libc_init_array+0x40>)
 80042ea:	4c0c      	ldr	r4, [pc, #48]	; (800431c <__libc_init_array+0x44>)
 80042ec:	f000 f886 	bl	80043fc <_init>
 80042f0:	1b64      	subs	r4, r4, r5
 80042f2:	10a4      	asrs	r4, r4, #2
 80042f4:	2600      	movs	r6, #0
 80042f6:	42a6      	cmp	r6, r4
 80042f8:	d105      	bne.n	8004306 <__libc_init_array+0x2e>
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004300:	4798      	blx	r3
 8004302:	3601      	adds	r6, #1
 8004304:	e7ee      	b.n	80042e4 <__libc_init_array+0xc>
 8004306:	f855 3b04 	ldr.w	r3, [r5], #4
 800430a:	4798      	blx	r3
 800430c:	3601      	adds	r6, #1
 800430e:	e7f2      	b.n	80042f6 <__libc_init_array+0x1e>
 8004310:	080044c4 	.word	0x080044c4
 8004314:	080044c4 	.word	0x080044c4
 8004318:	080044c4 	.word	0x080044c4
 800431c:	080044d0 	.word	0x080044d0

08004320 <memset>:
 8004320:	4402      	add	r2, r0
 8004322:	4603      	mov	r3, r0
 8004324:	4293      	cmp	r3, r2
 8004326:	d100      	bne.n	800432a <memset+0xa>
 8004328:	4770      	bx	lr
 800432a:	f803 1b01 	strb.w	r1, [r3], #1
 800432e:	e7f9      	b.n	8004324 <memset+0x4>

08004330 <register_fini>:
 8004330:	4b02      	ldr	r3, [pc, #8]	; (800433c <register_fini+0xc>)
 8004332:	b113      	cbz	r3, 800433a <register_fini+0xa>
 8004334:	4802      	ldr	r0, [pc, #8]	; (8004340 <register_fini+0x10>)
 8004336:	f000 b805 	b.w	8004344 <atexit>
 800433a:	4770      	bx	lr
 800433c:	00000000 	.word	0x00000000
 8004340:	08004351 	.word	0x08004351

08004344 <atexit>:
 8004344:	2300      	movs	r3, #0
 8004346:	4601      	mov	r1, r0
 8004348:	461a      	mov	r2, r3
 800434a:	4618      	mov	r0, r3
 800434c:	f000 b816 	b.w	800437c <__register_exitproc>

08004350 <__libc_fini_array>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	4d07      	ldr	r5, [pc, #28]	; (8004370 <__libc_fini_array+0x20>)
 8004354:	4c07      	ldr	r4, [pc, #28]	; (8004374 <__libc_fini_array+0x24>)
 8004356:	1b64      	subs	r4, r4, r5
 8004358:	10a4      	asrs	r4, r4, #2
 800435a:	b91c      	cbnz	r4, 8004364 <__libc_fini_array+0x14>
 800435c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004360:	f000 b852 	b.w	8004408 <_fini>
 8004364:	3c01      	subs	r4, #1
 8004366:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800436a:	4798      	blx	r3
 800436c:	e7f5      	b.n	800435a <__libc_fini_array+0xa>
 800436e:	bf00      	nop
 8004370:	080044d0 	.word	0x080044d0
 8004374:	080044d4 	.word	0x080044d4

08004378 <__retarget_lock_acquire_recursive>:
 8004378:	4770      	bx	lr

0800437a <__retarget_lock_release_recursive>:
 800437a:	4770      	bx	lr

0800437c <__register_exitproc>:
 800437c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004380:	4d1c      	ldr	r5, [pc, #112]	; (80043f4 <__register_exitproc+0x78>)
 8004382:	4606      	mov	r6, r0
 8004384:	6828      	ldr	r0, [r5, #0]
 8004386:	4698      	mov	r8, r3
 8004388:	460f      	mov	r7, r1
 800438a:	4691      	mov	r9, r2
 800438c:	f7ff fff4 	bl	8004378 <__retarget_lock_acquire_recursive>
 8004390:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <__register_exitproc+0x7c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8004398:	4628      	mov	r0, r5
 800439a:	b91c      	cbnz	r4, 80043a4 <__register_exitproc+0x28>
 800439c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80043a0:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80043a4:	6865      	ldr	r5, [r4, #4]
 80043a6:	6800      	ldr	r0, [r0, #0]
 80043a8:	2d1f      	cmp	r5, #31
 80043aa:	dd05      	ble.n	80043b8 <__register_exitproc+0x3c>
 80043ac:	f7ff ffe5 	bl	800437a <__retarget_lock_release_recursive>
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043b8:	b19e      	cbz	r6, 80043e2 <__register_exitproc+0x66>
 80043ba:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80043be:	2201      	movs	r2, #1
 80043c0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80043c4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80043c8:	40aa      	lsls	r2, r5
 80043ca:	4313      	orrs	r3, r2
 80043cc:	2e02      	cmp	r6, #2
 80043ce:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80043d2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80043d6:	bf02      	ittt	eq
 80043d8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80043dc:	431a      	orreq	r2, r3
 80043de:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 80043e2:	1c6b      	adds	r3, r5, #1
 80043e4:	3502      	adds	r5, #2
 80043e6:	6063      	str	r3, [r4, #4]
 80043e8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80043ec:	f7ff ffc5 	bl	800437a <__retarget_lock_release_recursive>
 80043f0:	2000      	movs	r0, #0
 80043f2:	e7df      	b.n	80043b4 <__register_exitproc+0x38>
 80043f4:	20000438 	.word	0x20000438
 80043f8:	080044c0 	.word	0x080044c0

080043fc <_init>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	bf00      	nop
 8004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004402:	bc08      	pop	{r3}
 8004404:	469e      	mov	lr, r3
 8004406:	4770      	bx	lr

08004408 <_fini>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	bf00      	nop
 800440c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440e:	bc08      	pop	{r3}
 8004410:	469e      	mov	lr, r3
 8004412:	4770      	bx	lr
