
STM32F303CoreWirelessRecieve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004270  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004480  08004480  0002043c  2**0
                  CONTENTS
  4 .ARM          00000000  08004480  08004480  0002043c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004480  08004480  0002043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800448c  0800448c  0001448c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  08004490  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000043c  080048cc  0002043c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  080048cc  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c87c  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f44  00000000  00000000  0002cce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  0002ec30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  0002f450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1ae  00000000  00000000  0002fbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b004  00000000  00000000  0004bd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a8f8  00000000  00000000  00056d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f168a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a4  00000000  00000000  000f16e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000043c 	.word	0x2000043c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043e0 	.word	0x080043e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000440 	.word	0x20000440
 80001c4:	080043e0 	.word	0x080043e0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <_ZN11UsartBufferC1Ev>:
	uint32_t rp_;
	uint32_t wp_;
	uint32_t nl_count_;

public:
  UsartBuffer()
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  : rp_(0)
  , wp_(0)
  , nl_count_(0)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4618      	mov	r0, r3
 80001e4:	2380      	movs	r3, #128	; 0x80
 80001e6:	461a      	mov	r2, r3
 80001e8:	2100      	movs	r1, #0
 80001ea:	f004 f88b 	bl	8004304 <memset>
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2200      	movs	r2, #0
 80001fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  {
  }
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4618      	mov	r0, r3
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <_ZN11UsartBuffer7enqueueEh>:
  bool enqueue(unsigned char data){
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	460b      	mov	r3, r1
 800021a:	70fb      	strb	r3, [r7, #3]
	  if(((wp_ - rp_) & (BUFFER_SIZE-1)) == (BUFFER_SIZE-1)){
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000228:	1ad3      	subs	r3, r2, r3
 800022a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800022e:	2b7f      	cmp	r3, #127	; 0x7f
 8000230:	d101      	bne.n	8000236 <_ZN11UsartBuffer7enqueueEh+0x26>
		  return false;
 8000232:	2300      	movs	r3, #0
 8000234:	e013      	b.n	800025e <_ZN11UsartBuffer7enqueueEh+0x4e>
	  }
	  if(data == NL_CODE){
 8000236:	78fb      	ldrb	r3, [r7, #3]
 8000238:	2b0d      	cmp	r3, #13
 800023a:	d106      	bne.n	800024a <_ZN11UsartBuffer7enqueueEh+0x3a>
		  ++nl_count_;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000242:	1c5a      	adds	r2, r3, #1
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  }
	  buffer_[wp_] = data;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000250:	687a      	ldr	r2, [r7, #4]
 8000252:	78f9      	ldrb	r1, [r7, #3]
 8000254:	54d1      	strb	r1, [r2, r3]
	  inc_wp();
 8000256:	6878      	ldr	r0, [r7, #4]
 8000258:	f000 f805 	bl	8000266 <_ZN11UsartBuffer6inc_wpEv>
	  return true;
 800025c:	2301      	movs	r3, #1
  }
 800025e:	4618      	mov	r0, r3
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}

08000266 <_ZN11UsartBuffer6inc_wpEv>:
  void inc_wp(){
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
	  wp_ = (++wp_) & (BUFFER_SIZE-1);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <_ZN11UsartBuffer6inc_rpEv>:
  void inc_rp(){
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	  rp_ = (++rp_) & (BUFFER_SIZE-1);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002a6:	1c5a      	adds	r2, r3, #1
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr

080002ca <_ZN11UsartBuffer7dequeueERh>:
  bool dequeue(unsigned char & data){
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b082      	sub	sp, #8
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	6078      	str	r0, [r7, #4]
 80002d2:	6039      	str	r1, [r7, #0]
	  if(rp_ == wp_){
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d101      	bne.n	80002e8 <_ZN11UsartBuffer7dequeueERh+0x1e>
		  return false;
 80002e4:	2300      	movs	r3, #0
 80002e6:	e018      	b.n	800031a <_ZN11UsartBuffer7dequeueERh+0x50>
	  }
	  if(buffer_[rp_] == NL_CODE){
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	5cd3      	ldrb	r3, [r2, r3]
 80002f2:	2b0d      	cmp	r3, #13
 80002f4:	d106      	bne.n	8000304 <_ZN11UsartBuffer7dequeueERh+0x3a>
		  --nl_count_;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002fc:	1e5a      	subs	r2, r3, #1
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  }
	  data = buffer_[rp_];
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	5cd2      	ldrb	r2, [r2, r3]
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	701a      	strb	r2, [r3, #0]
	  inc_rp();
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f7ff ffc0 	bl	8000298 <_ZN11UsartBuffer6inc_rpEv>
	  return true;
 8000318:	2301      	movs	r3, #1
  }
 800031a:	4618      	mov	r0, r3
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}

08000322 <_ZN11UsartBuffer8get_lineEPcm>:
  uint32_t get_line(char* buff, uint32_t len){
 8000322:	b580      	push	{r7, lr}
 8000324:	b086      	sub	sp, #24
 8000326:	af00      	add	r7, sp, #0
 8000328:	60f8      	str	r0, [r7, #12]
 800032a:	60b9      	str	r1, [r7, #8]
 800032c:	607a      	str	r2, [r7, #4]
	  uint32_t i = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]
	  while(1){
		  if(i == len) break;
 8000332:	697a      	ldr	r2, [r7, #20]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	429a      	cmp	r2, r3
 8000338:	d01b      	beq.n	8000372 <_ZN11UsartBuffer8get_lineEPcm+0x50>
		  uint8_t data = ' ';
 800033a:	2320      	movs	r3, #32
 800033c:	74bb      	strb	r3, [r7, #18]
		  bool res = dequeue(data);
 800033e:	f107 0312 	add.w	r3, r7, #18
 8000342:	4619      	mov	r1, r3
 8000344:	68f8      	ldr	r0, [r7, #12]
 8000346:	f7ff ffc0 	bl	80002ca <_ZN11UsartBuffer7dequeueERh>
 800034a:	4603      	mov	r3, r0
 800034c:	74fb      	strb	r3, [r7, #19]
		  if(!res) break;
 800034e:	7cfb      	ldrb	r3, [r7, #19]
 8000350:	f083 0301 	eor.w	r3, r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d10d      	bne.n	8000376 <_ZN11UsartBuffer8get_lineEPcm+0x54>
		  else buff[i] = data;
 800035a:	68ba      	ldr	r2, [r7, #8]
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	4413      	add	r3, r2
 8000360:	7cba      	ldrb	r2, [r7, #18]
 8000362:	701a      	strb	r2, [r3, #0]
		  ++i;
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	3301      	adds	r3, #1
 8000368:	617b      	str	r3, [r7, #20]
		  if(data == NL_CODE) break;
 800036a:	7cbb      	ldrb	r3, [r7, #18]
 800036c:	2b0d      	cmp	r3, #13
 800036e:	d004      	beq.n	800037a <_ZN11UsartBuffer8get_lineEPcm+0x58>
	  }
 8000370:	e7df      	b.n	8000332 <_ZN11UsartBuffer8get_lineEPcm+0x10>
		  if(i == len) break;
 8000372:	bf00      	nop
 8000374:	e002      	b.n	800037c <_ZN11UsartBuffer8get_lineEPcm+0x5a>
		  if(!res) break;
 8000376:	bf00      	nop
 8000378:	e000      	b.n	800037c <_ZN11UsartBuffer8get_lineEPcm+0x5a>
		  if(data == NL_CODE) break;
 800037a:	bf00      	nop
	  return i;
 800037c:	697b      	ldr	r3, [r7, #20]
  }
 800037e:	4618      	mov	r0, r3
 8000380:	3718      	adds	r7, #24
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <_ZN11UsartBuffer8nl_countEv>:
  uint32_t nl_count(){
 8000386:	b480      	push	{r7}
 8000388:	b083      	sub	sp, #12
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
	  return nl_count_;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  }
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <_ZN21CoreWirelessControlRx8char2intERc>:
	bool buttons_[16] = {};
	char test_;

	// original func for minimum flash size
	// input char should be a-f,0-9,A-F
	inline uint8_t char2int(char & c) {
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
		int8_t ans = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	73fb      	strb	r3, [r7, #15]
		if('a' <= c && c <= 'f'){
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b60      	cmp	r3, #96	; 0x60
 80003b4:	d909      	bls.n	80003ca <_ZN21CoreWirelessControlRx8char2intERc+0x2a>
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b66      	cmp	r3, #102	; 0x66
 80003bc:	d805      	bhi.n	80003ca <_ZN21CoreWirelessControlRx8char2intERc+0x2a>
			ans = c - 'a' + 10;
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	3b57      	subs	r3, #87	; 0x57
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	73fb      	strb	r3, [r7, #15]
 80003c8:	e01a      	b.n	8000400 <_ZN21CoreWirelessControlRx8char2intERc+0x60>
		} else if('A' <= c && c <= 'F'){
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b40      	cmp	r3, #64	; 0x40
 80003d0:	d909      	bls.n	80003e6 <_ZN21CoreWirelessControlRx8char2intERc+0x46>
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b46      	cmp	r3, #70	; 0x46
 80003d8:	d805      	bhi.n	80003e6 <_ZN21CoreWirelessControlRx8char2intERc+0x46>
			ans = c - 'A' + 10;
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	3b37      	subs	r3, #55	; 0x37
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	73fb      	strb	r3, [r7, #15]
 80003e4:	e00c      	b.n	8000400 <_ZN21CoreWirelessControlRx8char2intERc+0x60>
		} else if('0' <= c && c <= '9'){
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b2f      	cmp	r3, #47	; 0x2f
 80003ec:	d908      	bls.n	8000400 <_ZN21CoreWirelessControlRx8char2intERc+0x60>
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b39      	cmp	r3, #57	; 0x39
 80003f4:	d804      	bhi.n	8000400 <_ZN21CoreWirelessControlRx8char2intERc+0x60>
			ans = c - '0';
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	3b30      	subs	r3, #48	; 0x30
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	73fb      	strb	r3, [r7, #15]
		}
		return ans;
 8000400:	7bfb      	ldrb	r3, [r7, #15]
	}
 8000402:	4618      	mov	r0, r3
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <_ZN21CoreWirelessControlRxC1EP11UsartBuffer>:

public:
  CoreWirelessControlRx(UsartBuffer * usart)
 800040e:	b480      	push	{r7}
 8000410:	b083      	sub	sp, #12
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
 8000416:	6039      	str	r1, [r7, #0]
  {
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3304      	adds	r3, #4
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	811a      	strh	r2, [r3, #8]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	330e      	adds	r3, #14
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
	  usart_ = usart;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	683a      	ldr	r2, [r7, #0]
 8000436:	601a      	str	r2, [r3, #0]
  }
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <_ZN21CoreWirelessControlRx5parseEv>:
  bool parse(){
 8000446:	b590      	push	{r4, r7, lr}
 8000448:	b093      	sub	sp, #76	; 0x4c
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]

    // parse when buffer has new line code
    if(usart_->nl_count() <= 0){
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff97 	bl	8000386 <_ZN11UsartBuffer8nl_countEv>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	bf0c      	ite	eq
 800045e:	2301      	moveq	r3, #1
 8000460:	2300      	movne	r3, #0
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <_ZN21CoreWirelessControlRx5parseEv+0x26>
    	return false;
 8000468:	2300      	movs	r3, #0
 800046a:	e124      	b.n	80006b6 <_ZN21CoreWirelessControlRx5parseEv+0x270>
    }
    char data[40] = {};
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	2224      	movs	r2, #36	; 0x24
 8000476:	2100      	movs	r1, #0
 8000478:	4618      	mov	r0, r3
 800047a:	f003 ff43 	bl	8004304 <memset>
    uint32_t len = usart_->get_line(data, 40);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f107 010c 	add.w	r1, r7, #12
 8000486:	2228      	movs	r2, #40	; 0x28
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff4a 	bl	8000322 <_ZN11UsartBuffer8get_lineEPcm>
 800048e:	63b8      	str	r0, [r7, #56]	; 0x38
    if(len < 35){
 8000490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000492:	2b22      	cmp	r3, #34	; 0x22
 8000494:	d801      	bhi.n	800049a <_ZN21CoreWirelessControlRx5parseEv+0x54>
     return false;
 8000496:	2300      	movs	r3, #0
 8000498:	e10d      	b.n	80006b6 <_ZN21CoreWirelessControlRx5parseEv+0x270>
    }
    uint32_t idx = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	647b      	str	r3, [r7, #68]	; 0x44
    while(1){
	  if(len < idx + 35){
 800049e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004a0:	3323      	adds	r3, #35	; 0x23
 80004a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d201      	bcs.n	80004ac <_ZN21CoreWirelessControlRx5parseEv+0x66>
		 return false;
 80004a8:	2300      	movs	r3, #0
 80004aa:	e104      	b.n	80006b6 <_ZN21CoreWirelessControlRx5parseEv+0x270>
	  }
	  if(data[idx] == '0' && data[idx+1] == '0' && data[idx+34] == '\r') {
 80004ac:	f107 020c 	add.w	r2, r7, #12
 80004b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004b2:	4413      	add	r3, r2
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b30      	cmp	r3, #48	; 0x30
 80004b8:	f040 80f8 	bne.w	80006ac <_ZN21CoreWirelessControlRx5parseEv+0x266>
 80004bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004be:	3301      	adds	r3, #1
 80004c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80004c4:	4413      	add	r3, r2
 80004c6:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80004ca:	2b30      	cmp	r3, #48	; 0x30
 80004cc:	f040 80ee 	bne.w	80006ac <_ZN21CoreWirelessControlRx5parseEv+0x266>
 80004d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004d2:	3322      	adds	r3, #34	; 0x22
 80004d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80004d8:	4413      	add	r3, r2
 80004da:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80004de:	2b0d      	cmp	r3, #13
 80004e0:	f040 80e4 	bne.w	80006ac <_ZN21CoreWirelessControlRx5parseEv+0x266>

		for(int i = 0; i < 5; ++i){
 80004e4:	2300      	movs	r3, #0
 80004e6:	643b      	str	r3, [r7, #64]	; 0x40
 80004e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	dc2f      	bgt.n	800054e <_ZN21CoreWirelessControlRx5parseEv+0x108>
			axis_[i] = (int8_t)((char2int(data[idx+14+i*3]) << 4) | char2int(data[idx+15+i*3]));
 80004ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80004f0:	4613      	mov	r3, r2
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	4413      	add	r3, r2
 80004f6:	461a      	mov	r2, r3
 80004f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004fa:	4413      	add	r3, r2
 80004fc:	330e      	adds	r3, #14
 80004fe:	f107 020c 	add.w	r2, r7, #12
 8000502:	4413      	add	r3, r2
 8000504:	4619      	mov	r1, r3
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ff4a 	bl	80003a0 <_ZN21CoreWirelessControlRx8char2intERc>
 800050c:	4603      	mov	r3, r0
 800050e:	011b      	lsls	r3, r3, #4
 8000510:	b25c      	sxtb	r4, r3
 8000512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000514:	4613      	mov	r3, r2
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	4413      	add	r3, r2
 800051a:	461a      	mov	r2, r3
 800051c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800051e:	4413      	add	r3, r2
 8000520:	330f      	adds	r3, #15
 8000522:	f107 020c 	add.w	r2, r7, #12
 8000526:	4413      	add	r3, r2
 8000528:	4619      	mov	r1, r3
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f7ff ff38 	bl	80003a0 <_ZN21CoreWirelessControlRx8char2intERc>
 8000530:	4603      	mov	r3, r0
 8000532:	b25b      	sxtb	r3, r3
 8000534:	4323      	orrs	r3, r4
 8000536:	b25b      	sxtb	r3, r3
 8000538:	b219      	sxth	r1, r3
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	4413      	add	r3, r2
 8000542:	460a      	mov	r2, r1
 8000544:	809a      	strh	r2, [r3, #4]
		for(int i = 0; i < 5; ++i){
 8000546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000548:	3301      	adds	r3, #1
 800054a:	643b      	str	r3, [r7, #64]	; 0x40
 800054c:	e7cc      	b.n	80004e8 <_ZN21CoreWirelessControlRx5parseEv+0xa2>
		}
		for(int i = 0; i < 2; ++i){
 800054e:	2300      	movs	r3, #0
 8000550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000554:	2b01      	cmp	r3, #1
 8000556:	f300 80a7 	bgt.w	80006a8 <_ZN21CoreWirelessControlRx5parseEv+0x262>
			uint8_t a1 = char2int(data[idx+29+i*3]);
 800055a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800055c:	4613      	mov	r3, r2
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	4413      	add	r3, r2
 8000562:	461a      	mov	r2, r3
 8000564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000566:	4413      	add	r3, r2
 8000568:	331d      	adds	r3, #29
 800056a:	f107 020c 	add.w	r2, r7, #12
 800056e:	4413      	add	r3, r2
 8000570:	4619      	mov	r1, r3
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff ff14 	bl	80003a0 <_ZN21CoreWirelessControlRx8char2intERc>
 8000578:	4603      	mov	r3, r0
 800057a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			uint8_t a2 = char2int(data[idx+30+i*3]);
 800057e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000580:	4613      	mov	r3, r2
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	4413      	add	r3, r2
 8000586:	461a      	mov	r2, r3
 8000588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800058a:	4413      	add	r3, r2
 800058c:	331e      	adds	r3, #30
 800058e:	f107 020c 	add.w	r2, r7, #12
 8000592:	4413      	add	r3, r2
 8000594:	4619      	mov	r1, r3
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff ff02 	bl	80003a0 <_ZN21CoreWirelessControlRx8char2intERc>
 800059c:	4603      	mov	r3, r0
 800059e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			buttons_[0+i*8] = (a1 & 0x1);
 80005a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005a6:	f003 0201 	and.w	r2, r3, #1
 80005aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	bf14      	ite	ne
 80005b2:	2201      	movne	r2, #1
 80005b4:	2200      	moveq	r2, #0
 80005b6:	b2d1      	uxtb	r1, r2
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	4413      	add	r3, r2
 80005bc:	460a      	mov	r2, r1
 80005be:	739a      	strb	r2, [r3, #14]
			buttons_[1+i*8] = (a1 & 0x2) >> 1;
 80005c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005c4:	f003 0202 	and.w	r2, r3, #2
 80005c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	3301      	adds	r3, #1
 80005ce:	2a00      	cmp	r2, #0
 80005d0:	bf14      	ite	ne
 80005d2:	2201      	movne	r2, #1
 80005d4:	2200      	moveq	r2, #0
 80005d6:	b2d1      	uxtb	r1, r2
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	4413      	add	r3, r2
 80005dc:	460a      	mov	r2, r1
 80005de:	739a      	strb	r2, [r3, #14]
			buttons_[2+i*8] = (a1 & 0x4) >> 2;
 80005e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005e4:	f003 0204 	and.w	r2, r3, #4
 80005e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	3302      	adds	r3, #2
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	bf14      	ite	ne
 80005f2:	2201      	movne	r2, #1
 80005f4:	2200      	moveq	r2, #0
 80005f6:	b2d1      	uxtb	r1, r2
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	4413      	add	r3, r2
 80005fc:	460a      	mov	r2, r1
 80005fe:	739a      	strb	r2, [r3, #14]
			buttons_[3+i*8] = (a1 & 0x8) >> 3;
 8000600:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000604:	f003 0208 	and.w	r2, r3, #8
 8000608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	3303      	adds	r3, #3
 800060e:	2a00      	cmp	r2, #0
 8000610:	bf14      	ite	ne
 8000612:	2201      	movne	r2, #1
 8000614:	2200      	moveq	r2, #0
 8000616:	b2d1      	uxtb	r1, r2
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	460a      	mov	r2, r1
 800061e:	739a      	strb	r2, [r3, #14]

			buttons_[4+i*8] = (a2 & 0x1);
 8000620:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000624:	f003 0201 	and.w	r2, r3, #1
 8000628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	3304      	adds	r3, #4
 800062e:	2a00      	cmp	r2, #0
 8000630:	bf14      	ite	ne
 8000632:	2201      	movne	r2, #1
 8000634:	2200      	moveq	r2, #0
 8000636:	b2d1      	uxtb	r1, r2
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	4413      	add	r3, r2
 800063c:	460a      	mov	r2, r1
 800063e:	739a      	strb	r2, [r3, #14]
			buttons_[5+i*8] = (a2 & 0x2) >> 1;
 8000640:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000644:	f003 0202 	and.w	r2, r3, #2
 8000648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800064a:	00db      	lsls	r3, r3, #3
 800064c:	3305      	adds	r3, #5
 800064e:	2a00      	cmp	r2, #0
 8000650:	bf14      	ite	ne
 8000652:	2201      	movne	r2, #1
 8000654:	2200      	moveq	r2, #0
 8000656:	b2d1      	uxtb	r1, r2
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	739a      	strb	r2, [r3, #14]
			buttons_[6+i*8] = (a2 & 0x4) >> 2;
 8000660:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000664:	f003 0204 	and.w	r2, r3, #4
 8000668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	3306      	adds	r3, #6
 800066e:	2a00      	cmp	r2, #0
 8000670:	bf14      	ite	ne
 8000672:	2201      	movne	r2, #1
 8000674:	2200      	moveq	r2, #0
 8000676:	b2d1      	uxtb	r1, r2
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4413      	add	r3, r2
 800067c:	460a      	mov	r2, r1
 800067e:	739a      	strb	r2, [r3, #14]
			buttons_[7+i*8] = (a2 & 0x8) >> 3;
 8000680:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000684:	f003 0208 	and.w	r2, r3, #8
 8000688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800068a:	00db      	lsls	r3, r3, #3
 800068c:	3307      	adds	r3, #7
 800068e:	2a00      	cmp	r2, #0
 8000690:	bf14      	ite	ne
 8000692:	2201      	movne	r2, #1
 8000694:	2200      	moveq	r2, #0
 8000696:	b2d1      	uxtb	r1, r2
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	4413      	add	r3, r2
 800069c:	460a      	mov	r2, r1
 800069e:	739a      	strb	r2, [r3, #14]
		for(int i = 0; i < 2; ++i){
 80006a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006a2:	3301      	adds	r3, #1
 80006a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006a6:	e754      	b.n	8000552 <_ZN21CoreWirelessControlRx5parseEv+0x10c>
		}
	    return true;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e004      	b.n	80006b6 <_ZN21CoreWirelessControlRx5parseEv+0x270>
	  } else{
		++idx;
 80006ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006ae:	3301      	adds	r3, #1
 80006b0:	647b      	str	r3, [r7, #68]	; 0x44
		continue;
 80006b2:	bf00      	nop
	  }
	}
 80006b4:	e6f3      	b.n	800049e <_ZN21CoreWirelessControlRx5parseEv+0x58>
	return true;
  }
 80006b6:	4618      	mov	r0, r3
 80006b8:	374c      	adds	r7, #76	; 0x4c
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd90      	pop	{r4, r7, pc}

080006be <_ZN21CoreWirelessControlRx4axisEh>:
  uint8_t test(){
	  char tmp = test_;
	  test_ = '\r';
	  return tmp;
  }
  int16_t axis(uint8_t i){
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	70fb      	strb	r3, [r7, #3]
	  if(i < 5) return axis_[i];
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	d806      	bhi.n	80006de <_ZN21CoreWirelessControlRx4axisEh+0x20>
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	4413      	add	r3, r2
 80006d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80006dc:	e000      	b.n	80006e0 <_ZN21CoreWirelessControlRx4axisEh+0x22>
	  return 0;
 80006de:	2300      	movs	r3, #0
  }
 80006e0:	4618      	mov	r0, r3
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <_ZN21CoreWirelessControlRx6buttonEh>:
  bool button(uint8_t i){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
	  if(i < 16) return buttons_[i];
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	2b0f      	cmp	r3, #15
 80006fc:	d804      	bhi.n	8000708 <_ZN21CoreWirelessControlRx6buttonEh+0x1c>
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	7b9b      	ldrb	r3, [r3, #14]
 8000706:	e000      	b.n	800070a <_ZN21CoreWirelessControlRx6buttonEh+0x1e>
	  return 0;
 8000708:	2300      	movs	r3, #0
  }
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <_Z9uart_putch>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rxed_byte_data;
UsartBuffer ub;

void uart_putc(uint8_t c){
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
	char buf[1];
	buf[0] = c;
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8000726:	f107 010c 	add.w	r1, r7, #12
 800072a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072e:	2201      	movs	r2, #1
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <_Z9uart_putch+0x28>)
 8000732:	f002 fbeb 	bl	8002f0c <HAL_UART_Transmit>
}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200004e0 	.word	0x200004e0

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000748:	b08e      	sub	sp, #56	; 0x38
 800074a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fdcc 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f91e 	bl	8000990 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f000 f9e6 	bl	8000b24 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000758:	f000 f9b0 	bl	8000abc <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 800075c:	f000 f97a 	bl	8000a54 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  xdev_out(uart_putc);
 8000760:	4b82      	ldr	r3, [pc, #520]	; (800096c <main+0x228>)
 8000762:	4a83      	ldr	r2, [pc, #524]	; (8000970 <main+0x22c>)
 8000764:	601a      	str	r2, [r3, #0]
  CoreWirelessControlRx cwcr(&ub);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4982      	ldr	r1, [pc, #520]	; (8000974 <main+0x230>)
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fe4e 	bl	800040e <_ZN21CoreWirelessControlRxC1EP11UsartBuffer>
  HAL_UART_Receive_IT(&huart1, &rxed_byte_data, 1);
 8000772:	2201      	movs	r2, #1
 8000774:	4980      	ldr	r1, [pc, #512]	; (8000978 <main+0x234>)
 8000776:	4881      	ldr	r0, [pc, #516]	; (800097c <main+0x238>)
 8000778:	f002 fc52 	bl	8003020 <HAL_UART_Receive_IT>
  uint32_t  last_processed_time = HAL_GetTick();
 800077c:	f000 fe0e 	bl	800139c <HAL_GetTick>
 8000780:	62f8      	str	r0, [r7, #44]	; 0x2c
  while (1)
  {
	  if(cwcr.parse() == true){
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fe5d 	bl	8000446 <_ZN21CoreWirelessControlRx5parseEv>
 800078c:	4603      	mov	r3, r0
 800078e:	2b01      	cmp	r3, #1
 8000790:	bf0c      	ite	eq
 8000792:	2301      	moveq	r3, #1
 8000794:	2300      	movne	r3, #0
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	f000 80d4 	beq.w	8000946 <main+0x202>
		  const uint8_t tx_fail[] = "!--\r\n";
 800079e:	4a78      	ldr	r2, [pc, #480]	; (8000980 <main+0x23c>)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a6:	6018      	str	r0, [r3, #0]
 80007a8:	3304      	adds	r3, #4
 80007aa:	8019      	strh	r1, [r3, #0]
		  HAL_UART_Transmit(&huart2, tx_fail, sizeof(tx_fail), 10);
 80007ac:	1d39      	adds	r1, r7, #4
 80007ae:	230a      	movs	r3, #10
 80007b0:	2206      	movs	r2, #6
 80007b2:	4874      	ldr	r0, [pc, #464]	; (8000984 <main+0x240>)
 80007b4:	f002 fbaa 	bl	8002f0c <HAL_UART_Transmit>
		  xprintf("%d, %d, %d, %d, %d\r\n", cwcr.axis(0), cwcr.axis(1), cwcr.axis(2), cwcr.axis(3), cwcr.axis(4));
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff7d 	bl	80006be <_ZN21CoreWirelessControlRx4axisEh>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461d      	mov	r5, r3
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2101      	movs	r1, #1
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff75 	bl	80006be <_ZN21CoreWirelessControlRx4axisEh>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461e      	mov	r6, r3
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2102      	movs	r1, #2
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff6d 	bl	80006be <_ZN21CoreWirelessControlRx4axisEh>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4698      	mov	r8, r3
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2103      	movs	r1, #3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff65 	bl	80006be <_ZN21CoreWirelessControlRx4axisEh>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461c      	mov	r4, r3
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2104      	movs	r1, #4
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff5d 	bl	80006be <_ZN21CoreWirelessControlRx4axisEh>
 8000804:	4603      	mov	r3, r0
 8000806:	9301      	str	r3, [sp, #4]
 8000808:	9400      	str	r4, [sp, #0]
 800080a:	4643      	mov	r3, r8
 800080c:	4632      	mov	r2, r6
 800080e:	4629      	mov	r1, r5
 8000810:	485d      	ldr	r0, [pc, #372]	; (8000988 <main+0x244>)
 8000812:	f000 fd27 	bl	8001264 <xprintf>
		  xprintf("%d, %d, %d, %d\r\n", cwcr.button(0), cwcr.button(1), cwcr.button(2), cwcr.button(3));
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff65 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 8000822:	4603      	mov	r3, r0
 8000824:	461c      	mov	r4, r3
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2101      	movs	r1, #1
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff5d 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 8000832:	4603      	mov	r3, r0
 8000834:	461d      	mov	r5, r3
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2102      	movs	r1, #2
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff55 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 8000842:	4603      	mov	r3, r0
 8000844:	461e      	mov	r6, r3
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2103      	movs	r1, #3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff4d 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 8000852:	4603      	mov	r3, r0
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	4633      	mov	r3, r6
 8000858:	462a      	mov	r2, r5
 800085a:	4621      	mov	r1, r4
 800085c:	484b      	ldr	r0, [pc, #300]	; (800098c <main+0x248>)
 800085e:	f000 fd01 	bl	8001264 <xprintf>
		  xprintf("%d, %d, %d, %d\r\n", cwcr.button(4), cwcr.button(5), cwcr.button(6), cwcr.button(7));
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2104      	movs	r1, #4
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff3f 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 800086e:	4603      	mov	r3, r0
 8000870:	461c      	mov	r4, r3
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2105      	movs	r1, #5
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff37 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 800087e:	4603      	mov	r3, r0
 8000880:	461d      	mov	r5, r3
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2106      	movs	r1, #6
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff2f 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 800088e:	4603      	mov	r3, r0
 8000890:	461e      	mov	r6, r3
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	2107      	movs	r1, #7
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff27 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 800089e:	4603      	mov	r3, r0
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	4633      	mov	r3, r6
 80008a4:	462a      	mov	r2, r5
 80008a6:	4621      	mov	r1, r4
 80008a8:	4838      	ldr	r0, [pc, #224]	; (800098c <main+0x248>)
 80008aa:	f000 fcdb 	bl	8001264 <xprintf>
		  xprintf("%d, %d, %d, %d\r\n", cwcr.button(8), cwcr.button(9), cwcr.button(10), cwcr.button(11));
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2108      	movs	r1, #8
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff19 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461c      	mov	r4, r3
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2109      	movs	r1, #9
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff11 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 80008ca:	4603      	mov	r3, r0
 80008cc:	461d      	mov	r5, r3
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	210a      	movs	r1, #10
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff09 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 80008da:	4603      	mov	r3, r0
 80008dc:	461e      	mov	r6, r3
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	210b      	movs	r1, #11
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff01 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 80008ea:	4603      	mov	r3, r0
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	4633      	mov	r3, r6
 80008f0:	462a      	mov	r2, r5
 80008f2:	4621      	mov	r1, r4
 80008f4:	4825      	ldr	r0, [pc, #148]	; (800098c <main+0x248>)
 80008f6:	f000 fcb5 	bl	8001264 <xprintf>
		  xprintf("%d, %d, %d, %d\r\n", cwcr.button(12), cwcr.button(13), cwcr.button(14), cwcr.button(15));
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	210c      	movs	r1, #12
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fef3 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 8000906:	4603      	mov	r3, r0
 8000908:	461c      	mov	r4, r3
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	210d      	movs	r1, #13
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff feeb 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 8000916:	4603      	mov	r3, r0
 8000918:	461d      	mov	r5, r3
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	210e      	movs	r1, #14
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fee3 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 8000926:	4603      	mov	r3, r0
 8000928:	461e      	mov	r6, r3
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	210f      	movs	r1, #15
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fedb 	bl	80006ec <_ZN21CoreWirelessControlRx6buttonEh>
 8000936:	4603      	mov	r3, r0
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	4633      	mov	r3, r6
 800093c:	462a      	mov	r2, r5
 800093e:	4621      	mov	r1, r4
 8000940:	4812      	ldr	r0, [pc, #72]	; (800098c <main+0x248>)
 8000942:	f000 fc8f 	bl	8001264 <xprintf>
	  }

	  if(HAL_GetTick() - last_processed_time > 500){
 8000946:	f000 fd29 	bl	800139c <HAL_GetTick>
 800094a:	4602      	mov	r2, r0
 800094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000954:	bf8c      	ite	hi
 8000956:	2301      	movhi	r3, #1
 8000958:	2300      	movls	r3, #0
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	f43f af10 	beq.w	8000782 <main+0x3e>
//		  const uint8_t tx_data[] = "00,0401,CD:01,90,7F,91,89,00,00,00\r\n";
//		  HAL_UART_Transmit(&huart1, tx_data, sizeof(tx_data), 10);
		  last_processed_time = HAL_GetTick();
 8000962:	f000 fd1b 	bl	800139c <HAL_GetTick>
 8000966:	62f8      	str	r0, [r7, #44]	; 0x2c
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000968:	e70b      	b.n	8000782 <main+0x3e>
 800096a:	bf00      	nop
 800096c:	200005fc 	.word	0x200005fc
 8000970:	08000719 	.word	0x08000719
 8000974:	2000056c 	.word	0x2000056c
 8000978:	20000568 	.word	0x20000568
 800097c:	20000458 	.word	0x20000458
 8000980:	08004424 	.word	0x08004424
 8000984:	200004e0 	.word	0x200004e0
 8000988:	080043f8 	.word	0x080043f8
 800098c:	08004410 	.word	0x08004410

08000990 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b096      	sub	sp, #88	; 0x58
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800099a:	2228      	movs	r2, #40	; 0x28
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 fcb0 	bl	8004304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
 80009c2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c4:	2302      	movs	r3, #2
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c8:	2301      	movs	r3, #1
 80009ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009cc:	2310      	movs	r3, #16
 80009ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 ffe5 	bl	80019a8 <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	bf14      	ite	ne
 80009e4:	2301      	movne	r3, #1
 80009e6:	2300      	moveq	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80009ee:	f000 f8f9 	bl	8000be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f2:	230f      	movs	r3, #15
 80009f4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fed3 	bl	80027b8 <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	bf14      	ite	ne
 8000a18:	2301      	movne	r3, #1
 8000a1a:	2300      	moveq	r3, #0
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8000a22:	f000 f8df 	bl	8000be4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 f8f7 	bl	8002c24 <HAL_RCCEx_PeriphCLKConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	bf14      	ite	ne
 8000a3c:	2301      	movne	r3, #1
 8000a3e:	2300      	moveq	r3, #0
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000a46:	f000 f8cd 	bl	8000be4 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3758      	adds	r7, #88	; 0x58
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a96:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a98:	f002 f9ea 	bl	8002e70 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf14      	ite	ne
 8000aa2:	2301      	movne	r3, #1
 8000aa4:	2300      	moveq	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8000aac:	f000 f89a 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000458 	.word	0x20000458
 8000ab8:	40013800 	.word	0x40013800

08000abc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afe:	4807      	ldr	r0, [pc, #28]	; (8000b1c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b00:	f002 f9b6 	bl	8002e70 <HAL_UART_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000b14:	f000 f866 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200004e0 	.word	0x200004e0
 8000b20:	40004400 	.word	0x40004400

08000b24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <_ZL12MX_GPIO_Initv+0x44>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <_ZL12MX_GPIO_Initv+0x44>)
 8000b30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b34:	6153      	str	r3, [r2, #20]
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <_ZL12MX_GPIO_Initv+0x44>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <_ZL12MX_GPIO_Initv+0x44>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <_ZL12MX_GPIO_Initv+0x44>)
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	6153      	str	r3, [r2, #20]
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <_ZL12MX_GPIO_Initv+0x44>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_UART_RxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b6c:	b5b0      	push	{r4, r5, r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <HAL_UART_RxCpltCallback+0x60>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d121      	bne.n	8000bc2 <HAL_UART_RxCpltCallback+0x56>
  {
	  bool res = ub.enqueue(rxed_byte_data);
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_UART_RxCpltCallback+0x64>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <HAL_UART_RxCpltCallback+0x68>)
 8000b86:	f7ff fb43 	bl	8000210 <_ZN11UsartBuffer7enqueueEh>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	77fb      	strb	r3, [r7, #31]
	  if(!res){
 8000b8e:	7ffb      	ldrb	r3, [r7, #31]
 8000b90:	f083 0301 	eor.w	r3, r3, #1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00e      	beq.n	8000bb8 <HAL_UART_RxCpltCallback+0x4c>
		  const uint8_t tx_fail[] = "Failed to enqueue\r\n";
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_UART_RxCpltCallback+0x6c>)
 8000b9c:	f107 0408 	add.w	r4, r7, #8
 8000ba0:	461d      	mov	r5, r3
 8000ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba6:	682b      	ldr	r3, [r5, #0]
 8000ba8:	6023      	str	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, tx_fail, sizeof(tx_fail), 10);
 8000baa:	f107 0108 	add.w	r1, r7, #8
 8000bae:	230a      	movs	r3, #10
 8000bb0:	2214      	movs	r2, #20
 8000bb2:	480a      	ldr	r0, [pc, #40]	; (8000bdc <HAL_UART_RxCpltCallback+0x70>)
 8000bb4:	f002 f9aa 	bl	8002f0c <HAL_UART_Transmit>
	  }

	  HAL_UART_Receive_IT(&huart1, &rxed_byte_data, 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4905      	ldr	r1, [pc, #20]	; (8000bd0 <HAL_UART_RxCpltCallback+0x64>)
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <HAL_UART_RxCpltCallback+0x74>)
 8000bbe:	f002 fa2f 	bl	8003020 <HAL_UART_Receive_IT>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3720      	adds	r7, #32
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40013800 	.word	0x40013800
 8000bd0:	20000568 	.word	0x20000568
 8000bd4:	2000056c 	.word	0x2000056c
 8000bd8:	0800442c 	.word	0x0800442c
 8000bdc:	200004e0 	.word	0x200004e0
 8000be0:	20000458 	.word	0x20000458

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d107      	bne.n	8000c10 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d102      	bne.n	8000c10 <_Z41__static_initialization_and_destruction_0ii+0x20>
UsartBuffer ub;
 8000c0a:	4803      	ldr	r0, [pc, #12]	; (8000c18 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000c0c:	f7ff fae4 	bl	80001d8 <_ZN11UsartBufferC1Ev>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000056c 	.word	0x2000056c

08000c1c <_GLOBAL__sub_I_huart1>:
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff ffe3 	bl	8000bf0 <_Z41__static_initialization_and_destruction_0ii>
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_MspInit+0x44>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_MspInit+0x44>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6193      	str	r3, [r2, #24]
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_MspInit+0x44>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_MspInit+0x44>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <HAL_MspInit+0x44>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	61d3      	str	r3, [r2, #28]
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_MspInit+0x44>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	; 0x30
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a34      	ldr	r2, [pc, #208]	; (8000d64 <HAL_UART_MspInit+0xf0>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d132      	bne.n	8000cfc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <HAL_UART_MspInit+0xf4>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a33      	ldr	r2, [pc, #204]	; (8000d68 <HAL_UART_MspInit+0xf4>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6193      	str	r3, [r2, #24]
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <HAL_UART_MspInit+0xf4>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	61bb      	str	r3, [r7, #24]
 8000cac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <HAL_UART_MspInit+0xf4>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	4a2d      	ldr	r2, [pc, #180]	; (8000d68 <HAL_UART_MspInit+0xf4>)
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	6153      	str	r3, [r2, #20]
 8000cba:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <HAL_UART_MspInit+0xf4>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce6:	f000 fced 	bl	80016c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2025      	movs	r0, #37	; 0x25
 8000cf0:	f000 fc3b 	bl	800156a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cf4:	2025      	movs	r0, #37	; 0x25
 8000cf6:	f000 fc54 	bl	80015a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cfa:	e02e      	b.n	8000d5a <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <HAL_UART_MspInit+0xf8>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d129      	bne.n	8000d5a <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_UART_MspInit+0xf4>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <HAL_UART_MspInit+0xf4>)
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	61d3      	str	r3, [r2, #28]
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_UART_MspInit+0xf4>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_UART_MspInit+0xf4>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <HAL_UART_MspInit+0xf4>)
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	6153      	str	r3, [r2, #20]
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_UART_MspInit+0xf4>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000d36:	f248 0304 	movw	r3, #32772	; 0x8004
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d48:	2307      	movs	r3, #7
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f000 fcb5 	bl	80016c4 <HAL_GPIO_Init>
}
 8000d5a:	bf00      	nop
 8000d5c:	3730      	adds	r7, #48	; 0x30
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40013800 	.word	0x40013800
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40004400 	.word	0x40004400

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbc:	f000 fada 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <USART1_IRQHandler+0x10>)
 8000dca:	f002 f96d 	bl	80030a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000458 	.word	0x20000458

08000dd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <xfputc>:

void xfputc (			/* Put a character to the specified device */
	void(*func)(int),	/* Pointer to the output function (null:strptr) */
	int chr				/* Character to be output */
)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
	if (XF_CRLF && chr == '\n') xfputc(func, '\r');	/* CR -> CRLF */

	if (func) {
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <xfputc+0x18>
		func(chr);		/* Write a character to the output device */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6838      	ldr	r0, [r7, #0]
 8000e10:	4798      	blx	r3
	} else if (strptr) {
		 *strptr++ = chr;	/* Write a character to the memory */
	}
}
 8000e12:	e00b      	b.n	8000e2c <xfputc+0x30>
	} else if (strptr) {
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <xfputc+0x38>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d007      	beq.n	8000e2c <xfputc+0x30>
		 *strptr++ = chr;	/* Write a character to the memory */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <xfputc+0x38>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	4904      	ldr	r1, [pc, #16]	; (8000e34 <xfputc+0x38>)
 8000e24:	600a      	str	r2, [r1, #0]
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	701a      	strb	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200005f8 	.word	0x200005f8

08000e38 <xvfprintf>:
static void xvfprintf (
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b098      	sub	sp, #96	; 0x60
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
	long v;
	unsigned long uv;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	60ba      	str	r2, [r7, #8]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if (!c) break;				/* End of format? */
 8000e50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 81fc 	beq.w	8001252 <xvfprintf+0x41a>
		if (c != '%') {				/* Pass it through if not a % sequense */
 8000e5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000e5e:	2b25      	cmp	r3, #37	; 0x25
 8000e60:	d006      	beq.n	8000e70 <xvfprintf+0x38>
			xfputc(func, c); continue;
 8000e62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000e66:	4619      	mov	r1, r3
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f7ff ffc7 	bl	8000dfc <xfputc>
 8000e6e:	e1ef      	b.n	8001250 <xvfprintf+0x418>
		}
		f = w = 0;			 		/* Clear parms */
 8000e70:	2300      	movs	r3, #0
 8000e72:	653b      	str	r3, [r7, #80]	; 0x50
 8000e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c
		pad = ' '; prec = -1;
 8000e78:	2320      	movs	r3, #32
 8000e7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
		c = *fmt++;					/* Get first char of the sequense */
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	60ba      	str	r2, [r7, #8]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if (c == '0') {				/* Flag: left '0' padded */
 8000e90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000e94:	2b30      	cmp	r3, #48	; 0x30
 8000e96:	d109      	bne.n	8000eac <xvfprintf+0x74>
			pad = '0'; c = *fmt++;
 8000e98:	2330      	movs	r3, #48	; 0x30
 8000e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	60ba      	str	r2, [r7, #8]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8000eaa:	e00b      	b.n	8000ec4 <xvfprintf+0x8c>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8000eac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000eb0:	2b2d      	cmp	r3, #45	; 0x2d
 8000eb2:	d107      	bne.n	8000ec4 <xvfprintf+0x8c>
				f = 2; c = *fmt++;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 8000ec4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8000eca:	d126      	bne.n	8000f1a <xvfprintf+0xe2>
			n = va_arg(arp, int);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	1d1a      	adds	r2, r3, #4
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	64bb      	str	r3, [r7, #72]	; 0x48
			if (n < 0) {			/* Flag: left justified */
 8000ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da04      	bge.n	8000ee6 <xvfprintf+0xae>
				n = 0 - n; f = 2;
 8000edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ede:	425b      	negs	r3, r3
 8000ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			w = n; c = *fmt++;
 8000ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ee8:	653b      	str	r3, [r7, #80]	; 0x50
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1c5a      	adds	r2, r3, #1
 8000eee:	60ba      	str	r2, [r7, #8]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8000ef6:	e018      	b.n	8000f2a <xvfprintf+0xf2>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 8000ef8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	461a      	mov	r2, r3
 8000f04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f08:	4413      	add	r3, r2
 8000f0a:	3b30      	subs	r3, #48	; 0x30
 8000f0c:	653b      	str	r3, [r7, #80]	; 0x50
				c = *fmt++;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	60ba      	str	r2, [r7, #8]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			while (c >= '0' && c <= '9') {	/* Minimum width */
 8000f1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f1e:	2b2f      	cmp	r3, #47	; 0x2f
 8000f20:	d903      	bls.n	8000f2a <xvfprintf+0xf2>
 8000f22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f26:	2b39      	cmp	r3, #57	; 0x39
 8000f28:	d9e6      	bls.n	8000ef8 <xvfprintf+0xc0>
			}
		}
		if (c == '.') {				/* Precision */
 8000f2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f2e:	2b2e      	cmp	r3, #46	; 0x2e
 8000f30:	d131      	bne.n	8000f96 <xvfprintf+0x15e>
			c = *fmt++;
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1c5a      	adds	r2, r3, #1
 8000f36:	60ba      	str	r2, [r7, #8]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			if (c == '*') {				/* Precision from an argument */
 8000f3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f42:	2b2a      	cmp	r3, #42	; 0x2a
 8000f44:	d10b      	bne.n	8000f5e <xvfprintf+0x126>
				prec = va_arg(arp, int);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	1d1a      	adds	r2, r3, #4
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	647b      	str	r3, [r7, #68]	; 0x44
				c = *fmt++;
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	60ba      	str	r2, [r7, #8]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8000f5c:	e01b      	b.n	8000f96 <xvfprintf+0x15e>
			} else {
				prec = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	647b      	str	r3, [r7, #68]	; 0x44
				while (c >= '0' && c <= '9') {
 8000f62:	e010      	b.n	8000f86 <xvfprintf+0x14e>
					prec = prec * 10 + c - '0';
 8000f64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f74:	4413      	add	r3, r2
 8000f76:	3b30      	subs	r3, #48	; 0x30
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
					c = *fmt++;
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	60ba      	str	r2, [r7, #8]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				while (c >= '0' && c <= '9') {
 8000f86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f8a:	2b2f      	cmp	r3, #47	; 0x2f
 8000f8c:	d903      	bls.n	8000f96 <xvfprintf+0x15e>
 8000f8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f92:	2b39      	cmp	r3, #57	; 0x39
 8000f94:	d9e6      	bls.n	8000f64 <xvfprintf+0x12c>
				}
			}
		}
		if (c == 'l') {		/* Prefix: Size is long */
 8000f96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f9a:	2b6c      	cmp	r3, #108	; 0x6c
 8000f9c:	d109      	bne.n	8000fb2 <xvfprintf+0x17a>
			f |= 4; c = *fmt++;
 8000f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	60ba      	str	r2, [r7, #8]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			if (c == 'l') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 8000fb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 814d 	beq.w	8001256 <xvfprintf+0x41e>
		switch (c) {				/* Type is... */
 8000fbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000fc0:	3b58      	subs	r3, #88	; 0x58
 8000fc2:	2b20      	cmp	r3, #32
 8000fc4:	f200 80a4 	bhi.w	8001110 <xvfprintf+0x2d8>
 8000fc8:	a201      	add	r2, pc, #4	; (adr r2, 8000fd0 <xvfprintf+0x198>)
 8000fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fce:	bf00      	nop
 8000fd0:	08001067 	.word	0x08001067
 8000fd4:	08001111 	.word	0x08001111
 8000fd8:	08001111 	.word	0x08001111
 8000fdc:	08001111 	.word	0x08001111
 8000fe0:	08001111 	.word	0x08001111
 8000fe4:	08001111 	.word	0x08001111
 8000fe8:	08001111 	.word	0x08001111
 8000fec:	08001111 	.word	0x08001111
 8000ff0:	08001111 	.word	0x08001111
 8000ff4:	08001111 	.word	0x08001111
 8000ff8:	08001055 	.word	0x08001055
 8000ffc:	0800106d 	.word	0x0800106d
 8001000:	08001061 	.word	0x08001061
 8001004:	08001111 	.word	0x08001111
 8001008:	08001111 	.word	0x08001111
 800100c:	08001111 	.word	0x08001111
 8001010:	08001111 	.word	0x08001111
 8001014:	08001111 	.word	0x08001111
 8001018:	08001111 	.word	0x08001111
 800101c:	08001111 	.word	0x08001111
 8001020:	08001111 	.word	0x08001111
 8001024:	08001111 	.word	0x08001111
 8001028:	08001111 	.word	0x08001111
 800102c:	0800105b 	.word	0x0800105b
 8001030:	08001111 	.word	0x08001111
 8001034:	08001111 	.word	0x08001111
 8001038:	08001111 	.word	0x08001111
 800103c:	08001081 	.word	0x08001081
 8001040:	08001111 	.word	0x08001111
 8001044:	08001061 	.word	0x08001061
 8001048:	08001111 	.word	0x08001111
 800104c:	08001111 	.word	0x08001111
 8001050:	08001067 	.word	0x08001067
		case 'b':					/* Unsigned binary */
			r = 2; break;
 8001054:	2302      	movs	r3, #2
 8001056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001058:	e061      	b.n	800111e <xvfprintf+0x2e6>
		case 'o':					/* Unsigned octal */
			r = 8; break;
 800105a:	2308      	movs	r3, #8
 800105c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800105e:	e05e      	b.n	800111e <xvfprintf+0x2e6>
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
 8001060:	230a      	movs	r3, #10
 8001062:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001064:	e05b      	b.n	800111e <xvfprintf+0x2e6>
		case 'x':					/* Hexdecimal (lower case) */
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
 8001066:	2310      	movs	r3, #16
 8001068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800106a:	e058      	b.n	800111e <xvfprintf+0x2e6>
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	1d1a      	adds	r2, r3, #4
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4619      	mov	r1, r3
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f7ff febf 	bl	8000dfc <xfputc>
 800107e:	e0e7      	b.n	8001250 <xvfprintf+0x418>
		case 's':					/* String */
			p = va_arg(arp, char*);		/* Get a pointer argument */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	1d1a      	adds	r2, r3, #4
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (!p) p = "";				/* Null ptr generates a null string */
 800108a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <xvfprintf+0x25c>
 8001090:	4b73      	ldr	r3, [pc, #460]	; (8001260 <xvfprintf+0x428>)
 8001092:	63fb      	str	r3, [r7, #60]	; 0x3c
			j = strlen(p);
 8001094:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001096:	f7ff f897 	bl	80001c8 <strlen>
 800109a:	6578      	str	r0, [r7, #84]	; 0x54
			if (prec >= 0 && j > (unsigned int)prec) j = prec;	/* Limited length of string body */
 800109c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db0f      	blt.n	80010c2 <xvfprintf+0x28a>
 80010a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d90b      	bls.n	80010c2 <xvfprintf+0x28a>
 80010aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010ac:	657b      	str	r3, [r7, #84]	; 0x54
			for ( ; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 80010ae:	e008      	b.n	80010c2 <xvfprintf+0x28a>
 80010b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80010b4:	4619      	mov	r1, r3
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f7ff fea0 	bl	8000dfc <xfputc>
 80010bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010be:	3301      	adds	r3, #1
 80010c0:	657b      	str	r3, [r7, #84]	; 0x54
 80010c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10c      	bne.n	80010e6 <xvfprintf+0x2ae>
 80010cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d3ed      	bcc.n	80010b0 <xvfprintf+0x278>
			while (*p && prec--) xfputc(func, *p++);/* String body */
 80010d4:	e007      	b.n	80010e6 <xvfprintf+0x2ae>
 80010d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	63fa      	str	r2, [r7, #60]	; 0x3c
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4619      	mov	r1, r3
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff fe8b 	bl	8000dfc <xfputc>
 80010e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d009      	beq.n	8001102 <xvfprintf+0x2ca>
 80010ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010f0:	1e5a      	subs	r2, r3, #1
 80010f2:	647a      	str	r2, [r7, #68]	; 0x44
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1ee      	bne.n	80010d6 <xvfprintf+0x29e>
			while (j++ < w) xfputc(func, ' ');		/* Right pads */
 80010f8:	e003      	b.n	8001102 <xvfprintf+0x2ca>
 80010fa:	2120      	movs	r1, #32
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f7ff fe7d 	bl	8000dfc <xfputc>
 8001102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	657a      	str	r2, [r7, #84]	; 0x54
 8001108:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800110a:	429a      	cmp	r2, r3
 800110c:	d8f5      	bhi.n	80010fa <xvfprintf+0x2c2>
			continue;
 800110e:	e09f      	b.n	8001250 <xvfprintf+0x418>
			while (*p) xfputc(func, *p++);		/* Value */
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
 8001110:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001114:	4619      	mov	r1, r3
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff fe70 	bl	8000dfc <xfputc>
 800111c:	e098      	b.n	8001250 <xvfprintf+0x418>
			} else {		/* int/short/char argument */
				v = (c == 'd') ? (long long)va_arg(arp, int) : (long long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 800111e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <xvfprintf+0x2fc>
			v = (long)va_arg(arp, long);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	1d1a      	adds	r2, r3, #4
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
 8001132:	e00d      	b.n	8001150 <xvfprintf+0x318>
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 8001134:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001138:	2b64      	cmp	r3, #100	; 0x64
 800113a:	d104      	bne.n	8001146 <xvfprintf+0x30e>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	1d1a      	adds	r2, r3, #4
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	e003      	b.n	800114e <xvfprintf+0x316>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	1d1a      	adds	r2, r3, #4
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
		}
#endif
		if (c == 'd' && v < 0) {	/* Negative value? */
 8001150:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001154:	2b64      	cmp	r3, #100	; 0x64
 8001156:	d109      	bne.n	800116c <xvfprintf+0x334>
 8001158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800115a:	2b00      	cmp	r3, #0
 800115c:	da06      	bge.n	800116c <xvfprintf+0x334>
			v = 0 - v; f |= 1;
 800115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001160:	425b      	negs	r3, r3
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
 8001164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		i = 0; uv = v;
 800116c:	2300      	movs	r3, #0
 800116e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
		do {	/* Make an integer number string */
			d = (char)(uv % r); uv /= r;
 8001174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001176:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001178:	fbb3 f2f2 	udiv	r2, r3, r2
 800117c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800117e:	fb01 f202 	mul.w	r2, r1, r2
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800118a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800118c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8001192:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001196:	2b09      	cmp	r3, #9
 8001198:	d90b      	bls.n	80011b2 <xvfprintf+0x37a>
 800119a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800119e:	2b78      	cmp	r3, #120	; 0x78
 80011a0:	d101      	bne.n	80011a6 <xvfprintf+0x36e>
 80011a2:	2227      	movs	r2, #39	; 0x27
 80011a4:	e000      	b.n	80011a8 <xvfprintf+0x370>
 80011a6:	2207      	movs	r2, #7
 80011a8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80011ac:	4413      	add	r3, r2
 80011ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			str[i++] = d + '0';
 80011b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80011b8:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80011bc:	3230      	adds	r2, #48	; 0x30
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80011c4:	440b      	add	r3, r1
 80011c6:	f803 2c50 	strb.w	r2, [r3, #-80]
		} while (uv != 0 && i < sizeof str);
 80011ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <xvfprintf+0x39e>
 80011d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011d2:	2b1f      	cmp	r3, #31
 80011d4:	d9ce      	bls.n	8001174 <xvfprintf+0x33c>
		if (f & 1) str[i++] = '-';					/* Sign */
 80011d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d008      	beq.n	80011f2 <xvfprintf+0x3ba>
 80011e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80011e6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80011ea:	4413      	add	r3, r2
 80011ec:	222d      	movs	r2, #45	; 0x2d
 80011ee:	f803 2c50 	strb.w	r2, [r3, #-80]
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 80011f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011f4:	657b      	str	r3, [r7, #84]	; 0x54
 80011f6:	e008      	b.n	800120a <xvfprintf+0x3d2>
 80011f8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80011fc:	4619      	mov	r1, r3
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff fdfc 	bl	8000dfc <xfputc>
 8001204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001206:	3301      	adds	r3, #1
 8001208:	657b      	str	r3, [r7, #84]	; 0x54
 800120a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d103      	bne.n	800121c <xvfprintf+0x3e4>
 8001214:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001218:	429a      	cmp	r2, r3
 800121a:	d3ed      	bcc.n	80011f8 <xvfprintf+0x3c0>
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
 800121c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800121e:	3b01      	subs	r3, #1
 8001220:	65bb      	str	r3, [r7, #88]	; 0x58
 8001222:	f107 0210 	add.w	r2, r7, #16
 8001226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001228:	4413      	add	r3, r2
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff fde4 	bl	8000dfc <xfputc>
 8001234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <xvfprintf+0x3e4>
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
 800123a:	e003      	b.n	8001244 <xvfprintf+0x40c>
 800123c:	2120      	movs	r1, #32
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff fddc 	bl	8000dfc <xfputc>
 8001244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	657a      	str	r2, [r7, #84]	; 0x54
 800124a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800124c:	429a      	cmp	r2, r3
 800124e:	d8f5      	bhi.n	800123c <xvfprintf+0x404>
		c = *fmt++;					/* Get a format character */
 8001250:	e5f8      	b.n	8000e44 <xvfprintf+0xc>
		if (!c) break;				/* End of format? */
 8001252:	bf00      	nop
 8001254:	e000      	b.n	8001258 <xvfprintf+0x420>
		if (!c) break;				/* End of format? */
 8001256:	bf00      	nop
	}
}
 8001258:	bf00      	nop
 800125a:	3760      	adds	r7, #96	; 0x60
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	08004440 	.word	0x08004440

08001264 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8001264:	b40f      	push	{r0, r1, r2, r3}
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	607b      	str	r3, [r7, #4]
	xvfprintf(xfunc_output, fmt, arp);
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <xprintf+0x2c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6939      	ldr	r1, [r7, #16]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fddc 	bl	8000e38 <xvfprintf>
	va_end(arp);
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800128a:	b004      	add	sp, #16
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	200005fc 	.word	0x200005fc

08001294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001298:	f7ff fd9e 	bl	8000dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800129e:	490d      	ldr	r1, [pc, #52]	; (80012d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <LoopForever+0xe>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b4:	4c0a      	ldr	r4, [pc, #40]	; (80012e0 <LoopForever+0x16>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c2:	f002 fffb 	bl	80042bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012c6:	f7ff fa3d 	bl	8000744 <main>

080012ca <LoopForever>:

LoopForever:
    b LoopForever
 80012ca:	e7fe      	b.n	80012ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012cc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 80012d8:	08004490 	.word	0x08004490
  ldr r2, =_sbss
 80012dc:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 80012e0:	20000610 	.word	0x20000610

080012e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC1_2_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_Init+0x28>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_Init+0x28>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f92b 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fc92 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000

08001314 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f943 	bl	80015be <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f000 f90b 	bl	800156a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000000 	.word	0x20000000
 800136c:	20000008 	.word	0x20000008
 8001370:	20000004 	.word	0x20000004

08001374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x20>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_IncTick+0x24>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008
 8001398:	20000600 	.word	0x20000600

0800139c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;  
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000600 	.word	0x20000600

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db0b      	blt.n	8001442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 021f 	and.w	r2, r3, #31
 8001430:	4907      	ldr	r1, [pc, #28]	; (8001450 <__NVIC_EnableIRQ+0x38>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2001      	movs	r0, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000e100 	.word	0xe000e100

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	; 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
         );
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001520:	d301      	bcc.n	8001526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001522:	2301      	movs	r3, #1
 8001524:	e00f      	b.n	8001546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <SysTick_Config+0x40>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152e:	210f      	movs	r1, #15
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f7ff ff8e 	bl	8001454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <SysTick_Config+0x40>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <SysTick_Config+0x40>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff29 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800157c:	f7ff ff3e 	bl	80013fc <__NVIC_GetPriorityGrouping>
 8001580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	6978      	ldr	r0, [r7, #20]
 8001588:	f7ff ff8e 	bl	80014a8 <NVIC_EncodePriority>
 800158c:	4602      	mov	r2, r0
 800158e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff5d 	bl	8001454 <__NVIC_SetPriority>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff31 	bl	8001418 <__NVIC_EnableIRQ>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffa2 	bl	8001510 <SysTick_Config>
 80015cc:	4603      	mov	r3, r0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d008      	beq.n	80015fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2204      	movs	r2, #4
 80015ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e020      	b.n	800163c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 020e 	bic.w	r2, r2, #14
 8001608:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001622:	2101      	movs	r1, #1
 8001624:	fa01 f202 	lsl.w	r2, r1, r2
 8001628:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800165a:	2b02      	cmp	r3, #2
 800165c:	d005      	beq.n	800166a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2204      	movs	r2, #4
 8001662:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e027      	b.n	80016ba <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 020e 	bic.w	r2, r2, #14
 8001678:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001692:	2101      	movs	r1, #1
 8001694:	fa01 f202 	lsl.w	r2, r1, r2
 8001698:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	4798      	blx	r3
    } 
  }
  return status;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e14e      	b.n	8001972 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8140 	beq.w	800196c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d005      	beq.n	8001704 <HAL_GPIO_Init+0x40>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d130      	bne.n	8001766 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800173a:	2201      	movs	r2, #1
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	f003 0201 	and.w	r2, r3, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b03      	cmp	r3, #3
 8001770:	d017      	beq.n	80017a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d123      	bne.n	80017f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	08da      	lsrs	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3208      	adds	r2, #8
 80017b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	220f      	movs	r2, #15
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3208      	adds	r2, #8
 80017f0:	6939      	ldr	r1, [r7, #16]
 80017f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	2203      	movs	r2, #3
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0203 	and.w	r2, r3, #3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 809a 	beq.w	800196c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001838:	4b55      	ldr	r3, [pc, #340]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a54      	ldr	r2, [pc, #336]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b52      	ldr	r3, [pc, #328]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001850:	4a50      	ldr	r2, [pc, #320]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800187a:	d013      	beq.n	80018a4 <HAL_GPIO_Init+0x1e0>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a46      	ldr	r2, [pc, #280]	; (8001998 <HAL_GPIO_Init+0x2d4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d00d      	beq.n	80018a0 <HAL_GPIO_Init+0x1dc>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a45      	ldr	r2, [pc, #276]	; (800199c <HAL_GPIO_Init+0x2d8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d007      	beq.n	800189c <HAL_GPIO_Init+0x1d8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a44      	ldr	r2, [pc, #272]	; (80019a0 <HAL_GPIO_Init+0x2dc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_GPIO_Init+0x1d4>
 8001894:	2303      	movs	r3, #3
 8001896:	e006      	b.n	80018a6 <HAL_GPIO_Init+0x1e2>
 8001898:	2305      	movs	r3, #5
 800189a:	e004      	b.n	80018a6 <HAL_GPIO_Init+0x1e2>
 800189c:	2302      	movs	r3, #2
 800189e:	e002      	b.n	80018a6 <HAL_GPIO_Init+0x1e2>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_GPIO_Init+0x1e2>
 80018a4:	2300      	movs	r3, #0
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	f002 0203 	and.w	r2, r2, #3
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	4093      	lsls	r3, r2
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018b6:	4937      	ldr	r1, [pc, #220]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c4:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018e8:	4a2e      	ldr	r2, [pc, #184]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001912:	4a24      	ldr	r2, [pc, #144]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800193c:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001966:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	f47f aea9 	bne.w	80016d4 <HAL_GPIO_Init+0x10>
  }
}
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	40021000 	.word	0x40021000
 8001994:	40010000 	.word	0x40010000
 8001998:	48000400 	.word	0x48000400
 800199c:	48000800 	.word	0x48000800
 80019a0:	48000c00 	.word	0x48000c00
 80019a4:	40010400 	.word	0x40010400

080019a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	f000 bef4 	b.w	80027aa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 816a 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019d2:	4bb3      	ldr	r3, [pc, #716]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d00c      	beq.n	80019f8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019de:	4bb0      	ldr	r3, [pc, #704]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d159      	bne.n	8001a9e <HAL_RCC_OscConfig+0xf6>
 80019ea:	4bad      	ldr	r3, [pc, #692]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f6:	d152      	bne.n	8001a9e <HAL_RCC_OscConfig+0xf6>
 80019f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a0c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d102      	bne.n	8001a2a <HAL_RCC_OscConfig+0x82>
 8001a24:	4b9e      	ldr	r3, [pc, #632]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0xae>
 8001a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a2e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a42:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a46:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a52:	4b93      	ldr	r3, [pc, #588]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a5a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a5e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a62:	fa92 f2a2 	rbit	r2, r2
 8001a66:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a6a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a6e:	fab2 f282 	clz	r2, r2
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f042 0220 	orr.w	r2, r2, #32
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	f002 021f 	and.w	r2, r2, #31
 8001a7e:	2101      	movs	r1, #1
 8001a80:	fa01 f202 	lsl.w	r2, r1, r2
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 810c 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x2fc>
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 8106 	bne.w	8001ca4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f000 be86 	b.w	80027aa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa8:	d106      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x110>
 8001aaa:	4b7d      	ldr	r3, [pc, #500]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a7c      	ldr	r2, [pc, #496]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e030      	b.n	8001b1a <HAL_RCC_OscConfig+0x172>
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x134>
 8001ac2:	4b77      	ldr	r3, [pc, #476]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a76      	ldr	r2, [pc, #472]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b74      	ldr	r3, [pc, #464]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a73      	ldr	r2, [pc, #460]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e01e      	b.n	8001b1a <HAL_RCC_OscConfig+0x172>
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae6:	d10c      	bne.n	8001b02 <HAL_RCC_OscConfig+0x15a>
 8001ae8:	4b6d      	ldr	r3, [pc, #436]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6c      	ldr	r2, [pc, #432]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001aee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b6a      	ldr	r3, [pc, #424]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a69      	ldr	r2, [pc, #420]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	e00b      	b.n	8001b1a <HAL_RCC_OscConfig+0x172>
 8001b02:	4b67      	ldr	r3, [pc, #412]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a66      	ldr	r2, [pc, #408]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b64      	ldr	r3, [pc, #400]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a63      	ldr	r2, [pc, #396]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b18:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b1a:	4b61      	ldr	r3, [pc, #388]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	f023 020f 	bic.w	r2, r3, #15
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	495d      	ldr	r1, [pc, #372]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d059      	beq.n	8001bec <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fc30 	bl	800139c <HAL_GetTick>
 8001b3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b40:	e00a      	b.n	8001b58 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b42:	f7ff fc2b 	bl	800139c <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d902      	bls.n	8001b58 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	f000 be29 	b.w	80027aa <HAL_RCC_OscConfig+0xe02>
 8001b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b6c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d102      	bne.n	8001b8a <HAL_RCC_OscConfig+0x1e2>
 8001b84:	4b46      	ldr	r3, [pc, #280]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	e015      	b.n	8001bb6 <HAL_RCC_OscConfig+0x20e>
 8001b8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b8e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ba6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bba:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001bbe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001bc2:	fa92 f2a2 	rbit	r2, r2
 8001bc6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001bca:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001bce:	fab2 f282 	clz	r2, r2
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	f042 0220 	orr.w	r2, r2, #32
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	f002 021f 	and.w	r2, r2, #31
 8001bde:	2101      	movs	r1, #1
 8001be0:	fa01 f202 	lsl.w	r2, r1, r2
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0ab      	beq.n	8001b42 <HAL_RCC_OscConfig+0x19a>
 8001bea:	e05c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7ff fbd6 	bl	800139c <HAL_GetTick>
 8001bf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf6:	f7ff fbd1 	bl	800139c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d902      	bls.n	8001c0c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	f000 bdcf 	b.w	80027aa <HAL_RCC_OscConfig+0xe02>
 8001c0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c10:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d102      	bne.n	8001c3e <HAL_RCC_OscConfig+0x296>
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	e015      	b.n	8001c6a <HAL_RCC_OscConfig+0x2c2>
 8001c3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c42:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c56:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c5a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_RCC_OscConfig+0x2f8>)
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c6e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c72:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c76:	fa92 f2a2 	rbit	r2, r2
 8001c7a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c7e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c82:	fab2 f282 	clz	r2, r2
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f042 0220 	orr.w	r2, r2, #32
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	f002 021f 	and.w	r2, r2, #31
 8001c92:	2101      	movs	r1, #1
 8001c94:	fa01 f202 	lsl.w	r2, r1, r2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ab      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x24e>
 8001c9e:	e002      	b.n	8001ca6 <HAL_RCC_OscConfig+0x2fe>
 8001ca0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 816f 	beq.w	8001f94 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cb6:	4bd0      	ldr	r3, [pc, #832]	; (8001ff8 <HAL_RCC_OscConfig+0x650>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00b      	beq.n	8001cda <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cc2:	4bcd      	ldr	r3, [pc, #820]	; (8001ff8 <HAL_RCC_OscConfig+0x650>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d16c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x400>
 8001cce:	4bca      	ldr	r3, [pc, #808]	; (8001ff8 <HAL_RCC_OscConfig+0x650>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d166      	bne.n	8001da8 <HAL_RCC_OscConfig+0x400>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001cec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d102      	bne.n	8001d0a <HAL_RCC_OscConfig+0x362>
 8001d04:	4bbc      	ldr	r3, [pc, #752]	; (8001ff8 <HAL_RCC_OscConfig+0x650>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	e013      	b.n	8001d32 <HAL_RCC_OscConfig+0x38a>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d22:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d2e:	4bb2      	ldr	r3, [pc, #712]	; (8001ff8 <HAL_RCC_OscConfig+0x650>)
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	2202      	movs	r2, #2
 8001d34:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d38:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d3c:	fa92 f2a2 	rbit	r2, r2
 8001d40:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d44:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d48:	fab2 f282 	clz	r2, r2
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	f042 0220 	orr.w	r2, r2, #32
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	f002 021f 	and.w	r2, r2, #31
 8001d58:	2101      	movs	r1, #1
 8001d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <HAL_RCC_OscConfig+0x3cc>
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d002      	beq.n	8001d74 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f000 bd1b 	b.w	80027aa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d74:	4ba0      	ldr	r3, [pc, #640]	; (8001ff8 <HAL_RCC_OscConfig+0x650>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	21f8      	movs	r1, #248	; 0xf8
 8001d84:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d8c:	fa91 f1a1 	rbit	r1, r1
 8001d90:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001d94:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001d98:	fab1 f181 	clz	r1, r1
 8001d9c:	b2c9      	uxtb	r1, r1
 8001d9e:	408b      	lsls	r3, r1
 8001da0:	4995      	ldr	r1, [pc, #596]	; (8001ff8 <HAL_RCC_OscConfig+0x650>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	e0f5      	b.n	8001f94 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8085 	beq.w	8001ebe <HAL_RCC_OscConfig+0x516>
 8001db4:	2301      	movs	r3, #1
 8001db6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001dc6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2301      	movs	r3, #1
 8001dde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fadc 	bl	800139c <HAL_GetTick>
 8001de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dea:	f7ff fad7 	bl	800139c <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d902      	bls.n	8001e00 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	f000 bcd5 	b.w	80027aa <HAL_RCC_OscConfig+0xe02>
 8001e00:	2302      	movs	r3, #2
 8001e02:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e12:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	095b      	lsrs	r3, r3, #5
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d102      	bne.n	8001e30 <HAL_RCC_OscConfig+0x488>
 8001e2a:	4b73      	ldr	r3, [pc, #460]	; (8001ff8 <HAL_RCC_OscConfig+0x650>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	e013      	b.n	8001e58 <HAL_RCC_OscConfig+0x4b0>
 8001e30:	2302      	movs	r3, #2
 8001e32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e42:	2302      	movs	r3, #2
 8001e44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e48:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e54:	4b68      	ldr	r3, [pc, #416]	; (8001ff8 <HAL_RCC_OscConfig+0x650>)
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e5e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e62:	fa92 f2a2 	rbit	r2, r2
 8001e66:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e6a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e6e:	fab2 f282 	clz	r2, r2
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	f042 0220 	orr.w	r2, r2, #32
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	f002 021f 	and.w	r2, r2, #31
 8001e7e:	2101      	movs	r1, #1
 8001e80:	fa01 f202 	lsl.w	r2, r1, r2
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0af      	beq.n	8001dea <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8a:	4b5b      	ldr	r3, [pc, #364]	; (8001ff8 <HAL_RCC_OscConfig+0x650>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	21f8      	movs	r1, #248	; 0xf8
 8001e9a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ea2:	fa91 f1a1 	rbit	r1, r1
 8001ea6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001eaa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001eae:	fab1 f181 	clz	r1, r1
 8001eb2:	b2c9      	uxtb	r1, r1
 8001eb4:	408b      	lsls	r3, r1
 8001eb6:	4950      	ldr	r1, [pc, #320]	; (8001ff8 <HAL_RCC_OscConfig+0x650>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]
 8001ebc:	e06a      	b.n	8001f94 <HAL_RCC_OscConfig+0x5ec>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ed0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ede:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7ff fa57 	bl	800139c <HAL_GetTick>
 8001eee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef4:	f7ff fa52 	bl	800139c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d902      	bls.n	8001f0a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	f000 bc50 	b.w	80027aa <HAL_RCC_OscConfig+0xe02>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d102      	bne.n	8001f3a <HAL_RCC_OscConfig+0x592>
 8001f34:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <HAL_RCC_OscConfig+0x650>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	e013      	b.n	8001f62 <HAL_RCC_OscConfig+0x5ba>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <HAL_RCC_OscConfig+0x650>)
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	2202      	movs	r2, #2
 8001f64:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f68:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f6c:	fa92 f2a2 	rbit	r2, r2
 8001f70:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f74:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f78:	fab2 f282 	clz	r2, r2
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	f042 0220 	orr.w	r2, r2, #32
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	f002 021f 	and.w	r2, r2, #31
 8001f88:	2101      	movs	r1, #1
 8001f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1af      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80da 	beq.w	8002158 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d069      	beq.n	8002082 <HAL_RCC_OscConfig+0x6da>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_OscConfig+0x654>)
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7ff f9e0 	bl	800139c <HAL_GetTick>
 8001fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe0:	e00e      	b.n	8002000 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe2:	f7ff f9db 	bl	800139c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d906      	bls.n	8002000 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e3d9      	b.n	80027aa <HAL_RCC_OscConfig+0xe02>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	10908120 	.word	0x10908120
 8002000:	2302      	movs	r3, #2
 8002002:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002012:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002016:	2202      	movs	r2, #2
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	fa93 f2a3 	rbit	r2, r3
 8002024:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800202e:	2202      	movs	r2, #2
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fa93 f2a3 	rbit	r2, r3
 800203c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002040:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002042:	4ba5      	ldr	r3, [pc, #660]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 8002044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002046:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800204a:	2102      	movs	r1, #2
 800204c:	6019      	str	r1, [r3, #0]
 800204e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f1a3 	rbit	r1, r3
 8002058:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800205c:	6019      	str	r1, [r3, #0]
  return result;
 800205e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0b0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x63a>
 8002080:	e06a      	b.n	8002158 <HAL_RCC_OscConfig+0x7b0>
 8002082:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	fa93 f2a3 	rbit	r2, r3
 8002094:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002098:	601a      	str	r2, [r3, #0]
  return result;
 800209a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800209e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	4b8c      	ldr	r3, [pc, #560]	; (80022dc <HAL_RCC_OscConfig+0x934>)
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	461a      	mov	r2, r3
 80020b0:	2300      	movs	r3, #0
 80020b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b4:	f7ff f972 	bl	800139c <HAL_GetTick>
 80020b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	e009      	b.n	80020d2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020be:	f7ff f96d 	bl	800139c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e36b      	b.n	80027aa <HAL_RCC_OscConfig+0xe02>
 80020d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020d6:	2202      	movs	r2, #2
 80020d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	fa93 f2a3 	rbit	r2, r3
 80020e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020ee:	2202      	movs	r2, #2
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fa93 f2a3 	rbit	r2, r3
 80020fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002106:	2202      	movs	r2, #2
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	fa93 f2a3 	rbit	r2, r3
 8002114:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002118:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211a:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 800211c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800211e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002122:	2102      	movs	r1, #2
 8002124:	6019      	str	r1, [r3, #0]
 8002126:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	fa93 f1a3 	rbit	r1, r3
 8002130:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002134:	6019      	str	r1, [r3, #0]
  return result;
 8002136:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f003 031f 	and.w	r3, r3, #31
 800214c:	2101      	movs	r1, #1
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1b2      	bne.n	80020be <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8158 	beq.w	8002418 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216e:	4b5a      	ldr	r3, [pc, #360]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d112      	bne.n	80021a0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a56      	ldr	r2, [pc, #344]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	61d3      	str	r3, [r2, #28]
 8002186:	4b54      	ldr	r3, [pc, #336]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	f107 0308 	add.w	r3, r7, #8
 8002198:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800219a:	2301      	movs	r3, #1
 800219c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <HAL_RCC_OscConfig+0x938>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d11a      	bne.n	80021e2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ac:	4b4c      	ldr	r3, [pc, #304]	; (80022e0 <HAL_RCC_OscConfig+0x938>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a4b      	ldr	r2, [pc, #300]	; (80022e0 <HAL_RCC_OscConfig+0x938>)
 80021b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b8:	f7ff f8f0 	bl	800139c <HAL_GetTick>
 80021bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	e009      	b.n	80021d6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c2:	f7ff f8eb 	bl	800139c <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e2e9      	b.n	80027aa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	4b42      	ldr	r3, [pc, #264]	; (80022e0 <HAL_RCC_OscConfig+0x938>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0ef      	beq.n	80021c2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x852>
 80021ec:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4a39      	ldr	r2, [pc, #228]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6213      	str	r3, [r2, #32]
 80021f8:	e02f      	b.n	800225a <HAL_RCC_OscConfig+0x8b2>
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10c      	bne.n	800221e <HAL_RCC_OscConfig+0x876>
 8002204:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a33      	ldr	r2, [pc, #204]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 800220a:	f023 0301 	bic.w	r3, r3, #1
 800220e:	6213      	str	r3, [r2, #32]
 8002210:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4a30      	ldr	r2, [pc, #192]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 8002216:	f023 0304 	bic.w	r3, r3, #4
 800221a:	6213      	str	r3, [r2, #32]
 800221c:	e01d      	b.n	800225a <HAL_RCC_OscConfig+0x8b2>
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d10c      	bne.n	8002242 <HAL_RCC_OscConfig+0x89a>
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4a2a      	ldr	r2, [pc, #168]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	6213      	str	r3, [r2, #32]
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6213      	str	r3, [r2, #32]
 8002240:	e00b      	b.n	800225a <HAL_RCC_OscConfig+0x8b2>
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6213      	str	r3, [r2, #32]
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 8002254:	f023 0304 	bic.w	r3, r3, #4
 8002258:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d06b      	beq.n	800233c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002264:	f7ff f89a 	bl	800139c <HAL_GetTick>
 8002268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226c:	e00b      	b.n	8002286 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7ff f895 	bl	800139c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e291      	b.n	80027aa <HAL_RCC_OscConfig+0xe02>
 8002286:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800228a:	2202      	movs	r2, #2
 800228c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	fa93 f2a3 	rbit	r2, r3
 8002298:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022a2:	2202      	movs	r2, #2
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	fa93 f2a3 	rbit	r2, r3
 80022b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022b4:	601a      	str	r2, [r3, #0]
  return result;
 80022b6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f043 0302 	orr.w	r3, r3, #2
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d109      	bne.n	80022e4 <HAL_RCC_OscConfig+0x93c>
 80022d0:	4b01      	ldr	r3, [pc, #4]	; (80022d8 <HAL_RCC_OscConfig+0x930>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	e014      	b.n	8002300 <HAL_RCC_OscConfig+0x958>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	10908120 	.word	0x10908120
 80022e0:	40007000 	.word	0x40007000
 80022e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022e8:	2202      	movs	r2, #2
 80022ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	fa93 f2a3 	rbit	r2, r3
 80022f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	4bbb      	ldr	r3, [pc, #748]	; (80025ec <HAL_RCC_OscConfig+0xc44>)
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002304:	2102      	movs	r1, #2
 8002306:	6011      	str	r1, [r2, #0]
 8002308:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	fa92 f1a2 	rbit	r1, r2
 8002312:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002316:	6011      	str	r1, [r2, #0]
  return result;
 8002318:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	fab2 f282 	clz	r2, r2
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f002 021f 	and.w	r2, r2, #31
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f202 	lsl.w	r2, r1, r2
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d099      	beq.n	800226e <HAL_RCC_OscConfig+0x8c6>
 800233a:	e063      	b.n	8002404 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233c:	f7ff f82e 	bl	800139c <HAL_GetTick>
 8002340:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002344:	e00b      	b.n	800235e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7ff f829 	bl	800139c <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e225      	b.n	80027aa <HAL_RCC_OscConfig+0xe02>
 800235e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002362:	2202      	movs	r2, #2
 8002364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	fa93 f2a3 	rbit	r2, r3
 8002370:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800237a:	2202      	movs	r2, #2
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800238c:	601a      	str	r2, [r3, #0]
  return result;
 800238e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002392:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f043 0302 	orr.w	r3, r3, #2
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d102      	bne.n	80023ae <HAL_RCC_OscConfig+0xa06>
 80023a8:	4b90      	ldr	r3, [pc, #576]	; (80025ec <HAL_RCC_OscConfig+0xc44>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	e00d      	b.n	80023ca <HAL_RCC_OscConfig+0xa22>
 80023ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023b2:	2202      	movs	r2, #2
 80023b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	fa93 f2a3 	rbit	r2, r3
 80023c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	4b89      	ldr	r3, [pc, #548]	; (80025ec <HAL_RCC_OscConfig+0xc44>)
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023ce:	2102      	movs	r1, #2
 80023d0:	6011      	str	r1, [r2, #0]
 80023d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	fa92 f1a2 	rbit	r1, r2
 80023dc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023e0:	6011      	str	r1, [r2, #0]
  return result;
 80023e2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	fab2 f282 	clz	r2, r2
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	f002 021f 	and.w	r2, r2, #31
 80023f8:	2101      	movs	r1, #1
 80023fa:	fa01 f202 	lsl.w	r2, r1, r2
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1a0      	bne.n	8002346 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002404:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002408:	2b01      	cmp	r3, #1
 800240a:	d105      	bne.n	8002418 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240c:	4b77      	ldr	r3, [pc, #476]	; (80025ec <HAL_RCC_OscConfig+0xc44>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	4a76      	ldr	r2, [pc, #472]	; (80025ec <HAL_RCC_OscConfig+0xc44>)
 8002412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002416:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 81c2 	beq.w	80027a8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002424:	4b71      	ldr	r3, [pc, #452]	; (80025ec <HAL_RCC_OscConfig+0xc44>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b08      	cmp	r3, #8
 800242e:	f000 819c 	beq.w	800276a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b02      	cmp	r3, #2
 800243a:	f040 8114 	bne.w	8002666 <HAL_RCC_OscConfig+0xcbe>
 800243e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002442:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	fa93 f2a3 	rbit	r2, r3
 8002452:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002456:	601a      	str	r2, [r3, #0]
  return result;
 8002458:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800245c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002468:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	461a      	mov	r2, r3
 8002470:	2300      	movs	r3, #0
 8002472:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7fe ff92 	bl	800139c <HAL_GetTick>
 8002478:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247c:	e009      	b.n	8002492 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247e:	f7fe ff8d 	bl	800139c <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e18b      	b.n	80027aa <HAL_RCC_OscConfig+0xe02>
 8002492:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002496:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800249a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	fa93 f2a3 	rbit	r2, r3
 80024a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024aa:	601a      	str	r2, [r3, #0]
  return result;
 80024ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d102      	bne.n	80024cc <HAL_RCC_OscConfig+0xb24>
 80024c6:	4b49      	ldr	r3, [pc, #292]	; (80025ec <HAL_RCC_OscConfig+0xc44>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	e01b      	b.n	8002504 <HAL_RCC_OscConfig+0xb5c>
 80024cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	fa93 f2a3 	rbit	r2, r3
 80024e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	fa93 f2a3 	rbit	r2, r3
 80024fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	4b3a      	ldr	r3, [pc, #232]	; (80025ec <HAL_RCC_OscConfig+0xc44>)
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002508:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800250c:	6011      	str	r1, [r2, #0]
 800250e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	fa92 f1a2 	rbit	r1, r2
 8002518:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800251c:	6011      	str	r1, [r2, #0]
  return result;
 800251e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	fab2 f282 	clz	r2, r2
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f042 0220 	orr.w	r2, r2, #32
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	f002 021f 	and.w	r2, r2, #31
 8002534:	2101      	movs	r1, #1
 8002536:	fa01 f202 	lsl.w	r2, r1, r2
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d19e      	bne.n	800247e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002540:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <HAL_RCC_OscConfig+0xc44>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	430b      	orrs	r3, r1
 8002556:	4925      	ldr	r1, [pc, #148]	; (80025ec <HAL_RCC_OscConfig+0xc44>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
 800255c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002560:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	fa93 f2a3 	rbit	r2, r3
 8002570:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002574:	601a      	str	r2, [r3, #0]
  return result;
 8002576:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800257a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002586:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	461a      	mov	r2, r3
 800258e:	2301      	movs	r3, #1
 8002590:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe ff03 	bl	800139c <HAL_GetTick>
 8002596:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800259a:	e009      	b.n	80025b0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259c:	f7fe fefe 	bl	800139c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0fc      	b.n	80027aa <HAL_RCC_OscConfig+0xe02>
 80025b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	fa93 f2a3 	rbit	r2, r3
 80025c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025c8:	601a      	str	r2, [r3, #0]
  return result;
 80025ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d0:	fab3 f383 	clz	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d105      	bne.n	80025f0 <HAL_RCC_OscConfig+0xc48>
 80025e4:	4b01      	ldr	r3, [pc, #4]	; (80025ec <HAL_RCC_OscConfig+0xc44>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	e01e      	b.n	8002628 <HAL_RCC_OscConfig+0xc80>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	fa93 f2a3 	rbit	r2, r3
 8002604:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800260e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	fa93 f2a3 	rbit	r2, r3
 800261e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	4b63      	ldr	r3, [pc, #396]	; (80027b4 <HAL_RCC_OscConfig+0xe0c>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800262c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002630:	6011      	str	r1, [r2, #0]
 8002632:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	fa92 f1a2 	rbit	r1, r2
 800263c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002640:	6011      	str	r1, [r2, #0]
  return result;
 8002642:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	fab2 f282 	clz	r2, r2
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	f042 0220 	orr.w	r2, r2, #32
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f002 021f 	and.w	r2, r2, #31
 8002658:	2101      	movs	r1, #1
 800265a:	fa01 f202 	lsl.w	r2, r1, r2
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d09b      	beq.n	800259c <HAL_RCC_OscConfig+0xbf4>
 8002664:	e0a0      	b.n	80027a8 <HAL_RCC_OscConfig+0xe00>
 8002666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800266a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800266e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	fa93 f2a3 	rbit	r2, r3
 800267a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267e:	601a      	str	r2, [r3, #0]
  return result;
 8002680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002684:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002690:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	461a      	mov	r2, r3
 8002698:	2300      	movs	r3, #0
 800269a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fe fe7e 	bl	800139c <HAL_GetTick>
 80026a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a4:	e009      	b.n	80026ba <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe fe79 	bl	800139c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e077      	b.n	80027aa <HAL_RCC_OscConfig+0xe02>
 80026ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	fa93 f2a3 	rbit	r2, r3
 80026ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d2:	601a      	str	r2, [r3, #0]
  return result;
 80026d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d102      	bne.n	80026f4 <HAL_RCC_OscConfig+0xd4c>
 80026ee:	4b31      	ldr	r3, [pc, #196]	; (80027b4 <HAL_RCC_OscConfig+0xe0c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	e01b      	b.n	800272c <HAL_RCC_OscConfig+0xd84>
 80026f4:	f107 0320 	add.w	r3, r7, #32
 80026f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f107 0320 	add.w	r3, r7, #32
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fa93 f2a3 	rbit	r2, r3
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	f107 0318 	add.w	r3, r7, #24
 8002712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	f107 0318 	add.w	r3, r7, #24
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	fa93 f2a3 	rbit	r2, r3
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <HAL_RCC_OscConfig+0xe0c>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	f107 0210 	add.w	r2, r7, #16
 8002730:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002734:	6011      	str	r1, [r2, #0]
 8002736:	f107 0210 	add.w	r2, r7, #16
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	fa92 f1a2 	rbit	r1, r2
 8002740:	f107 020c 	add.w	r2, r7, #12
 8002744:	6011      	str	r1, [r2, #0]
  return result;
 8002746:	f107 020c 	add.w	r2, r7, #12
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	fab2 f282 	clz	r2, r2
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	f042 0220 	orr.w	r2, r2, #32
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	f002 021f 	and.w	r2, r2, #31
 800275c:	2101      	movs	r1, #1
 800275e:	fa01 f202 	lsl.w	r2, r1, r2
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d19e      	bne.n	80026a6 <HAL_RCC_OscConfig+0xcfe>
 8002768:	e01e      	b.n	80027a8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e018      	b.n	80027aa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002778:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <HAL_RCC_OscConfig+0xe0c>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002780:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002784:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	429a      	cmp	r2, r3
 8002790:	d108      	bne.n	80027a4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002792:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002796:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000

080027b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b09e      	sub	sp, #120	; 0x78
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e162      	b.n	8002a96 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b90      	ldr	r3, [pc, #576]	; (8002a14 <HAL_RCC_ClockConfig+0x25c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d910      	bls.n	8002800 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b8d      	ldr	r3, [pc, #564]	; (8002a14 <HAL_RCC_ClockConfig+0x25c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 0207 	bic.w	r2, r3, #7
 80027e6:	498b      	ldr	r1, [pc, #556]	; (8002a14 <HAL_RCC_ClockConfig+0x25c>)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b89      	ldr	r3, [pc, #548]	; (8002a14 <HAL_RCC_ClockConfig+0x25c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e14a      	b.n	8002a96 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b82      	ldr	r3, [pc, #520]	; (8002a18 <HAL_RCC_ClockConfig+0x260>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	497f      	ldr	r1, [pc, #508]	; (8002a18 <HAL_RCC_ClockConfig+0x260>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80dc 	beq.w	80029e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d13c      	bne.n	80028ae <HAL_RCC_ClockConfig+0xf6>
 8002834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002838:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d102      	bne.n	800285e <HAL_RCC_ClockConfig+0xa6>
 8002858:	4b6f      	ldr	r3, [pc, #444]	; (8002a18 <HAL_RCC_ClockConfig+0x260>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	e00f      	b.n	800287e <HAL_RCC_ClockConfig+0xc6>
 800285e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002862:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	667b      	str	r3, [r7, #100]	; 0x64
 800286c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002870:	663b      	str	r3, [r7, #96]	; 0x60
 8002872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800287a:	4b67      	ldr	r3, [pc, #412]	; (8002a18 <HAL_RCC_ClockConfig+0x260>)
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002882:	65ba      	str	r2, [r7, #88]	; 0x58
 8002884:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002886:	fa92 f2a2 	rbit	r2, r2
 800288a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800288c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800288e:	fab2 f282 	clz	r2, r2
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	f042 0220 	orr.w	r2, r2, #32
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	f002 021f 	and.w	r2, r2, #31
 800289e:	2101      	movs	r1, #1
 80028a0:	fa01 f202 	lsl.w	r2, r1, r2
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d17b      	bne.n	80029a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0f3      	b.n	8002a96 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d13c      	bne.n	8002930 <HAL_RCC_ClockConfig+0x178>
 80028b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d102      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x128>
 80028da:	4b4f      	ldr	r3, [pc, #316]	; (8002a18 <HAL_RCC_ClockConfig+0x260>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	e00f      	b.n	8002900 <HAL_RCC_ClockConfig+0x148>
 80028e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	647b      	str	r3, [r7, #68]	; 0x44
 80028ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f2:	643b      	str	r3, [r7, #64]	; 0x40
 80028f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028fc:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <HAL_RCC_ClockConfig+0x260>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002904:	63ba      	str	r2, [r7, #56]	; 0x38
 8002906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002908:	fa92 f2a2 	rbit	r2, r2
 800290c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800290e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002910:	fab2 f282 	clz	r2, r2
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	f042 0220 	orr.w	r2, r2, #32
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	f002 021f 	and.w	r2, r2, #31
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d13a      	bne.n	80029a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0b2      	b.n	8002a96 <HAL_RCC_ClockConfig+0x2de>
 8002930:	2302      	movs	r3, #2
 8002932:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d102      	bne.n	8002958 <HAL_RCC_ClockConfig+0x1a0>
 8002952:	4b31      	ldr	r3, [pc, #196]	; (8002a18 <HAL_RCC_ClockConfig+0x260>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	e00d      	b.n	8002974 <HAL_RCC_ClockConfig+0x1bc>
 8002958:	2302      	movs	r3, #2
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
 8002964:	2302      	movs	r3, #2
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	61fb      	str	r3, [r7, #28]
 8002970:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <HAL_RCC_ClockConfig+0x260>)
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	2202      	movs	r2, #2
 8002976:	61ba      	str	r2, [r7, #24]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	fa92 f2a2 	rbit	r2, r2
 800297e:	617a      	str	r2, [r7, #20]
  return result;
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	fab2 f282 	clz	r2, r2
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	f042 0220 	orr.w	r2, r2, #32
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	f002 021f 	and.w	r2, r2, #31
 8002992:	2101      	movs	r1, #1
 8002994:	fa01 f202 	lsl.w	r2, r1, r2
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e079      	b.n	8002a96 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HAL_RCC_ClockConfig+0x260>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	491a      	ldr	r1, [pc, #104]	; (8002a18 <HAL_RCC_ClockConfig+0x260>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fcf2 	bl	800139c <HAL_GetTick>
 80029b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe fcee 	bl	800139c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e061      	b.n	8002a96 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <HAL_RCC_ClockConfig+0x260>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_ClockConfig+0x25c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d214      	bcs.n	8002a1c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <HAL_RCC_ClockConfig+0x25c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 0207 	bic.w	r2, r3, #7
 80029fa:	4906      	ldr	r1, [pc, #24]	; (8002a14 <HAL_RCC_ClockConfig+0x25c>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <HAL_RCC_ClockConfig+0x25c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e040      	b.n	8002a96 <HAL_RCC_ClockConfig+0x2de>
 8002a14:	40022000 	.word	0x40022000
 8002a18:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_RCC_ClockConfig+0x2e8>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	491a      	ldr	r1, [pc, #104]	; (8002aa0 <HAL_RCC_ClockConfig+0x2e8>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_RCC_ClockConfig+0x2e8>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4912      	ldr	r1, [pc, #72]	; (8002aa0 <HAL_RCC_ClockConfig+0x2e8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a5a:	f000 f829 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4601      	mov	r1, r0
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <HAL_RCC_ClockConfig+0x2e8>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a68:	22f0      	movs	r2, #240	; 0xf0
 8002a6a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	fa92 f2a2 	rbit	r2, r2
 8002a72:	60fa      	str	r2, [r7, #12]
  return result;
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	fab2 f282 	clz	r2, r2
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	40d3      	lsrs	r3, r2
 8002a7e:	4a09      	ldr	r2, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x2ec>)
 8002a80:	5cd3      	ldrb	r3, [r2, r3]
 8002a82:	fa21 f303 	lsr.w	r3, r1, r3
 8002a86:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <HAL_RCC_ClockConfig+0x2f0>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_RCC_ClockConfig+0x2f4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fc40 	bl	8001314 <HAL_InitTick>
  
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3778      	adds	r7, #120	; 0x78
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	08004444 	.word	0x08004444
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	20000004 	.word	0x20000004

08002ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b08b      	sub	sp, #44	; 0x2c
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002aca:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d002      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x30>
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x36>
 8002ade:	e03c      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae0:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ae2:	623b      	str	r3, [r7, #32]
      break;
 8002ae4:	e03c      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002aec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002af0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	fa92 f2a2 	rbit	r2, r2
 8002af8:	607a      	str	r2, [r7, #4]
  return result;
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	fab2 f282 	clz	r2, r2
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	40d3      	lsrs	r3, r2
 8002b04:	4a1c      	ldr	r2, [pc, #112]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b06:	5cd3      	ldrb	r3, [r2, r3]
 8002b08:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b0a:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	220f      	movs	r2, #15
 8002b14:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	fa92 f2a2 	rbit	r2, r2
 8002b1c:	60fa      	str	r2, [r7, #12]
  return result;
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	fab2 f282 	clz	r2, r2
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	40d3      	lsrs	r3, r2
 8002b28:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b2a:	5cd3      	ldrb	r3, [r2, r3]
 8002b2c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b38:	4a0e      	ldr	r2, [pc, #56]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
 8002b48:	e004      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	623b      	str	r3, [r7, #32]
      break;
 8002b58:	e002      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b5c:	623b      	str	r3, [r7, #32]
      break;
 8002b5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b60:	6a3b      	ldr	r3, [r7, #32]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	372c      	adds	r7, #44	; 0x2c
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	007a1200 	.word	0x007a1200
 8002b78:	0800445c 	.word	0x0800445c
 8002b7c:	0800446c 	.word	0x0800446c
 8002b80:	003d0900 	.word	0x003d0900

08002b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000000 	.word	0x20000000

08002b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ba2:	f7ff ffef 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002ba6:	4601      	mov	r1, r0
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bb0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bb4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	fa92 f2a2 	rbit	r2, r2
 8002bbc:	603a      	str	r2, [r7, #0]
  return result;
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	fab2 f282 	clz	r2, r2
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	40d3      	lsrs	r3, r2
 8002bc8:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002bca:	5cd3      	ldrb	r3, [r2, r3]
 8002bcc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08004454 	.word	0x08004454

08002be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002be6:	f7ff ffcd 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002bea:	4601      	mov	r1, r0
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002bf4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002bf8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	fa92 f2a2 	rbit	r2, r2
 8002c00:	603a      	str	r2, [r7, #0]
  return result;
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	fab2 f282 	clz	r2, r2
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	40d3      	lsrs	r3, r2
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	08004454 	.word	0x08004454

08002c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b092      	sub	sp, #72	; 0x48
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80cd 	beq.w	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c48:	4b86      	ldr	r3, [pc, #536]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10e      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c54:	4b83      	ldr	r3, [pc, #524]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	4a82      	ldr	r2, [pc, #520]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	61d3      	str	r3, [r2, #28]
 8002c60:	4b80      	ldr	r3, [pc, #512]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	4b7d      	ldr	r3, [pc, #500]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d118      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7e:	4b7a      	ldr	r3, [pc, #488]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a79      	ldr	r2, [pc, #484]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fb87 	bl	800139c <HAL_GetTick>
 8002c8e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	e008      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c92:	f7fe fb83 	bl	800139c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b64      	cmp	r3, #100	; 0x64
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e0db      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	4b70      	ldr	r3, [pc, #448]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cb0:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d07d      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d076      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cce:	4b65      	ldr	r3, [pc, #404]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cdc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	fa93 f3a3 	rbit	r3, r3
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b5e      	ldr	r3, [pc, #376]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b55      	ldr	r3, [pc, #340]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d20:	4a50      	ldr	r2, [pc, #320]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d24:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d045      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe fb34 	bl	800139c <HAL_GetTick>
 8002d34:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fe fb30 	bl	800139c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e086      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	623b      	str	r3, [r7, #32]
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	61fb      	str	r3, [r7, #28]
  return result;
 8002d66:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f043 0302 	orr.w	r3, r3, #2
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d102      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002d7c:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	e007      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002d82:	2302      	movs	r3, #2
 8002d84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	4b35      	ldr	r3, [pc, #212]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2202      	movs	r2, #2
 8002d94:	613a      	str	r2, [r7, #16]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	fa92 f2a2 	rbit	r2, r2
 8002d9c:	60fa      	str	r2, [r7, #12]
  return result;
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	fab2 f282 	clz	r2, r2
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	f002 021f 	and.w	r2, r2, #31
 8002db0:	2101      	movs	r1, #1
 8002db2:	fa01 f202 	lsl.w	r2, r1, r2
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0bd      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002dbc:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4926      	ldr	r1, [pc, #152]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d105      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd6:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	4a22      	ldr	r2, [pc, #136]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dee:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f023 0203 	bic.w	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	491a      	ldr	r1, [pc, #104]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e0c:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	f023 0210 	bic.w	r2, r3, #16
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4912      	ldr	r1, [pc, #72]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	490b      	ldr	r1, [pc, #44]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	4903      	ldr	r1, [pc, #12]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3748      	adds	r7, #72	; 0x48
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	10908100 	.word	0x10908100

08002e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e040      	b.n	8002f04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd feee 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fc00 	bl	80036b4 <UART_SetConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e022      	b.n	8002f04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fd2a 	bl	8003920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fdb1 	bl	8003a64 <UART_CheckIdleState>
 8002f02:	4603      	mov	r3, r0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d178      	bne.n	8003016 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_UART_Transmit+0x24>
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e071      	b.n	8003018 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2221      	movs	r2, #33	; 0x21
 8002f40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f42:	f7fe fa2b 	bl	800139c <HAL_GetTick>
 8002f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	88fa      	ldrh	r2, [r7, #6]
 8002f4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f60:	d108      	bne.n	8002f74 <HAL_UART_Transmit+0x68>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d104      	bne.n	8002f74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	e003      	b.n	8002f7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f7c:	e030      	b.n	8002fe0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2200      	movs	r2, #0
 8002f86:	2180      	movs	r1, #128	; 0x80
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fe13 	bl	8003bb4 <UART_WaitOnFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e03c      	b.n	8003018 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	881a      	ldrh	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb0:	b292      	uxth	r2, r2
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	e008      	b.n	8002fce <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	b292      	uxth	r2, r2
 8002fc6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1c8      	bne.n	8002f7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2140      	movs	r1, #64	; 0x40
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fddc 	bl	8003bb4 <UART_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d004      	beq.n	800300c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e005      	b.n	8003018 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	3720      	adds	r7, #32
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	4613      	mov	r3, r2
 800302c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003034:	2b20      	cmp	r3, #32
 8003036:	d132      	bne.n	800309e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HAL_UART_Receive_IT+0x24>
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e02b      	b.n	80030a0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d018      	beq.n	800308e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	613b      	str	r3, [r7, #16]
   return(result);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	623b      	str	r3, [r7, #32]
 800307c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307e:	69f9      	ldr	r1, [r7, #28]
 8003080:	6a3a      	ldr	r2, [r7, #32]
 8003082:	e841 2300 	strex	r3, r2, [r1]
 8003086:	61bb      	str	r3, [r7, #24]
   return(result);
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1e6      	bne.n	800305c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	461a      	mov	r2, r3
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fdf5 	bl	8003c84 <UART_Start_Receive_IT>
 800309a:	4603      	mov	r3, r0
 800309c:	e000      	b.n	80030a0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800309e:	2302      	movs	r3, #2
  }
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3728      	adds	r7, #40	; 0x28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b0ba      	sub	sp, #232	; 0xe8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80030d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80030d6:	4013      	ands	r3, r2
 80030d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80030dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d115      	bne.n	8003110 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00f      	beq.n	8003110 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 82ab 	beq.w	800365c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4798      	blx	r3
      }
      return;
 800310e:	e2a5      	b.n	800365c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8117 	beq.w	8003348 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800311a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003126:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800312a:	4b85      	ldr	r3, [pc, #532]	; (8003340 <HAL_UART_IRQHandler+0x298>)
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 810a 	beq.w	8003348 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d011      	beq.n	8003164 <HAL_UART_IRQHandler+0xbc>
 8003140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00b      	beq.n	8003164 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2201      	movs	r2, #1
 8003152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d011      	beq.n	8003194 <HAL_UART_IRQHandler+0xec>
 8003170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00b      	beq.n	8003194 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2202      	movs	r2, #2
 8003182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318a:	f043 0204 	orr.w	r2, r3, #4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d011      	beq.n	80031c4 <HAL_UART_IRQHandler+0x11c>
 80031a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00b      	beq.n	80031c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2204      	movs	r2, #4
 80031b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ba:	f043 0202 	orr.w	r2, r3, #2
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d017      	beq.n	8003200 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00b      	beq.n	8003200 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2208      	movs	r2, #8
 80031ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f6:	f043 0208 	orr.w	r2, r3, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003208:	2b00      	cmp	r3, #0
 800320a:	d012      	beq.n	8003232 <HAL_UART_IRQHandler+0x18a>
 800320c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00c      	beq.n	8003232 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003228:	f043 0220 	orr.w	r2, r3, #32
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 8211 	beq.w	8003660 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800323e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800324a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b40      	cmp	r3, #64	; 0x40
 800327c:	d005      	beq.n	800328a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800327e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003282:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003286:	2b00      	cmp	r3, #0
 8003288:	d04f      	beq.n	800332a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fdc0 	bl	8003e10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	2b40      	cmp	r3, #64	; 0x40
 800329c:	d141      	bne.n	8003322 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3308      	adds	r3, #8
 80032a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032ac:	e853 3f00 	ldrex	r3, [r3]
 80032b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80032b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3308      	adds	r3, #8
 80032c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80032d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032da:	e841 2300 	strex	r3, r2, [r1]
 80032de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1d9      	bne.n	800329e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d013      	beq.n	800331a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	4a13      	ldr	r2, [pc, #76]	; (8003344 <HAL_UART_IRQHandler+0x29c>)
 80032f8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe f9a2 	bl	8001648 <HAL_DMA_Abort_IT>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d017      	beq.n	800333a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003314:	4610      	mov	r0, r2
 8003316:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	e00f      	b.n	800333a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f9b4 	bl	8003688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003320:	e00b      	b.n	800333a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f9b0 	bl	8003688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003328:	e007      	b.n	800333a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f9ac 	bl	8003688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003338:	e192      	b.n	8003660 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333a:	bf00      	nop
    return;
 800333c:	e190      	b.n	8003660 <HAL_UART_IRQHandler+0x5b8>
 800333e:	bf00      	nop
 8003340:	04000120 	.word	0x04000120
 8003344:	08003ed9 	.word	0x08003ed9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334c:	2b01      	cmp	r3, #1
 800334e:	f040 814b 	bne.w	80035e8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8144 	beq.w	80035e8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 813d 	beq.w	80035e8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2210      	movs	r2, #16
 8003374:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	f040 80b5 	bne.w	80034f0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003392:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8164 	beq.w	8003664 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80033a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033a6:	429a      	cmp	r2, r3
 80033a8:	f080 815c 	bcs.w	8003664 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b20      	cmp	r3, #32
 80033be:	f000 8086 	beq.w	80034ce <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033f0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033fc:	e841 2300 	strex	r3, r2, [r1]
 8003400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1da      	bne.n	80033c2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3308      	adds	r3, #8
 8003412:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003416:	e853 3f00 	ldrex	r3, [r3]
 800341a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800341c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800341e:	f023 0301 	bic.w	r3, r3, #1
 8003422:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3308      	adds	r3, #8
 800342c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003430:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003434:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003436:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003438:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e1      	bne.n	800340c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3308      	adds	r3, #8
 800344e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003452:	e853 3f00 	ldrex	r3, [r3]
 8003456:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800345a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800345e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3308      	adds	r3, #8
 8003468:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800346c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800346e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003470:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003472:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003474:	e841 2300 	strex	r3, r2, [r1]
 8003478:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800347a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e3      	bne.n	8003448 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003496:	e853 3f00 	ldrex	r3, [r3]
 800349a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800349c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800349e:	f023 0310 	bic.w	r3, r3, #16
 80034a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80034b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034b8:	e841 2300 	strex	r3, r2, [r1]
 80034bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80034be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e4      	bne.n	800348e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe f884 	bl	80015d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	4619      	mov	r1, r3
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f8d7 	bl	800369c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034ee:	e0b9      	b.n	8003664 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80ab 	beq.w	8003668 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003512:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80a6 	beq.w	8003668 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800352a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003530:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800353e:	647b      	str	r3, [r7, #68]	; 0x44
 8003540:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800354c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e4      	bne.n	800351c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3308      	adds	r3, #8
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	e853 3f00 	ldrex	r3, [r3]
 8003560:	623b      	str	r3, [r7, #32]
   return(result);
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3308      	adds	r3, #8
 8003572:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003576:	633a      	str	r2, [r7, #48]	; 0x30
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800357c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800357e:	e841 2300 	strex	r3, r2, [r1]
 8003582:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e3      	bne.n	8003552 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	e853 3f00 	ldrex	r3, [r3]
 80035aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0310 	bic.w	r3, r3, #16
 80035b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	69b9      	ldr	r1, [r7, #24]
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	e841 2300 	strex	r3, r2, [r1]
 80035cc:	617b      	str	r3, [r7, #20]
   return(result);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e4      	bne.n	800359e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035de:	4619      	mov	r1, r3
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f85b 	bl	800369c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035e6:	e03f      	b.n	8003668 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00e      	beq.n	8003612 <HAL_UART_IRQHandler+0x56a>
 80035f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003608:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fe4c 	bl	80042a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003610:	e02d      	b.n	800366e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00e      	beq.n	800363c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800361e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01c      	beq.n	800366c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
    }
    return;
 800363a:	e017      	b.n	800366c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800363c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d012      	beq.n	800366e <HAL_UART_IRQHandler+0x5c6>
 8003648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00c      	beq.n	800366e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fc55 	bl	8003f04 <UART_EndTransmit_IT>
    return;
 800365a:	e008      	b.n	800366e <HAL_UART_IRQHandler+0x5c6>
      return;
 800365c:	bf00      	nop
 800365e:	e006      	b.n	800366e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003660:	bf00      	nop
 8003662:	e004      	b.n	800366e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003664:	bf00      	nop
 8003666:	e002      	b.n	800366e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003668:	bf00      	nop
 800366a:	e000      	b.n	800366e <HAL_UART_IRQHandler+0x5c6>
    return;
 800366c:	bf00      	nop
  }

}
 800366e:	37e8      	adds	r7, #232	; 0xe8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4b8a      	ldr	r3, [pc, #552]	; (8003908 <UART_SetConfig+0x254>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	6979      	ldr	r1, [r7, #20]
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	430a      	orrs	r2, r1
 8003724:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a78      	ldr	r2, [pc, #480]	; (800390c <UART_SetConfig+0x258>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d120      	bne.n	8003772 <UART_SetConfig+0xbe>
 8003730:	4b77      	ldr	r3, [pc, #476]	; (8003910 <UART_SetConfig+0x25c>)
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b03      	cmp	r3, #3
 800373a:	d817      	bhi.n	800376c <UART_SetConfig+0xb8>
 800373c:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <UART_SetConfig+0x90>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003755 	.word	0x08003755
 8003748:	08003761 	.word	0x08003761
 800374c:	08003767 	.word	0x08003767
 8003750:	0800375b 	.word	0x0800375b
 8003754:	2300      	movs	r3, #0
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e01d      	b.n	8003796 <UART_SetConfig+0xe2>
 800375a:	2302      	movs	r3, #2
 800375c:	77fb      	strb	r3, [r7, #31]
 800375e:	e01a      	b.n	8003796 <UART_SetConfig+0xe2>
 8003760:	2304      	movs	r3, #4
 8003762:	77fb      	strb	r3, [r7, #31]
 8003764:	e017      	b.n	8003796 <UART_SetConfig+0xe2>
 8003766:	2308      	movs	r3, #8
 8003768:	77fb      	strb	r3, [r7, #31]
 800376a:	e014      	b.n	8003796 <UART_SetConfig+0xe2>
 800376c:	2310      	movs	r3, #16
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e011      	b.n	8003796 <UART_SetConfig+0xe2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a67      	ldr	r2, [pc, #412]	; (8003914 <UART_SetConfig+0x260>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d102      	bne.n	8003782 <UART_SetConfig+0xce>
 800377c:	2300      	movs	r3, #0
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e009      	b.n	8003796 <UART_SetConfig+0xe2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a64      	ldr	r2, [pc, #400]	; (8003918 <UART_SetConfig+0x264>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d102      	bne.n	8003792 <UART_SetConfig+0xde>
 800378c:	2300      	movs	r3, #0
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e001      	b.n	8003796 <UART_SetConfig+0xe2>
 8003792:	2310      	movs	r3, #16
 8003794:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800379e:	d15a      	bne.n	8003856 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80037a0:	7ffb      	ldrb	r3, [r7, #31]
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d827      	bhi.n	80037f6 <UART_SetConfig+0x142>
 80037a6:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <UART_SetConfig+0xf8>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	080037d1 	.word	0x080037d1
 80037b0:	080037d9 	.word	0x080037d9
 80037b4:	080037e1 	.word	0x080037e1
 80037b8:	080037f7 	.word	0x080037f7
 80037bc:	080037e7 	.word	0x080037e7
 80037c0:	080037f7 	.word	0x080037f7
 80037c4:	080037f7 	.word	0x080037f7
 80037c8:	080037f7 	.word	0x080037f7
 80037cc:	080037ef 	.word	0x080037ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d0:	f7ff f9e4 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 80037d4:	61b8      	str	r0, [r7, #24]
        break;
 80037d6:	e013      	b.n	8003800 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037d8:	f7ff fa02 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 80037dc:	61b8      	str	r0, [r7, #24]
        break;
 80037de:	e00f      	b.n	8003800 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e0:	4b4e      	ldr	r3, [pc, #312]	; (800391c <UART_SetConfig+0x268>)
 80037e2:	61bb      	str	r3, [r7, #24]
        break;
 80037e4:	e00c      	b.n	8003800 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037e6:	f7ff f963 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 80037ea:	61b8      	str	r0, [r7, #24]
        break;
 80037ec:	e008      	b.n	8003800 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f2:	61bb      	str	r3, [r7, #24]
        break;
 80037f4:	e004      	b.n	8003800 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	77bb      	strb	r3, [r7, #30]
        break;
 80037fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d074      	beq.n	80038f0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	005a      	lsls	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	fbb2 f3f3 	udiv	r3, r2, r3
 800381a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b0f      	cmp	r3, #15
 8003820:	d916      	bls.n	8003850 <UART_SetConfig+0x19c>
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003828:	d212      	bcs.n	8003850 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	b29b      	uxth	r3, r3
 800382e:	f023 030f 	bic.w	r3, r3, #15
 8003832:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	b29b      	uxth	r3, r3
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	b29a      	uxth	r2, r3
 8003840:	89fb      	ldrh	r3, [r7, #14]
 8003842:	4313      	orrs	r3, r2
 8003844:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	89fa      	ldrh	r2, [r7, #14]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	e04f      	b.n	80038f0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	77bb      	strb	r3, [r7, #30]
 8003854:	e04c      	b.n	80038f0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003856:	7ffb      	ldrb	r3, [r7, #31]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d828      	bhi.n	80038ae <UART_SetConfig+0x1fa>
 800385c:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <UART_SetConfig+0x1b0>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	08003889 	.word	0x08003889
 8003868:	08003891 	.word	0x08003891
 800386c:	08003899 	.word	0x08003899
 8003870:	080038af 	.word	0x080038af
 8003874:	0800389f 	.word	0x0800389f
 8003878:	080038af 	.word	0x080038af
 800387c:	080038af 	.word	0x080038af
 8003880:	080038af 	.word	0x080038af
 8003884:	080038a7 	.word	0x080038a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003888:	f7ff f988 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 800388c:	61b8      	str	r0, [r7, #24]
        break;
 800388e:	e013      	b.n	80038b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003890:	f7ff f9a6 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 8003894:	61b8      	str	r0, [r7, #24]
        break;
 8003896:	e00f      	b.n	80038b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003898:	4b20      	ldr	r3, [pc, #128]	; (800391c <UART_SetConfig+0x268>)
 800389a:	61bb      	str	r3, [r7, #24]
        break;
 800389c:	e00c      	b.n	80038b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389e:	f7ff f907 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 80038a2:	61b8      	str	r0, [r7, #24]
        break;
 80038a4:	e008      	b.n	80038b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038aa:	61bb      	str	r3, [r7, #24]
        break;
 80038ac:	e004      	b.n	80038b8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	77bb      	strb	r3, [r7, #30]
        break;
 80038b6:	bf00      	nop
    }

    if (pclk != 0U)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d018      	beq.n	80038f0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	085a      	lsrs	r2, r3, #1
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	441a      	add	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d909      	bls.n	80038ec <UART_SetConfig+0x238>
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038de:	d205      	bcs.n	80038ec <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	e001      	b.n	80038f0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3720      	adds	r7, #32
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	efff69f3 	.word	0xefff69f3
 800390c:	40013800 	.word	0x40013800
 8003910:	40021000 	.word	0x40021000
 8003914:	40004400 	.word	0x40004400
 8003918:	40004800 	.word	0x40004800
 800391c:	007a1200 	.word	0x007a1200

08003920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01a      	beq.n	8003a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1e:	d10a      	bne.n	8003a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]
  }
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b098      	sub	sp, #96	; 0x60
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a74:	f7fd fc92 	bl	800139c <HAL_GetTick>
 8003a78:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d12e      	bne.n	8003ae6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a90:	2200      	movs	r2, #0
 8003a92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f88c 	bl	8003bb4 <UART_WaitOnFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d021      	beq.n	8003ae6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ac2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e6      	bne.n	8003aa2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e062      	b.n	8003bac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d149      	bne.n	8003b88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afc:	2200      	movs	r2, #0
 8003afe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f856 	bl	8003bb4 <UART_WaitOnFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d03c      	beq.n	8003b88 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	623b      	str	r3, [r7, #32]
   return(result);
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b34:	e841 2300 	strex	r3, r2, [r1]
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e6      	bne.n	8003b0e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3308      	adds	r3, #8
 8003b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3308      	adds	r3, #8
 8003b5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b60:	61fa      	str	r2, [r7, #28]
 8003b62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	69b9      	ldr	r1, [r7, #24]
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e5      	bne.n	8003b40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e011      	b.n	8003bac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3758      	adds	r7, #88	; 0x58
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc4:	e049      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d045      	beq.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bce:	f7fd fbe5 	bl	800139c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e048      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d031      	beq.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d110      	bne.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f8ff 	bl	8003e10 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2208      	movs	r2, #8
 8003c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e029      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c34:	d111      	bne.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f8e5 	bl	8003e10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e00f      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69da      	ldr	r2, [r3, #28]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4013      	ands	r3, r2
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d0a6      	beq.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b097      	sub	sp, #92	; 0x5c
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	88fa      	ldrh	r2, [r7, #6]
 8003ca4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb6:	d10e      	bne.n	8003cd6 <UART_Start_Receive_IT+0x52>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d105      	bne.n	8003ccc <UART_Start_Receive_IT+0x48>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003cc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cca:	e02d      	b.n	8003d28 <UART_Start_Receive_IT+0xa4>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	22ff      	movs	r2, #255	; 0xff
 8003cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cd4:	e028      	b.n	8003d28 <UART_Start_Receive_IT+0xa4>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10d      	bne.n	8003cfa <UART_Start_Receive_IT+0x76>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <UART_Start_Receive_IT+0x6c>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	22ff      	movs	r2, #255	; 0xff
 8003cea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cee:	e01b      	b.n	8003d28 <UART_Start_Receive_IT+0xa4>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	227f      	movs	r2, #127	; 0x7f
 8003cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cf8:	e016      	b.n	8003d28 <UART_Start_Receive_IT+0xa4>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d02:	d10d      	bne.n	8003d20 <UART_Start_Receive_IT+0x9c>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <UART_Start_Receive_IT+0x92>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	227f      	movs	r2, #127	; 0x7f
 8003d10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d14:	e008      	b.n	8003d28 <UART_Start_Receive_IT+0xa4>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	223f      	movs	r2, #63	; 0x3f
 8003d1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d1e:	e003      	b.n	8003d28 <UART_Start_Receive_IT+0xa4>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2222      	movs	r2, #34	; 0x22
 8003d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d42:	e853 3f00 	ldrex	r3, [r3]
 8003d46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3308      	adds	r3, #8
 8003d56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d58:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e5      	bne.n	8003d38 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d74:	d107      	bne.n	8003d86 <UART_Start_Receive_IT+0x102>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d103      	bne.n	8003d86 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4a21      	ldr	r2, [pc, #132]	; (8003e08 <UART_Start_Receive_IT+0x184>)
 8003d82:	669a      	str	r2, [r3, #104]	; 0x68
 8003d84:	e002      	b.n	8003d8c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a20      	ldr	r2, [pc, #128]	; (8003e0c <UART_Start_Receive_IT+0x188>)
 8003d8a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d019      	beq.n	8003dc8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34
 8003db4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e6      	bne.n	8003d94 <UART_Start_Receive_IT+0x110>
 8003dc6:	e018      	b.n	8003dfa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f043 0320 	orr.w	r3, r3, #32
 8003ddc:	653b      	str	r3, [r7, #80]	; 0x50
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de6:	623b      	str	r3, [r7, #32]
 8003de8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	69f9      	ldr	r1, [r7, #28]
 8003dec:	6a3a      	ldr	r2, [r7, #32]
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e6      	bne.n	8003dc8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	375c      	adds	r7, #92	; 0x5c
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	08004101 	.word	0x08004101
 8003e0c:	08003f59 	.word	0x08003f59

08003e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b095      	sub	sp, #84	; 0x54
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e36:	643b      	str	r3, [r7, #64]	; 0x40
 8003e38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e6      	bne.n	8003e18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3308      	adds	r3, #8
 8003e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e5      	bne.n	8003e4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d118      	bne.n	8003eb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	e853 3f00 	ldrex	r3, [r3]
 8003e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f023 0310 	bic.w	r3, r3, #16
 8003e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	6979      	ldr	r1, [r7, #20]
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e6      	bne.n	8003e86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ecc:	bf00      	nop
 8003ece:	3754      	adds	r7, #84	; 0x54
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff fbc6 	bl	8003688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6979      	ldr	r1, [r7, #20]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	613b      	str	r3, [r7, #16]
   return(result);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e6      	bne.n	8003f0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff fb92 	bl	8003674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f50:	bf00      	nop
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b09c      	sub	sp, #112	; 0x70
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f66:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f70:	2b22      	cmp	r3, #34	; 0x22
 8003f72:	f040 80b9 	bne.w	80040e8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f84:	b2d9      	uxtb	r1, r3
 8003f86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f90:	400a      	ands	r2, r1
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 809c 	bne.w	80040f8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fde:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fe0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fe4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e6      	bne.n	8003fc0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004004:	f023 0301 	bic.w	r3, r3, #1
 8004008:	667b      	str	r3, [r7, #100]	; 0x64
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3308      	adds	r3, #8
 8004010:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004012:	647a      	str	r2, [r7, #68]	; 0x44
 8004014:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004018:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e5      	bne.n	8003ff2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d018      	beq.n	800407a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	623b      	str	r3, [r7, #32]
   return(result);
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800405c:	663b      	str	r3, [r7, #96]	; 0x60
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004066:	633b      	str	r3, [r7, #48]	; 0x30
 8004068:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800406c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e6      	bne.n	8004048 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407e:	2b01      	cmp	r3, #1
 8004080:	d12e      	bne.n	80040e0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	60fb      	str	r3, [r7, #12]
   return(result);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f023 0310 	bic.w	r3, r3, #16
 800409c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	69b9      	ldr	r1, [r7, #24]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	617b      	str	r3, [r7, #20]
   return(result);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e6      	bne.n	8004088 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d103      	bne.n	80040d0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2210      	movs	r2, #16
 80040ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040d6:	4619      	mov	r1, r3
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff fadf 	bl	800369c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040de:	e00b      	b.n	80040f8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7fc fd43 	bl	8000b6c <HAL_UART_RxCpltCallback>
}
 80040e6:	e007      	b.n	80040f8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0208 	orr.w	r2, r2, #8
 80040f6:	619a      	str	r2, [r3, #24]
}
 80040f8:	bf00      	nop
 80040fa:	3770      	adds	r7, #112	; 0x70
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b09c      	sub	sp, #112	; 0x70
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800410e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004118:	2b22      	cmp	r3, #34	; 0x22
 800411a:	f040 80b9 	bne.w	8004290 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004124:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800412e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004132:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004136:	4013      	ands	r3, r2
 8004138:	b29a      	uxth	r2, r3
 800413a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800413c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	1c9a      	adds	r2, r3, #2
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	f040 809c 	bne.w	80042a0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800417c:	667b      	str	r3, [r7, #100]	; 0x64
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004186:	657b      	str	r3, [r7, #84]	; 0x54
 8004188:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800418c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e6      	bne.n	8004168 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3308      	adds	r3, #8
 80041a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	663b      	str	r3, [r7, #96]	; 0x60
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041ba:	643a      	str	r2, [r7, #64]	; 0x40
 80041bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e5      	bne.n	800419a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d018      	beq.n	8004222 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004204:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004210:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e6      	bne.n	80041f0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004226:	2b01      	cmp	r3, #1
 8004228:	d12e      	bne.n	8004288 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	60bb      	str	r3, [r7, #8]
   return(result);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f023 0310 	bic.w	r3, r3, #16
 8004244:	65bb      	str	r3, [r7, #88]	; 0x58
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	6979      	ldr	r1, [r7, #20]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	613b      	str	r3, [r7, #16]
   return(result);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e6      	bne.n	8004230 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b10      	cmp	r3, #16
 800426e:	d103      	bne.n	8004278 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2210      	movs	r2, #16
 8004276:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800427e:	4619      	mov	r1, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff fa0b 	bl	800369c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004286:	e00b      	b.n	80042a0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7fc fc6f 	bl	8000b6c <HAL_UART_RxCpltCallback>
}
 800428e:	e007      	b.n	80042a0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0208 	orr.w	r2, r2, #8
 800429e:	619a      	str	r2, [r3, #24]
}
 80042a0:	bf00      	nop
 80042a2:	3770      	adds	r7, #112	; 0x70
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <__libc_init_array>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	4d0d      	ldr	r5, [pc, #52]	; (80042f4 <__libc_init_array+0x38>)
 80042c0:	4c0d      	ldr	r4, [pc, #52]	; (80042f8 <__libc_init_array+0x3c>)
 80042c2:	1b64      	subs	r4, r4, r5
 80042c4:	10a4      	asrs	r4, r4, #2
 80042c6:	2600      	movs	r6, #0
 80042c8:	42a6      	cmp	r6, r4
 80042ca:	d109      	bne.n	80042e0 <__libc_init_array+0x24>
 80042cc:	4d0b      	ldr	r5, [pc, #44]	; (80042fc <__libc_init_array+0x40>)
 80042ce:	4c0c      	ldr	r4, [pc, #48]	; (8004300 <__libc_init_array+0x44>)
 80042d0:	f000 f886 	bl	80043e0 <_init>
 80042d4:	1b64      	subs	r4, r4, r5
 80042d6:	10a4      	asrs	r4, r4, #2
 80042d8:	2600      	movs	r6, #0
 80042da:	42a6      	cmp	r6, r4
 80042dc:	d105      	bne.n	80042ea <__libc_init_array+0x2e>
 80042de:	bd70      	pop	{r4, r5, r6, pc}
 80042e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e4:	4798      	blx	r3
 80042e6:	3601      	adds	r6, #1
 80042e8:	e7ee      	b.n	80042c8 <__libc_init_array+0xc>
 80042ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ee:	4798      	blx	r3
 80042f0:	3601      	adds	r6, #1
 80042f2:	e7f2      	b.n	80042da <__libc_init_array+0x1e>
 80042f4:	08004480 	.word	0x08004480
 80042f8:	08004480 	.word	0x08004480
 80042fc:	08004480 	.word	0x08004480
 8004300:	0800448c 	.word	0x0800448c

08004304 <memset>:
 8004304:	4402      	add	r2, r0
 8004306:	4603      	mov	r3, r0
 8004308:	4293      	cmp	r3, r2
 800430a:	d100      	bne.n	800430e <memset+0xa>
 800430c:	4770      	bx	lr
 800430e:	f803 1b01 	strb.w	r1, [r3], #1
 8004312:	e7f9      	b.n	8004308 <memset+0x4>

08004314 <register_fini>:
 8004314:	4b02      	ldr	r3, [pc, #8]	; (8004320 <register_fini+0xc>)
 8004316:	b113      	cbz	r3, 800431e <register_fini+0xa>
 8004318:	4802      	ldr	r0, [pc, #8]	; (8004324 <register_fini+0x10>)
 800431a:	f000 b805 	b.w	8004328 <atexit>
 800431e:	4770      	bx	lr
 8004320:	00000000 	.word	0x00000000
 8004324:	08004335 	.word	0x08004335

08004328 <atexit>:
 8004328:	2300      	movs	r3, #0
 800432a:	4601      	mov	r1, r0
 800432c:	461a      	mov	r2, r3
 800432e:	4618      	mov	r0, r3
 8004330:	f000 b816 	b.w	8004360 <__register_exitproc>

08004334 <__libc_fini_array>:
 8004334:	b538      	push	{r3, r4, r5, lr}
 8004336:	4d07      	ldr	r5, [pc, #28]	; (8004354 <__libc_fini_array+0x20>)
 8004338:	4c07      	ldr	r4, [pc, #28]	; (8004358 <__libc_fini_array+0x24>)
 800433a:	1b64      	subs	r4, r4, r5
 800433c:	10a4      	asrs	r4, r4, #2
 800433e:	b91c      	cbnz	r4, 8004348 <__libc_fini_array+0x14>
 8004340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004344:	f000 b852 	b.w	80043ec <_fini>
 8004348:	3c01      	subs	r4, #1
 800434a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800434e:	4798      	blx	r3
 8004350:	e7f5      	b.n	800433e <__libc_fini_array+0xa>
 8004352:	bf00      	nop
 8004354:	0800448c 	.word	0x0800448c
 8004358:	08004490 	.word	0x08004490

0800435c <__retarget_lock_acquire_recursive>:
 800435c:	4770      	bx	lr

0800435e <__retarget_lock_release_recursive>:
 800435e:	4770      	bx	lr

08004360 <__register_exitproc>:
 8004360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004364:	4d1c      	ldr	r5, [pc, #112]	; (80043d8 <__register_exitproc+0x78>)
 8004366:	4606      	mov	r6, r0
 8004368:	6828      	ldr	r0, [r5, #0]
 800436a:	4698      	mov	r8, r3
 800436c:	460f      	mov	r7, r1
 800436e:	4691      	mov	r9, r2
 8004370:	f7ff fff4 	bl	800435c <__retarget_lock_acquire_recursive>
 8004374:	4b19      	ldr	r3, [pc, #100]	; (80043dc <__register_exitproc+0x7c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800437c:	4628      	mov	r0, r5
 800437e:	b91c      	cbnz	r4, 8004388 <__register_exitproc+0x28>
 8004380:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8004384:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8004388:	6865      	ldr	r5, [r4, #4]
 800438a:	6800      	ldr	r0, [r0, #0]
 800438c:	2d1f      	cmp	r5, #31
 800438e:	dd05      	ble.n	800439c <__register_exitproc+0x3c>
 8004390:	f7ff ffe5 	bl	800435e <__retarget_lock_release_recursive>
 8004394:	f04f 30ff 	mov.w	r0, #4294967295
 8004398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800439c:	b19e      	cbz	r6, 80043c6 <__register_exitproc+0x66>
 800439e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80043a2:	2201      	movs	r2, #1
 80043a4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80043a8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80043ac:	40aa      	lsls	r2, r5
 80043ae:	4313      	orrs	r3, r2
 80043b0:	2e02      	cmp	r6, #2
 80043b2:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80043b6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80043ba:	bf02      	ittt	eq
 80043bc:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80043c0:	431a      	orreq	r2, r3
 80043c2:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 80043c6:	1c6b      	adds	r3, r5, #1
 80043c8:	3502      	adds	r5, #2
 80043ca:	6063      	str	r3, [r4, #4]
 80043cc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80043d0:	f7ff ffc5 	bl	800435e <__retarget_lock_release_recursive>
 80043d4:	2000      	movs	r0, #0
 80043d6:	e7df      	b.n	8004398 <__register_exitproc+0x38>
 80043d8:	20000438 	.word	0x20000438
 80043dc:	0800447c 	.word	0x0800447c

080043e0 <_init>:
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	bf00      	nop
 80043e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e6:	bc08      	pop	{r3}
 80043e8:	469e      	mov	lr, r3
 80043ea:	4770      	bx	lr

080043ec <_fini>:
 80043ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ee:	bf00      	nop
 80043f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f2:	bc08      	pop	{r3}
 80043f4:	469e      	mov	lr, r3
 80043f6:	4770      	bx	lr
